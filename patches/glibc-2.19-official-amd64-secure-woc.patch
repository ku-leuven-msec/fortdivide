diff -r -N --unified glibc-2.19.orig/crypt/crypt_util.c glibc-2.19-swoc/crypt/crypt_util.c
--- glibc-2.19.orig/crypt/crypt_util.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/crypt/crypt_util.c	2015-06-05 15:42:14.194422508 +0200
@@ -360,10 +360,10 @@
   sb[2] = (long64*)__data->sb2; sb[3] = (long64*)__data->sb3;
 #endif
 
-  if(small_tables_initialized == 0) {
+  if(atomic_load(small_tables_initialized) == 0) {
 #ifdef __GNU_LIBRARY__
     __libc_lock_lock (_ufc_tables_lock);
-    if(small_tables_initialized)
+    if(atomic_load(small_tables_initialized))
       goto small_tables_done;
 #endif
 
@@ -467,7 +467,7 @@
       }
     }
     atomic_write_barrier ();
-    small_tables_initialized = 1;
+    atomic_store(small_tables_initialized, 1);
 #ifdef __GNU_LIBRARY__
 small_tables_done:
     __libc_lock_unlock(_ufc_tables_lock);
diff -r -N --unified glibc-2.19.orig/csu/libc-start.c glibc-2.19-swoc/csu/libc-start.c
--- glibc-2.19.orig/csu/libc-start.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/csu/libc-start.c	2015-07-03 00:29:45.788633734 +0200
@@ -104,6 +104,212 @@
 # define MAIN_AUXVEC_PARAM
 #endif
 
+#ifdef USE_MVEE_LIBC
+
+#define MVEE_SLAVE_YIELD
+#define MVEE_TOTAL_CLOCK_COUNT   2048
+#define MVEE_CLOCK_GROUP_SIZE    64
+#define MVEE_TOTAL_CLOCK_GROUPS  (MVEE_TOTAL_CLOCK_COUNT / MVEE_CLOCK_GROUP_SIZE)
+
+struct mvee_clock
+{ 
+  volatile unsigned long lock;
+  volatile unsigned long time;
+  unsigned char padding[64 - 2 * sizeof(unsigned long)]; // prevents false sharing
+};
+
+struct mvee_op_entry
+{
+  volatile unsigned long  time_and_idx; // the value we must see in mvee_time[idx] before we can replay the operation
+};
+
+struct mvee_hidden_buffer_array_entry
+{
+	struct mvee_op_entry*          queue_ptr;
+	unsigned long                  queue_size;
+	unsigned long                  queue_pos;
+	unsigned long                  clock_idx;
+};
+
+unsigned char                  mvee_sync_enabled             = 0;
+unsigned char                  mvee_libc_initialized         = 0;
+unsigned char                  mvee_master_variant           = 0;
+
+__attribute__((aligned (64)))
+struct mvee_clock              mvee_clocks[MVEE_TOTAL_CLOCK_COUNT + 1];
+
+#define likely(x)       __builtin_expect((x),1)
+#define unlikely(x)     __builtin_expect((x),0)
+
+/* MVEE PATCH:
+   Checks wether or not all variants got HEAP_MAX_SIZE aligned heaps from
+   the previous mmap request. If some of them have not, ALL variants
+   have to bail out and fall back to another heap allocation method.
+   This ensures that the variants stay in sync with respect to future mm
+   requests.
+*/
+#define HEAP_MIN_SIZE (32 * 1024)
+#ifndef HEAP_MAX_SIZE
+# ifdef DEFAULT_MMAP_THRESHOLD_MAX
+#  define HEAP_MAX_SIZE (2 * DEFAULT_MMAP_THRESHOLD_MAX)
+# else
+#  define HEAP_MAX_SIZE (1024 * 1024) /* must be a power of two */
+# endif
+#endif
+
+int
+mvee_all_heaps_aligned(char* heap)
+{
+	// if we're not running under MVEE control,
+	// just check the alignment of the current heap
+	if (mvee_libc_initialized != 2)
+    {
+		if ((unsigned long)heap & (HEAP_MAX_SIZE-1))
+			return 0;
+		return 1;
+    }
+
+	// We ARE running under MVEE control
+	// => ask the MVEE to check the alignments
+	// of ALL heaps
+	return syscall(MVEE_ALL_HEAPS_ALIGNED);
+}
+
+/* 
+ * mvee_infinite_loop:
+ * this function is used for both thread transfering and signal delivery 
+ * 
+ * 1) to transfer threads to a new monitor, the original monitor (i.e. the 
+ * monitor that monitors the childs that instigated the fork event) needs to
+ * detach from the threads first. While the threads are detached, they can
+ * run freely, without the intervention of a debugger.
+ * As such, we have to move the program counter to an infinite loop while
+ * the threads are detached. This way, the threads will all be in an equivalent
+ * state when the new monitor attaches to them.
+ * Because we're going to replace the registers by their original contents
+ * when the new monitor attaches, we can use sys_pause calls in the infinite
+ * loop.
+ * 
+ * 2) delivering signals through the ptrace API happens asynchronously 
+ * (I found out the hard way). As such, we should wait for the threads to be
+ * in equivalent states (e.g. stopped on the same syscall). Then the registers
+ * should be backed up and the syscall nr should be replaced by a harmless
+ * syscall that doesn't modify the program state. We use sys_getpid for this
+ * purpose. When that replaced syscall returns, we change the pc to this
+ * infinite loop while we wait for async signal delivery.
+ * We probably cannot use syscalls while waiting for signal delivery. 
+ * One possible exception is sys_sched_yield. Our modified MVEE kernel does
+ * not report this syscall to the ptracer
+ * 
+ * the with_syscalls parameter is passed through the ecx register!
+ */
+void mvee_infinite_loop(int with_syscalls, int dummy)
+{
+	if (with_syscalls)
+    {
+		for (;;)
+			syscall(__NR_pause);
+    }
+	else
+    {
+		for (;;)
+		{
+			dummy = dummy << 2;
+		}
+    }
+}
+
+void mvee_initialize_libc(void)
+{
+	long res = syscall(MVEE_RUNS_UNDER_MVEE_CONTROL, &mvee_sync_enabled, &mvee_infinite_loop, 
+					   NULL, NULL, &mvee_master_variant);
+	mvee_libc_initialized = res ? 2 : 1;
+}
+
+// This function is a bit tricky, especially on x86_64!
+// In some contexts, such as syscalls that enable asynchronous cancellation,
+// libc expects none of the code it executes to touch registers other than
+// %rax and %r11. Consequently, we have to make sure that at most 2 registers
+// live at any point during our mvee funcs!
+static inline int mvee_should_sync(void)
+{
+	if (unlikely(!mvee_libc_initialized))
+	{
+		mvee_initialize_libc();
+	}
+	return mvee_sync_enabled;
+}
+
+int mvee_should_sync_tid(void)
+{
+	return mvee_should_sync();
+}
+
+#define cpu_relax() asm volatile("rep; nop" ::: "memory")
+
+#define gcc_barrier() asm volatile("" ::: "memory")
+
+static inline unsigned short mvee_hash_word_ptr(void* word_ptr)
+{
+	// page number defines the clock group
+	// offset within page defines the clock within that group
+
+	return 
+		(((((unsigned long)word_ptr >> 24) % MVEE_TOTAL_CLOCK_GROUPS) * (MVEE_CLOCK_GROUP_SIZE) 
+		  + ((((unsigned long)word_ptr & 4095) >> 6) % MVEE_CLOCK_GROUP_SIZE))
+		 & 0xFFF) + 1;
+}
+
+
+// called when a new thread/process is created
+void mvee_invalidate_buffer()
+{
+//	mvee_thread_local_queue = NULL;
+}
+
+void  mvee_initialize_buffer(void)
+{
+	long mvee_thread_local_queue_id = syscall(MVEE_GET_SHARED_BUFFER, 
+											  &mvee_clocks, 
+											  MVEE_LIBC_ATOMIC_BUFFER_HIDDEN,
+											  NULL,
+											  NULL,
+											  NULL,
+											  NULL);
+
+	// this will return NULL for the hidden atomic buffer
+	syscall(__NR_shmat, mvee_thread_local_queue_id, NULL, 0);
+
+	long hidden_buffer_array_id = syscall(MVEE_GET_SHARED_BUFFER,
+										  NULL,
+										  MVEE_LIBC_HIDDEN_BUFFER_ARRAY,
+										  NULL,
+										  NULL,
+										  NULL,
+										  NULL);
+
+	// this will also return NULL
+	syscall(__NR_shmat, hidden_buffer_array_id, NULL, 0);
+}
+
+unsigned char mvee_atomic_preop(unsigned short op_type, void* word_ptr)
+{
+	return mvee_atomic_preop_internal(word_ptr);
+}
+
+void mvee_atomic_postop(unsigned char preop_result)
+{
+	mvee_atomic_postop_internal(preop_result);
+}
+
+unsigned char mvee_should_futex_unlock(void)
+{
+	return (!mvee_master_variant && mvee_should_sync()) ? 1 : 0;
+}
+
+#endif
+
+
 STATIC int LIBC_START_MAIN (int (*main) (int, char **, char **
 					 MAIN_AUXVEC_DECL),
 			    int argc,
diff -r -N --unified glibc-2.19.orig/csu/Makefile glibc-2.19-swoc/csu/Makefile
--- glibc-2.19.orig/csu/Makefile	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/csu/Makefile	2015-07-01 19:43:36.800215342 +0200
@@ -25,7 +25,7 @@
 subdir := csu
 
 routines = init-first libc-start $(libc-init) sysdep version check_fds \
-	   libc-tls elf-init dso_handle
+	   libc-tls elf-init dso_handle mvee_replication_agent_asm
 aux	 = errno
 elide-routines.os = libc-tls
 static-only-routines = elf-init
diff -r -N --unified glibc-2.19.orig/csu/mvee_replication_agent_asm.S glibc-2.19-swoc/csu/mvee_replication_agent_asm.S
--- glibc-2.19.orig/csu/mvee_replication_agent_asm.S	1970-01-01 01:00:00.000000000 +0100
+++ glibc-2.19-swoc/csu/mvee_replication_agent_asm.S	2015-08-03 16:19:28.062105141 +0200
@@ -0,0 +1,298 @@
+#include <sysdep.h> 
+		
+        .text
+		.intel_syntax noprefix
+
+		.globl mvee_libc_initialized
+		.globl mvee_sync_enabled
+		.globl mvee_master_variant
+		.globl mvee_clocks
+		.globl mvee_yield
+		
+        .globl mvee_atomic_preop_internal
+        .type mvee_atomic_preop_internal,@function
+		cfi_startproc
+        .align 16
+
+		// rdi = word pointer (arg 0) / clock index
+		// rsi = clock pointer
+		// rdx = temporary 
+        // r10 = atomic buffer pointer
+		// r8  = atomic buffer pos
+		// r9  = atomic buffer size
+mvee_atomic_preop_internal:
+
+		//  check if libc has been initialized
+#ifdef PIC	
+		cmp BYTE PTR [rip + mvee_libc_initialized], 0x0
+#else
+		cmp BYTE PTR mvee_libc_initialized, 0x0
+#endif	
+		je 20f
+
+1:
+		// check if synchronization is enabled
+#ifdef PIC		
+		cmp BYTE PTR [rip + mvee_sync_enabled], 0x0
+#else
+		cmp BYTE PTR mvee_sync_enabled, 0x0
+#endif
+		je 21f
+
+		// try to read the atomic buffer pointer from GS
+		xor r10, r10
+
+//// libc initialized AND sync is enabled
+2:		
+		// This instruction will trap if the buffer hasn't been initialized yet
+		// Fortunately, GHUMVEE is clever enough to recover from the trap
+		mov r10, QWORD PTR gs:0x440 	// 0x440 is MVEE_LIBC_HIDDEN_BUFFER_ARRAY * 64
+		test r10, r10
+		je 19f
+		
+		// fetch the current position and the buffer size
+		mov r9, QWORD PTR gs:0x448 	    // atomic buffer size
+		mov r8, QWORD PTR gs:0x450	    // atomic buffer pos
+		cmp r9, r8
+		jbe 18f
+		
+//// the buffer isn't full
+3:
+#ifdef PIC
+		cmp BYTE PTR [rip + mvee_master_variant], 0x0
+#else
+		cmp BYTE PTR mvee_master_variant, 0x0
+#endif
+		je 6f
+
+		// calculate the clock index for this word
+		mov rdx, rdi
+		shr rdi, 0x12
+		and rdi, 0x7c0
+
+		shr rdx, 0x6
+		and rdx, 0x3f
+
+		or rdi, rdx
+		inc rdi
+		
+		// in r9 we now calculate the offset of this clock relative to the start of the mvee_clocks structure
+		mov r9, rdi
+		shl r9, 0x6
+
+		// we now have the clock index in %rdi
+#ifdef PIC
+		lea rsi, [rip + mvee_clocks]
+#else
+		lea rsi, mvee_clocks
+#endif
+
+		// spinlock for this clock
+		mov rdx, 0x1
+		
+4:		
+		xor rax, rax
+		lock cmpxchg QWORD PTR [rsi + r9], rdx
+		jne 5f
+
+		// get the current time on the clock
+		// r9 still contains the offset of the clock relative to the mvee_clocks array start
+		add r9, 0x8
+		mov rdx, QWORD PTR [rsi + r9]
+
+		// rdx is now the current time on clock[rdi]. Now we shift the time to the
+		// left by 12 bits and encode the clock index in the lower 12 bits
+		shl rdx, 0xc
+		or rdx, rdi
+
+		// we now want to store this value in the atomic buffer
+		// our current position in the buffer is still in r8
+		// the buffer pointer is in r10
+		lea r10, [r10 + r8 * 8]
+		mov QWORD PTR [r10], rdx
+
+		// clear out register r10 because it contains a valid
+		// pointer to the hidden atomic buffer
+		xor r10, r10
+
+		// increment the position and store it in the hidden buffer array
+		inc r8
+		mov QWORD PTR gs:0x450, r8
+
+		// also store the clock index in the hidden buffer array
+		// mvee_atomic_postop will need this
+		mov QWORD PTR gs:0x458, rdi
+
+		// return 1
+		mov rax, 1
+
+		ret		
+
+//// lock for the selected clock is already locked
+5:
+		// possibly call sys_sched_yield here?
+		pause
+		jmp 4b
+
+//// we're in the slave variant
+6:		
+		// pos is in r8, buffer pointer in r10
+		// load time_and_index from the buffer
+		lea r10, [r10 + r8 * 8]
+
+///	test time_and_index value
+7:		
+		mov rdx, QWORD PTR [r10]
+		test rdx, rdx
+		je 17f
+
+		// we have the time_and_index. Now break it up into its components
+		mov rdi, rdx
+		and rdi, 0xfff
+		// the index is in rdi now
+
+		shr rdx, 0xc
+		shl rdx, 0xc
+		// we now have the time in rdx
+		
+#ifdef PIC
+		lea rsi, [rip + mvee_clocks]
+#else
+		lea rsi, mvee_clocks
+#endif
+		mov r10, rdi
+		shl r10, 0x6
+		add r10, rsi
+
+		// r10 is now the address of clock[rdi]
+		
+/// test the time value
+8:
+		mov rsi, QWORD PTR [r10 + 0x8]
+		shl rsi, 0xc
+		cmp rsi, rdx
+		jne 16f
+
+		// ok. We can complete the operation now
+		// store the index so it may be used in mvee_atomic_postop
+		mov QWORD PTR gs:0x458, rdi
+
+		// we've overwritten the atomic_buffer pointer so that one doesn't have to be cleared out
+		mov rax, 0x2
+
+		ret
+
+/// the selected clock hasn't reached the time needed to complete the operation yet
+16:
+//		mov rax, 0x18 // __NR_sched_yield
+//		syscall
+
+		// make sure that nothing leaks
+		// and everything we still need gets preserved
+		// through the mvee_yield call
+		mov QWORD PTR gs:0x460, r10
+		mov QWORD PTR gs:0x468, rdi
+		mov QWORD PTR gs:0x470, rdx
+		xor rdi, rdi
+		xor r10, r10
+		call mvee_yield
+		mov rdi, QWORD PTR gs:0x468
+		mov r10, QWORD PTR gs:0x460
+		mov rdx, QWORD PTR gs:0x470
+//		pause
+		jmp 8b
+
+/// no time_and_index has appeared yet in the buffer
+17:
+//		mov rax, 0x18 // 0x18 is __NR_sched_yield
+//		syscall
+
+		// ditto here...
+		mov QWORD PTR gs:0x460, r10
+		mov QWORD PTR gs:0x468, rdi
+		xor rdi, rdi
+		xor r10, r10
+		call mvee_yield
+		mov rdi, QWORD PTR gs:0x468
+		mov r10, QWORD PTR gs:0x460
+//		pause
+		jmp 7b
+		
+//// buffer full
+18:
+		push rdi
+		mov rax, 0x70000004 // MVEE_FLUSH_BUFFER
+		mov rdi, 0x11       // MVEE_LIBC_ATOMIC_BUFFER_HIDDEN
+		syscall
+		xor r8, r8          // set pos to 0
+		mov QWORD PTR gs:0x450, r8
+		pop rdi
+		jmp 3b
+		
+//// buffer not initialized
+19:
+		call mvee_initialize_buffer
+		mov r10, QWORD PTR gs:0x440 // reload pointer from gs
+		jmp 2b
+		
+//// mvee libc not initialized yet
+20:
+		call mvee_initialize_libc
+		jmp 1b
+
+//// sync not enabled
+21:
+		xor rax, rax
+	
+		ret
+
+		
+		cfi_endproc
+
+		
+		.globl mvee_atomic_postop_internal
+        .type mvee_atomic_postop_internal,@function
+		cfi_startproc
+        .align 16
+
+		// rdi = preop_result
+mvee_atomic_postop_internal:
+
+//		movzx rdi, dil
+		test rdi, rdi
+		je 3f
+
+		// get previous index from gs
+		mov rax, QWORD PTR gs:0x458
+
+		// increment the time on the specified clock
+
+				
+#ifdef PIC
+		lea rdx, [rip + mvee_clocks]
+#else
+		lea rdx, mvee_clocks
+#endif
+		shl rax, 0x6
+		add rax, rdx
+		inc QWORD PTR [rax + 0x8]
+
+		// unlock if we're the master
+		cmp rdi, 0x1
+		jne 2f
+		mov QWORD PTR [rax], 0x0
+
+		ret
+
+/// we're the slave - increment the current pos here		
+2:
+		inc QWORD PTR gs:0x450
+
+		// fallthrough to ret
+		
+/// preop result was 0
+3:
+		ret
+		
+		
+		cfi_endproc
diff -r -N --unified glibc-2.19.orig/csu/Versions glibc-2.19-swoc/csu/Versions
--- glibc-2.19.orig/csu/Versions	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/csu/Versions	2015-07-02 18:31:49.952560714 +0200
@@ -4,6 +4,20 @@
   GLIBC_2.0 {
     # helper functions
     __libc_init_first; __libc_start_main;
+    mvee_atomic_preop;
+    mvee_atomic_postop;
+    mvee_atomic_preop_internal;
+    mvee_atomic_postop_internal;
+    mvee_invalidate_buffer;
+    mvee_all_heaps_aligned;
+    mvee_should_sync_tid;
+    mvee_should_futex_unlock;
+
+	# we need these in the assembler code
+	mvee_libc_initialized;
+	mvee_sync_enabled;
+	mvee_clocks;
+	mvee_master_variant;
   }
   GLIBC_2.1 {
     # New special glibc functions.
diff -r -N --unified glibc-2.19.orig/inet/getnetgrent_r.c glibc-2.19-swoc/inet/getnetgrent_r.c
--- glibc-2.19.orig/inet/getnetgrent_r.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/inet/getnetgrent_r.c	2015-06-05 15:42:14.194422508 +0200
@@ -50,7 +50,7 @@
   static service_user *startp;
   int no_more;
 
-  if (!startp_initialized)
+  if (!atomic_load(startp_initialized))
     {
       /* Executing this more than once at the same time must yield the
 	 same result every time.  So we need no locking.  */
@@ -60,7 +60,7 @@
       PTR_MANGLE (startp);
 #endif
       atomic_write_barrier ();
-      startp_initialized = true;
+      atomic_store(startp_initialized, true);
     }
   else
     {
diff -r -N --unified glibc-2.19.orig/Makeconfig glibc-2.19-swoc/Makeconfig
--- glibc-2.19.orig/Makeconfig	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/Makeconfig	2015-07-02 14:50:29.367181292 +0200
@@ -349,7 +349,7 @@
 # directives the preprocessor produces.  If you have troubling compiling
 # assembly code, try using -P here to suppress these directives.
 ifndef asm-CPPFLAGS
-asm-CPPFLAGS =
+asm-CPPFLAGS = 
 endif
 
 as-needed := -Wl,--as-needed
diff -r -N --unified glibc-2.19.orig/malloc/arena.c glibc-2.19-swoc/malloc/arena.c
--- glibc-2.19.orig/malloc/arena.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/malloc/arena.c	2015-07-01 17:17:08.283964257 +0200
@@ -526,7 +526,7 @@
 new_heap (size_t size, size_t top_pad)
 {
   size_t page_mask = GLRO (dl_pagesize) - 1;
-  char *p1, *p2;
+  char *p1, *p2, *prev_heap_area;
   unsigned long ul;
   heap_info *h;
 
@@ -545,12 +545,13 @@
      mapping (on Linux, this is the case for all non-writable mappings
      anyway). */
   p2 = MAP_FAILED;
-  if (aligned_heap_area)
+  prev_heap_area = atomic_load(aligned_heap_area);
+  if (prev_heap_area)
     {
-      p2 = (char *) MMAP (aligned_heap_area, HEAP_MAX_SIZE, PROT_NONE,
+      p2 = (char *) MMAP (prev_heap_area, HEAP_MAX_SIZE, PROT_NONE,
                           MAP_NORESERVE);
-      aligned_heap_area = NULL;
-      if (p2 != MAP_FAILED && ((unsigned long) p2 & (HEAP_MAX_SIZE - 1)))
+	  atomic_store(prev_heap_area, NULL);
+		if (p2 != MAP_FAILED && !mvee_all_heaps_aligned(p2))
         {
           __munmap (p2, HEAP_MAX_SIZE);
           p2 = MAP_FAILED;
@@ -566,9 +567,8 @@
           ul = p2 - p1;
           if (ul)
             __munmap (p1, ul);
-          else
-            aligned_heap_area = p2 + HEAP_MAX_SIZE;
           __munmap (p2 + HEAP_MAX_SIZE, HEAP_MAX_SIZE - ul);
+		  atomic_store(aligned_heap_area, p2 + HEAP_MAX_SIZE);
         }
       else
         {
@@ -578,7 +578,7 @@
           if (p2 == MAP_FAILED)
             return 0;
 
-          if ((unsigned long) p2 & (HEAP_MAX_SIZE - 1))
+          if (!mvee_all_heaps_aligned(p2))
             {
               __munmap (p2, HEAP_MAX_SIZE);
               return 0;
@@ -661,8 +661,8 @@
 
 #define delete_heap(heap) \
   do {									      \
-      if ((char *) (heap) + HEAP_MAX_SIZE == aligned_heap_area)		      \
-        aligned_heap_area = NULL;					      \
+	if ((char *) (heap) + HEAP_MAX_SIZE == atomic_load(aligned_heap_area)) \
+	  atomic_store(aligned_heap_area, NULL);							\
       __munmap ((char *) (heap), HEAP_MAX_SIZE);			      \
     } while (0)
 
@@ -786,23 +786,17 @@
 static mstate
 get_free_list (void)
 {
+  (void) mutex_lock(&list_lock);
   mstate result = free_list;
   if (result != NULL)
-    {
-      (void) mutex_lock (&list_lock);
-      result = free_list;
-      if (result != NULL)
-        free_list = result->next_free;
-      (void) mutex_unlock (&list_lock);
-
-      if (result != NULL)
-        {
-          LIBC_PROBE (memory_arena_reuse_free_list, 1, result);
-          (void) mutex_lock (&result->mutex);
-          tsd_setspecific (arena_key, (void *) result);
-          THREAD_STAT (++(result->stat_lock_loop));
-        }
-    }
+  {
+	free_list = result->next_free;
+	LIBC_PROBE (memory_arena_reuse_free_list, 1, result);
+	(void) mutex_lock (&result->mutex);
+	tsd_setspecific (arena_key, (void *) result);
+	THREAD_STAT (++(result->stat_lock_loop));
+  }
+  (void) mutex_unlock(&list_lock);
 
   return result;
 }
@@ -858,24 +852,24 @@
   if (a == NULL)
     {
       /* Nothing immediately available, so generate a new arena.  */
-      if (narenas_limit == 0)
+      if (atomic_load(narenas_limit) == 0)
         {
           if (mp_.arena_max != 0)
-            narenas_limit = mp_.arena_max;
-          else if (narenas > mp_.arena_test)
+			atomic_store(narenas_limit, mp_.arena_max);
+          else if (atomic_load(narenas) > mp_.arena_test)
             {
               int n = __get_nprocs ();
 
               if (n >= 1)
-                narenas_limit = NARENAS_FROM_NCORES (n);
+                atomic_store(narenas_limit, NARENAS_FROM_NCORES (n));
               else
                 /* We have no information about the system.  Assume two
                    cores.  */
-                narenas_limit = NARENAS_FROM_NCORES (2);
+                atomic_store(narenas_limit, NARENAS_FROM_NCORES (2));
             }
         }
     repeat:;
-      size_t n = narenas;
+      size_t n = atomic_load(narenas);
       /* NB: the following depends on the fact that (size_t)0 - 1 is a
          very large number and that the underflow is OK.  If arena_max
          is set the value of arena_test is irrelevant.  If arena_test
@@ -883,7 +877,7 @@
          narenas_limit is 0.  There is no possibility for narenas to
          be too big for the test to always fail since there is not
          enough address space to create that many arenas.  */
-      if (__builtin_expect (n <= narenas_limit - 1, 0))
+      if (__builtin_expect (n <= atomic_load(narenas_limit) - 1, 0))
         {
           if (catomic_compare_and_exchange_bool_acq (&narenas, n + 1, n))
             goto repeat;
diff -r -N --unified glibc-2.19.orig/malloc/malloc.c glibc-2.19-swoc/malloc/malloc.c
--- glibc-2.19.orig/malloc/malloc.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/malloc/malloc.c	2015-07-01 17:21:41.776972071 +0200
@@ -1705,6 +1705,9 @@
 
 struct malloc_par
 {
+  /* MVEE patch */
+  mutex_t mutex;
+
   /* Tunable parameters */
   unsigned long trim_threshold;
   INTERNAL_SIZE_T top_pad;
@@ -1748,6 +1751,7 @@
 
 static struct malloc_par mp_ =
 {
+  .mutex = MUTEX_INITIALIZER,
   .top_pad = DEFAULT_TOP_PAD,
   .n_mmaps_max = DEFAULT_MMAP_MAX,
   .mmap_threshold = DEFAULT_MMAP_THRESHOLD,
@@ -2276,9 +2280,11 @@
      rather than expanding top.
    */
 
+  (void) mutex_lock(&mp_.mutex);
   if ((unsigned long) (nb) >= (unsigned long) (mp_.mmap_threshold) &&
       (mp_.n_mmaps < mp_.n_mmaps_max))
     {
+	  (void) mutex_unlock(&mp_.mutex);
       char *mm;           /* return value from mmap call*/
 
     try_mmap:
@@ -2349,6 +2355,8 @@
             }
         }
     }
+  else
+	(void) mutex_unlock(&mp_.mutex);
 
   /* Record incoming configuration of top */
 
@@ -2925,6 +2933,7 @@
 
   if (chunk_is_mmapped (p))                       /* release mmapped memory. */
     {
+	  (void) mutex_lock(&mp_.mutex);
       /* see if the dynamic brk/mmap threshold needs adjusting */
       if (!mp_.no_dyn_threshold
           && p->size > mp_.mmap_threshold
@@ -2935,6 +2944,7 @@
           LIBC_PROBE (memory_mallopt_free_dyn_thresholds, 2,
                       mp_.mmap_threshold, mp_.trim_threshold);
         }
+	  (void) mutex_unlock(&mp_.mutex);
       munmap_chunk (p);
       return;
     }
@@ -3890,6 +3900,9 @@
 
     free_perturb (chunk2mem(p), size - 2 * SIZE_SZ);
 
+	if (!have_lock)
+	  (void) mutex_lock(&av->mutex);
+
     set_fastchunks(av);
     unsigned int idx = fastbin_index(size);
     fb = &fastbin (av, idx);
@@ -3897,8 +3910,6 @@
     /* Atomically link P to its fastbin: P->FD = *FB; *FB = P;  */
     mchunkptr old = *fb, old2;
     unsigned int old_idx = ~0u;
-    do
-      {
 	/* Check that the top of the bin is not the record we are going to add
 	   (i.e., double free).  */
 	if (__builtin_expect (old == p, 0))
@@ -3913,8 +3924,10 @@
 	if (have_lock && old != NULL)
 	  old_idx = fastbin_index(chunksize(old));
 	p->fd = old2 = old;
-      }
-    while ((old = catomic_compare_and_exchange_val_rel (fb, p, old2)) != old2);
+	*fb = p;
+
+	if (!have_lock)
+	  (void) mutex_unlock(&av->mutex);
 
     if (have_lock && old != NULL && __builtin_expect (old_idx != idx, 0))
       {
@@ -4055,9 +4068,15 @@
 
       if (av == &main_arena) {
 #ifndef MORECORE_CANNOT_TRIM
+		(void) mutex_lock(&mp_.mutex);
 	if ((unsigned long)(chunksize(av->top)) >=
 	    (unsigned long)(mp_.trim_threshold))
+	{
+		(void) mutex_unlock(&mp_.mutex);
 	  systrim(mp_.top_pad, av);
+	}
+	else
+		(void) mutex_unlock(&mp_.mutex);
 #endif
       } else {
 	/* Always try heap_trim(), even if the top chunk is not
@@ -4532,13 +4551,16 @@
     ptmalloc_init ();
 
   mstate ar_ptr = &main_arena;
+  mstate tmp;
+
   do
     {
       (void) mutex_lock (&ar_ptr->mutex);
       result |= mtrim (ar_ptr, s);
+	  tmp = ar_ptr->next;
       (void) mutex_unlock (&ar_ptr->mutex);
 
-      ar_ptr = ar_ptr->next;
+	  ar_ptr = tmp;
     }
   while (ar_ptr != &main_arena);
 
@@ -4639,9 +4661,11 @@
   m->fsmblks += fastavail;
   if (av == &main_arena)
     {
+	  (void) mutex_lock(&mp_.mutex);
       m->hblks = mp_.n_mmaps;
       m->hblkhd = mp_.mmapped_mem;
       m->usmblks = mp_.max_total_mem;
+	  (void) mutex_unlock(&mp_.mutex);
       m->keepcost = chunksize (av->top);
     }
 }
@@ -4680,7 +4704,10 @@
 {
   int i;
   mstate ar_ptr;
+  mstate tmp;
+  (void) mutex_lock(&mp_.mutex);
   unsigned int in_use_b = mp_.mmapped_mem, system_b = in_use_b;
+  (void) mutex_unlock(&mp_.mutex);
 #if THREAD_STATS
   long stat_lock_direct = 0, stat_lock_loop = 0, stat_lock_wait = 0;
 #endif
@@ -4711,17 +4738,20 @@
       stat_lock_loop += ar_ptr->stat_lock_loop;
       stat_lock_wait += ar_ptr->stat_lock_wait;
 #endif
+	  tmp = ar_ptr->next;
       (void) mutex_unlock (&ar_ptr->mutex);
-      ar_ptr = ar_ptr->next;
+      ar_ptr = tmp;
       if (ar_ptr == &main_arena)
         break;
     }
   fprintf (stderr, "Total (incl. mmap):\n");
   fprintf (stderr, "system bytes     = %10u\n", system_b);
   fprintf (stderr, "in use bytes     = %10u\n", in_use_b);
+  (void) mutex_lock(&mp_.mutex);
   fprintf (stderr, "max mmap regions = %10u\n", (unsigned int) mp_.max_n_mmaps);
   fprintf (stderr, "max mmap bytes   = %10lu\n",
            (unsigned long) mp_.max_mmapped_mem);
+  (void) mutex_unlock(&mp_.mutex);
 #if THREAD_STATS
   fprintf (stderr, "heaps created    = %10d\n", stat_n_heaps);
   fprintf (stderr, "locked directly  = %10ld\n", stat_lock_direct);
@@ -4766,10 +4796,12 @@
       break;
 
     case M_TRIM_THRESHOLD:
+	  (void) mutex_lock(&mp_.mutex);
       LIBC_PROBE (memory_mallopt_trim_threshold, 3, value,
                   mp_.trim_threshold, mp_.no_dyn_threshold);
       mp_.trim_threshold = value;
       mp_.no_dyn_threshold = 1;
+	  (void) mutex_unlock(&mp_.mutex);
       break;
 
     case M_TOP_PAD:
@@ -4785,18 +4817,22 @@
         res = 0;
       else
         {
+		  (void) mutex_lock(&mp_.mutex);
           LIBC_PROBE (memory_mallopt_mmap_threshold, 3, value,
                       mp_.mmap_threshold, mp_.no_dyn_threshold);
           mp_.mmap_threshold = value;
           mp_.no_dyn_threshold = 1;
+		  (void) mutex_unlock(&mp_.mutex);
         }
       break;
 
     case M_MMAP_MAX:
+	  (void) mutex_lock(&mp_.mutex);
       LIBC_PROBE (memory_mallopt_mmap_max, 3, value,
                   mp_.n_mmaps_max, mp_.no_dyn_threshold);
       mp_.n_mmaps_max = value;
       mp_.no_dyn_threshold = 1;
+	  (void) mutex_unlock(&mp_.mutex);
       break;
 
     case M_CHECK_ACTION:
diff -r -N --unified glibc-2.19.orig/nis/nss_nisplus/nisplus-alias.c glibc-2.19-swoc/nis/nss_nisplus/nisplus-alias.c
--- glibc-2.19.orig/nis/nss_nisplus/nisplus-alias.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nis/nss_nisplus/nisplus-alias.c	2015-06-05 15:42:14.194422508 +0200
@@ -43,7 +43,7 @@
 static enum nss_status
 _nss_create_tablename (int *errnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       const char *local_dir = nis_local_directory ();
       size_t local_dir_len = strlen (local_dir);
@@ -62,7 +62,7 @@
 
       atomic_write_barrier ();
 
-      tablename_val = p;
+      atomic_store(tablename_val, p);
     }
 
   return NSS_STATUS_SUCCESS;
@@ -176,7 +176,7 @@
     return NSS_STATUS_UNAVAIL;
 
   next_entry = 0;
-  result = nis_list (tablename_val, FOLLOW_PATH | FOLLOW_LINKS, NULL, NULL);
+  result = nis_list (atomic_load(tablename_val), FOLLOW_PATH | FOLLOW_LINKS, NULL, NULL);
   if (result == NULL)
     {
       status = NSS_STATUS_TRYAGAIN;
@@ -279,7 +279,7 @@
 {
   int parse_res;
 
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       __libc_lock_lock (lock);
 
diff -r -N --unified glibc-2.19.orig/nis/nss_nisplus/nisplus-ethers.c glibc-2.19-swoc/nis/nss_nisplus/nisplus-ethers.c
--- glibc-2.19.orig/nis/nss_nisplus/nisplus-ethers.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nis/nss_nisplus/nisplus-ethers.c	2015-06-05 15:42:14.194422508 +0200
@@ -88,7 +88,7 @@
 static enum nss_status
 _nss_create_tablename (int *errnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       const char *local_dir = nis_local_directory ();
       size_t local_dir_len = strlen (local_dir);
@@ -107,7 +107,7 @@
 
       atomic_write_barrier ();
 
-      tablename_val = p;
+      atomic_store(tablename_val, p);
     }
   return NSS_STATUS_SUCCESS;
 }
@@ -157,7 +157,7 @@
 internal_nisplus_getetherent_r (struct etherent *ether, char *buffer,
 				size_t buflen, int *errnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       enum nss_status status = _nss_create_tablename (errnop);
 
@@ -236,7 +236,7 @@
 _nss_nisplus_gethostton_r (const char *name, struct etherent *eth,
 			   char *buffer, size_t buflen, int *errnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       enum nss_status status = _nss_create_tablename (errnop);
 
@@ -294,7 +294,7 @@
 _nss_nisplus_getntohost_r (const struct ether_addr *addr, struct etherent *eth,
 			   char *buffer, size_t buflen, int *errnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       __libc_lock_lock (lock);
 
diff -r -N --unified glibc-2.19.orig/nis/nss_nisplus/nisplus-grp.c glibc-2.19-swoc/nis/nss_nisplus/nisplus-grp.c
--- glibc-2.19.orig/nis/nss_nisplus/nisplus-grp.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nis/nss_nisplus/nisplus-grp.c	2015-06-05 15:42:14.194422508 +0200
@@ -50,7 +50,7 @@
 enum nss_status
 _nss_grp_create_tablename (int *errnop)
 {
-  if (grp_tablename_val == NULL)
+  if (atomic_load(grp_tablename_val) == NULL)
     {
       const char *local_dir = nis_local_directory ();
       size_t local_dir_len = strlen (local_dir);
@@ -106,7 +106,7 @@
 {
   enum nss_status status = NSS_STATUS_SUCCESS;
 
-  if (grp_tablename_val == NULL)
+  if (atomic_load(grp_tablename_val) == NULL)
     status = _nss_grp_create_tablename (errnop);
 
   if (status == NSS_STATUS_SUCCESS)
@@ -288,7 +288,7 @@
 {
   int parse_res;
 
-  if (grp_tablename_val == NULL)
+  if (atomic_load(grp_tablename_val) == NULL)
     {
       enum nss_status status = _nss_grp_create_tablename (errnop);
 
@@ -347,7 +347,7 @@
 _nss_nisplus_getgrgid_r (const gid_t gid, struct group *gr,
 			 char *buffer, size_t buflen, int *errnop)
 {
-  if (grp_tablename_val == NULL)
+  if (atomic_load(grp_tablename_val) == NULL)
     {
       enum nss_status status = _nss_grp_create_tablename (errnop);
 
diff -r -N --unified glibc-2.19.orig/nis/nss_nisplus/nisplus-hosts.c glibc-2.19-swoc/nis/nss_nisplus/nisplus-hosts.c
--- glibc-2.19.orig/nis/nss_nisplus/nisplus-hosts.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nis/nss_nisplus/nisplus-hosts.c	2015-06-05 15:42:14.198422508 +0200
@@ -191,7 +191,7 @@
 static enum nss_status
 _nss_create_tablename (int *errnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       const char *local_dir = nis_local_directory ();
       size_t local_dir_len = strlen (local_dir);
@@ -210,7 +210,7 @@
 
       atomic_write_barrier ();
 
-      tablename_val = p;
+      atomic_store(tablename_val, p);
     }
 
   return NSS_STATUS_SUCCESS;
@@ -231,7 +231,7 @@
       result = NULL;
     }
 
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     status = _nss_create_tablename (&err);
 
   __libc_lock_unlock (lock);
@@ -271,7 +271,7 @@
       if (result == NULL)
 	{
 	  saved_res = NULL;
-	  if (tablename_val == NULL)
+	  if (atomic_load(tablename_val) == NULL)
 	    {
 	      enum nss_status status = _nss_create_tablename (errnop);
 
@@ -300,7 +300,7 @@
       else
 	{
 	  saved_res = result;
-	  result = nis_next_entry (tablename_val, &result->cookie);
+	  result = nis_next_entry (atomic_load(tablename_val), &result->cookie);
 	  if (result == NULL)
 	    {
 	      *errnop = errno;
@@ -383,7 +383,7 @@
 			   char *buffer, size_t buflen, int *errnop,
 			   int *herrnop, int flags)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       enum nss_status status = get_tablename (herrnop);
       if (status != NSS_STATUS_SUCCESS)
@@ -518,7 +518,7 @@
 			      struct hostent *host, char *buffer,
 			      size_t buflen, int *errnop, int *herrnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       enum nss_status status = get_tablename (herrnop);
       if (status != NSS_STATUS_SUCCESS)
diff -r -N --unified glibc-2.19.orig/nis/nss_nisplus/nisplus-network.c glibc-2.19-swoc/nis/nss_nisplus/nisplus-network.c
--- glibc-2.19.orig/nis/nss_nisplus/nisplus-network.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nis/nss_nisplus/nisplus-network.c	2015-06-05 15:42:14.198422508 +0200
@@ -142,7 +142,7 @@
 static enum nss_status
 _nss_create_tablename (int *errnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       const char *local_dir = nis_local_directory ();
       size_t local_dir_len = strlen (local_dir);
@@ -161,7 +161,7 @@
 
       atomic_write_barrier ();
 
-      tablename_val = p;
+      atomic_store(tablename_val, p);
     }
 
   return NSS_STATUS_SUCCESS;
@@ -180,7 +180,7 @@
       result = NULL;
     }
 
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       int err;
       status = _nss_create_tablename (&err);
@@ -222,7 +222,7 @@
 	{
 	  saved_res = NULL;
 
-	  if (tablename_val == NULL)
+	  if (atomic_load(tablename_val) == NULL)
 	    {
 	      enum nss_status status = _nss_create_tablename (errnop);
 
@@ -254,7 +254,7 @@
       else
 	{
 	  saved_res = result;
-	  result = nis_next_entry (tablename_val, &result->cookie);
+	  result = nis_next_entry (atomic_load(tablename_val), &result->cookie);
 	  if (result == NULL)
 	    {
 	      *errnop = errno;
@@ -311,7 +311,7 @@
 {
   int parse_res, retval;
 
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       __libc_lock_lock (lock);
 
@@ -414,7 +414,7 @@
 			     struct netent *network, char *buffer,
 			     size_t buflen, int *errnop, int *herrnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       __libc_lock_lock (lock);
 
diff -r -N --unified glibc-2.19.orig/nis/nss_nisplus/nisplus-proto.c glibc-2.19-swoc/nis/nss_nisplus/nisplus-proto.c
--- glibc-2.19.orig/nis/nss_nisplus/nisplus-proto.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nis/nss_nisplus/nisplus-proto.c	2015-06-05 15:42:14.198422508 +0200
@@ -137,7 +137,7 @@
 static enum nss_status
 _nss_create_tablename (int *errnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       const char *local_dir = nis_local_directory ();
       size_t local_dir_len = strlen (local_dir);
@@ -156,7 +156,7 @@
 
       atomic_write_barrier ();
 
-      tablename_val = p;
+      atomic_store(tablename_val, p);
     }
 
   return NSS_STATUS_SUCCESS;
@@ -175,7 +175,7 @@
       result = NULL;
     }
 
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       int err;
       status = _nss_create_tablename (&err);
@@ -216,7 +216,7 @@
       if (result == NULL)
 	{
 	  saved_res = NULL;
-	  if (tablename_val == NULL)
+	  if (atomic_load(tablename_val) == NULL)
 	    {
 	      enum nss_status status = _nss_create_tablename (errnop);
 
@@ -236,7 +236,7 @@
       else
 	{
 	  saved_res = result;
-	  result = nis_next_entry (tablename_val, &result->cookie);
+	  result = nis_next_entry (atomic_load(tablename_val), &result->cookie);
 	  if (result == NULL)
 	    {
 	      *errnop = errno;
@@ -290,7 +290,7 @@
 {
   int parse_res;
 
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       __libc_lock_lock (lock);
 
@@ -383,7 +383,7 @@
 _nss_nisplus_getprotobynumber_r (const int number, struct protoent *proto,
 				 char *buffer, size_t buflen, int *errnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       __libc_lock_lock (lock);
 
diff -r -N --unified glibc-2.19.orig/nis/nss_nisplus/nisplus-pwd.c glibc-2.19-swoc/nis/nss_nisplus/nisplus-pwd.c
--- glibc-2.19.orig/nis/nss_nisplus/nisplus-pwd.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nis/nss_nisplus/nisplus-pwd.c	2015-06-05 15:42:14.198422508 +0200
@@ -49,7 +49,7 @@
 enum nss_status
 _nss_pwd_create_tablename (int *errnop)
 {
-  if (pwd_tablename_val == NULL)
+  if (atomic_load(pwd_tablename_val) == NULL)
     {
       const char *local_dir = nis_local_directory ();
       size_t local_dir_len = strlen (local_dir);
@@ -105,7 +105,7 @@
 {
   enum nss_status status = NSS_STATUS_SUCCESS;
 
-  if (pwd_tablename_val == NULL)
+  if (atomic_load(pwd_tablename_val) == NULL)
     status = _nss_pwd_create_tablename (errnop);
 
   if (status == NSS_STATUS_SUCCESS)
@@ -289,7 +289,7 @@
 {
   int parse_res;
 
-  if (pwd_tablename_val == NULL)
+  if (atomic_load(pwd_tablename_val) == NULL)
     {
       enum nss_status status = _nss_pwd_create_tablename (errnop);
 
@@ -352,7 +352,7 @@
 _nss_nisplus_getpwuid_r (const uid_t uid, struct passwd *pw,
 			 char *buffer, size_t buflen, int *errnop)
 {
-  if (pwd_tablename_val == NULL)
+  if (atomic_load(pwd_tablename_val) == NULL)
     {
       enum nss_status status = _nss_pwd_create_tablename (errnop);
 
diff -r -N --unified glibc-2.19.orig/nis/nss_nisplus/nisplus-rpc.c glibc-2.19-swoc/nis/nss_nisplus/nisplus-rpc.c
--- glibc-2.19.orig/nis/nss_nisplus/nisplus-rpc.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nis/nss_nisplus/nisplus-rpc.c	2015-06-05 15:42:14.198422508 +0200
@@ -138,7 +138,7 @@
 static enum nss_status
 _nss_create_tablename (int *errnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       const char *local_dir = nis_local_directory ();
       size_t local_dir_len = strlen (local_dir);
@@ -157,7 +157,7 @@
 
       atomic_write_barrier ();
 
-      tablename_val = p;
+      atomic_store(tablename_val, p);
     }
 
   return NSS_STATUS_SUCCESS;
@@ -177,7 +177,7 @@
       result = NULL;
     }
 
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       int err;
       status = _nss_create_tablename (&err);
@@ -218,7 +218,7 @@
       if (result == NULL)
 	{
 	  saved_res = NULL;
-          if (tablename_val == NULL)
+          if (atomic_load(tablename_val) == NULL)
 	    {
 	      enum nss_status status =  _nss_create_tablename (errnop);
 
@@ -238,7 +238,7 @@
       else
 	{
 	  saved_res = result;
-	  result = nis_next_entry (tablename_val, &result->cookie);
+	  result = nis_next_entry (atomic_load(tablename_val), &result->cookie);
 	  if (result == NULL)
 	    {
 	      *errnop = errno;
@@ -292,7 +292,7 @@
 {
   int parse_res;
 
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       __libc_lock_lock (lock);
 
@@ -385,7 +385,7 @@
 _nss_nisplus_getrpcbynumber_r (const int number, struct rpcent *rpc,
 			       char *buffer, size_t buflen, int *errnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       __libc_lock_lock (lock);
 
diff -r -N --unified glibc-2.19.orig/nis/nss_nisplus/nisplus-service.c glibc-2.19-swoc/nis/nss_nisplus/nisplus-service.c
--- glibc-2.19.orig/nis/nss_nisplus/nisplus-service.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nis/nss_nisplus/nisplus-service.c	2015-06-05 15:42:14.198422508 +0200
@@ -145,7 +145,7 @@
 static enum nss_status
 _nss_create_tablename (int *errnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       const char *local_dir = nis_local_directory ();
       size_t local_dir_len = strlen (local_dir);
@@ -164,7 +164,7 @@
 
       atomic_write_barrier ();
 
-      tablename_val = p;
+      atomic_store(tablename_val, p);
     }
 
   return NSS_STATUS_SUCCESS;
@@ -185,7 +185,7 @@
       result = NULL;
     }
 
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     status = _nss_create_tablename (&err);
 
   __libc_lock_unlock (lock);
@@ -223,7 +223,7 @@
       if (result == NULL)
 	{
 	  saved_res = NULL;
-          if (tablename_val == NULL)
+          if (atomic_load(tablename_val) == NULL)
 	    {
 	      enum nss_status status = _nss_create_tablename (errnop);
 
@@ -243,7 +243,7 @@
       else
 	{
 	  saved_res = result;
-	  result = nis_next_entry (tablename_val, &result->cookie);
+	  result = nis_next_entry (atomic_load(tablename_val), &result->cookie);
 	  if (result == NULL)
 	    {
 	      *errnop = errno;
@@ -294,7 +294,7 @@
 			      struct servent *serv,
 			      char *buffer, size_t buflen, int *errnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       __libc_lock_lock (lock);
 
@@ -396,7 +396,7 @@
 			      struct servent *serv,
 			      char *buffer, size_t buflen, int *errnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       __libc_lock_lock (lock);
 
diff -r -N --unified glibc-2.19.orig/nptl/allocatestack.c glibc-2.19-swoc/nptl/allocatestack.c
--- glibc-2.19.orig/nptl/allocatestack.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/allocatestack.c	2015-06-05 15:42:14.198422508 +0200
@@ -130,13 +130,13 @@
 
 
 /* Check whether the stack is still used or not.  */
-#define FREE_P(descr) ((descr)->tid <= 0)
+#define FREE_P(descr) (atomic_load((descr)->tid) <= 0)
 
 
 static void
 stack_list_del (list_t *elem)
 {
-  in_flight_stack = (uintptr_t) elem;
+  atomic_store(in_flight_stack, (uintptr_t) elem);
 
   atomic_write_barrier ();
 
@@ -144,14 +144,14 @@
 
   atomic_write_barrier ();
 
-  in_flight_stack = 0;
+  atomic_store(in_flight_stack, 0);
 }
 
 
 static void
 stack_list_add (list_t *elem, list_t *list)
 {
-  in_flight_stack = (uintptr_t) elem | 1;
+  atomic_store(in_flight_stack, (uintptr_t) elem | 1);
 
   atomic_write_barrier ();
 
@@ -159,7 +159,7 @@
 
   atomic_write_barrier ();
 
-  in_flight_stack = 0;
+  atomic_store(in_flight_stack, 0);
 }
 
 
@@ -215,7 +215,7 @@
     }
 
   /* Don't allow setxid until cloned.  */
-  result->setxid_futex = -1;
+  atomic_store(result->setxid_futex, -1);
 
   /* Dequeue the entry.  */
   stack_list_del (&result->list);
@@ -234,7 +234,7 @@
   *memp = result->stackblock;
 
   /* Cancellation handling is back to the default.  */
-  result->cancelhandling = 0;
+  atomic_store(result->cancelhandling, 0);
   result->cleanup = NULL;
 
   /* No pending event.  */
@@ -437,7 +437,7 @@
       pd->pid = THREAD_GETMEM (THREAD_SELF, pid);
 
       /* Don't allow setxid until cloned.  */
-      pd->setxid_futex = -1;
+      atomic_store(pd->setxid_futex, -1);
 
       /* Allocate the DTV for this thread.  */
       if (_dl_allocate_tls (TLS_TPADJ (pd)) == NULL)
@@ -571,7 +571,7 @@
 #endif
 
 	  /* Don't allow setxid until cloned.  */
-	  pd->setxid_futex = -1;
+	  atomic_store(pd->setxid_futex, -1);
 
 	  /* The process ID is also the same as that of the caller.  */
 	  pd->pid = THREAD_GETMEM (THREAD_SELF, pid);
@@ -823,10 +823,10 @@
      we have to be aware that we might have interrupted a list
      operation.  */
 
-  if (in_flight_stack != 0)
+  if (atomic_load(in_flight_stack) != 0)
     {
-      bool add_p = in_flight_stack & 1;
-      list_t *elem = (list_t *) (in_flight_stack & ~(uintptr_t) 1);
+      bool add_p = atomic_load(in_flight_stack) & 1;
+      list_t *elem = (list_t *) (atomic_load(in_flight_stack) & ~(uintptr_t) 1);
 
       if (add_p)
 	{
@@ -834,13 +834,13 @@
 	     case we only need to check the beginning of these lists.  */
 	  int check_list (list_t *l)
 	  {
-	    if (l->next->prev != l)
+	    if (atomic_load(l->next->prev) != l)
 	      {
-		assert (l->next->prev == elem);
+		assert (atomic_load(l->next->prev) == elem);
 
-		elem->next = l->next;
-		elem->prev = l;
-		l->next = elem;
+		atomic_store(elem->next, l->next);
+		atomic_store(elem->prev, l);
+		atomic_store(l->next, elem);
 
 		return 1;
 	      }
@@ -854,8 +854,8 @@
       else
 	{
 	  /* We can simply always replay the delete operation.  */
-	  elem->next->prev = elem->prev;
-	  elem->prev->next = elem->next;
+	  atomic_store(elem->next->prev, elem->prev);
+	  atomic_store(elem->prev->next, elem->next);
 	}
     }
 
@@ -867,7 +867,7 @@
       if (curp != self)
 	{
 	  /* This marks the stack as free.  */
-	  curp->tid = 0;
+	  atomic_store(curp->tid, 0);
 
 	  /* The PID field must be initialized for the new process.  */
 	  curp->pid = self->pid;
@@ -924,7 +924,7 @@
   /* There is one thread running.  */
   __nptl_nthreads = 1;
 
-  in_flight_stack = 0;
+  atomic_store(in_flight_stack, 0);
 
   /* Initialize locks.  */
   stack_cache_lock = LLL_LOCK_INITIALIZER;
@@ -951,7 +951,7 @@
 
       curp = list_entry (runp, struct pthread, list);
 
-      if (curp->tid == tid)
+      if (atomic_load(curp->tid) == tid)
 	{
 	  result = curp;
 	  goto out;
@@ -965,7 +965,7 @@
 
       curp = list_entry (runp, struct pthread, list);
 
-      if (curp->tid == tid)
+      if (atomic_load(curp->tid) == tid)
 	{
 	  result = curp;
 	  goto out;
@@ -987,18 +987,18 @@
   int ch;
 
   /* Wait until this thread is cloned.  */
-  if (t->setxid_futex == -1
+  if (atomic_load(t->setxid_futex) == -1
       && ! atomic_compare_and_exchange_bool_acq (&t->setxid_futex, -2, -1))
     do
       lll_futex_wait (&t->setxid_futex, -2, LLL_PRIVATE);
-    while (t->setxid_futex == -2);
+    while (atomic_load(t->setxid_futex) == -2);
 
   /* Don't let the thread exit before the setxid handler runs.  */
-  t->setxid_futex = 0;
+  atomic_store(t->setxid_futex, 0);
 
   do
     {
-      ch = t->cancelhandling;
+      ch = atomic_load(t->cancelhandling);
 
       /* If the thread is exiting right now, ignore it.  */
       if ((ch & EXITING_BITMASK) != 0)
@@ -1007,7 +1007,7 @@
 	     progress.  */
 	  if ((ch & SETXID_BITMASK) == 0)
 	    {
-	      t->setxid_futex = 1;
+	      atomic_store(t->setxid_futex, 1);
 	      lll_futex_wake (&t->setxid_futex, 1, LLL_PRIVATE);
 	    }
 	  return;
@@ -1026,7 +1026,7 @@
 
   do
     {
-      ch = t->cancelhandling;
+      ch = atomic_load(t->cancelhandling);
       if ((ch & SETXID_BITMASK) == 0)
 	return;
     }
@@ -1034,7 +1034,7 @@
 					       ch & ~SETXID_BITMASK, ch));
 
   /* Release the futex just in case.  */
-  t->setxid_futex = 1;
+  atomic_store(t->setxid_futex, 1);
   lll_futex_wake (&t->setxid_futex, 1, LLL_PRIVATE);
 }
 
@@ -1043,13 +1043,13 @@
 internal_function
 setxid_signal_thread (struct xid_command *cmdp, struct pthread *t)
 {
-  if ((t->cancelhandling & SETXID_BITMASK) == 0)
+  if ((atomic_load(t->cancelhandling) & SETXID_BITMASK) == 0)
     return 0;
 
   int val;
   INTERNAL_SYSCALL_DECL (err);
   val = INTERNAL_SYSCALL (tgkill, err, 3, THREAD_GETMEM (THREAD_SELF, pid),
-			  t->tid, SIGSETXID);
+			  atomic_load(t->tid), SIGSETXID);
 
   /* If this failed, it must have had not started yet or else exited.  */
   if (!INTERNAL_SYSCALL_ERROR_P (val, err))
diff -r -N --unified glibc-2.19.orig/nptl/descr.h glibc-2.19-swoc/nptl/descr.h
--- glibc-2.19.orig/nptl/descr.h	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/descr.h	2015-06-05 15:42:14.198422508 +0200
@@ -342,7 +342,7 @@
      in normal operation.  */
   struct pthread *joinid;
   /* Check whether a thread is detached.  */
-#define IS_DETACHED(pd) ((pd)->joinid == (pd))
+#define IS_DETACHED(pd) (atomic_load((pd)->joinid) == (pd))
 
   /* The result of the thread function.  */
   void *result;
diff -r -N --unified glibc-2.19.orig/nptl/nptl-init.c glibc-2.19-swoc/nptl/nptl-init.c
--- glibc-2.19.orig/nptl/nptl-init.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/nptl-init.c	2015-06-05 15:42:14.198422508 +0200
@@ -44,7 +44,7 @@
 #ifndef __ASSUME_SET_ROBUST_LIST
 /* Negative if we do not have the system call and we can use it.  */
 int __set_robust_list_avail;
-# define set_robust_list_not_avail() \
+# define set_robust_list_not_avail()		\
   __set_robust_list_avail = -1
 #else
 # define set_robust_list_not_avail() do { } while (0)
@@ -260,7 +260,7 @@
   while (flags != newval);
 
   /* And release the futex.  */
-  self->setxid_futex = 1;
+  atomic_store(self->setxid_futex, 1);
   lll_futex_wake (&self->setxid_futex, 1, LLL_PRIVATE);
 
   if (atomic_decrement_val (&__xidcmd->cntr) == 0)
diff -r -N --unified glibc-2.19.orig/nptl/pthread_barrier_wait.c glibc-2.19-swoc/nptl/pthread_barrier_wait.c
--- glibc-2.19.orig/nptl/pthread_barrier_wait.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/pthread_barrier_wait.c	2015-06-05 15:42:14.198422508 +0200
@@ -41,7 +41,10 @@
     {
       /* Yes. Increment the event counter to avoid invalid wake-ups and
 	 tell the current waiters that it is their turn.  */
-      ++ibarrier->curr_event;
+
+      // MVEE patch: with partial lock ordering, the original (non-atomic) 
+      // increment raced with the futex_wait loop below.
+      atomic_increment(&ibarrier->curr_event);
 
       /* Wake up everybody.  */
       lll_futex_wake (&ibarrier->curr_event, INT_MAX,
@@ -54,7 +57,9 @@
     {
       /* The number of the event we are waiting for.  The barrier's event
 	 number must be bumped before we continue.  */
-      unsigned int event = ibarrier->curr_event;
+
+      // MVEE patch: racy with partial lock ordering
+      unsigned int event = atomic_load(ibarrier->curr_event);
 
       /* Before suspending, make the barrier available to others.  */
       lll_unlock (ibarrier->lock, ibarrier->private ^ FUTEX_PRIVATE_FLAG);
@@ -63,11 +68,11 @@
       do
 	lll_futex_wait (&ibarrier->curr_event, event,
 			ibarrier->private ^ FUTEX_PRIVATE_FLAG);
-      while (event == ibarrier->curr_event);
+      while (event == atomic_load(ibarrier->curr_event));
     }
 
   /* Make sure the init_count is stored locally or in a register.  */
-  unsigned int init_count = ibarrier->init_count;
+  unsigned int init_count = atomic_load(ibarrier->init_count);
 
   /* If this was the last woken thread, unlock.  */
   if (atomic_increment_val (&ibarrier->left) == init_count)
diff -r -N --unified glibc-2.19.orig/nptl/pthread_cancel.c glibc-2.19-swoc/nptl/pthread_cancel.c
--- glibc-2.19.orig/nptl/pthread_cancel.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/pthread_cancel.c	2015-06-05 15:42:14.198422508 +0200
@@ -44,7 +44,7 @@
   do
     {
     again:
-      oldval = pd->cancelhandling;
+      oldval = atomic_load(pd->cancelhandling);
       newval = oldval | CANCELING_BITMASK | CANCELED_BITMASK;
 
       /* Avoid doing unnecessary work.  The atomic operation can
@@ -76,7 +76,7 @@
 	     is not guaranteed to be async-safe.  */
 	  int val;
 	  val = INTERNAL_SYSCALL (tgkill, err, 3,
-				  THREAD_GETMEM (THREAD_SELF, pid), pd->tid,
+				  THREAD_GETMEM (THREAD_SELF, pid), atomic_load(pd->tid),
 				  SIGCANCEL);
 
 	  if (INTERNAL_SYSCALL_ERROR_P (val, err))
diff -r -N --unified glibc-2.19.orig/nptl/pthread_cond_signal.c glibc-2.19-swoc/nptl/pthread_cond_signal.c
--- glibc-2.19.orig/nptl/pthread_cond_signal.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/pthread_cond_signal.c	2015-06-05 15:42:14.198422508 +0200
@@ -63,12 +63,18 @@
 	}
       else
 #endif
+
+	/* MVEE patch: since this syscall unlocks the cond_lock, we have to 
+	   wrap it in a (VERY long) critical section. It is actually faster
+	   to just wake... */
+#if 0
 	/* Wake one.  */
 	if (! __builtin_expect (lll_futex_wake_unlock (&cond->__data.__futex,
 						       1, 1,
 						       &cond->__data.__lock,
 						       pshared), 0))
 	  return 0;
+#endif
 
       /* Fallback if neither of them work.  */
       lll_futex_wake (&cond->__data.__futex, 1, pshared);
diff -r -N --unified glibc-2.19.orig/nptl/pthread_create.c glibc-2.19-swoc/nptl/pthread_create.c
--- glibc-2.19.orig/nptl/pthread_create.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/pthread_create.c	2015-06-05 15:42:14.198422508 +0200
@@ -265,7 +265,7 @@
   /* If the parent was running cancellation handlers while creating
      the thread the new thread inherited the signal mask.  Reset the
      cancellation signal mask.  */
-  if (__builtin_expect (pd->parent_cancelhandling & CANCELING_BITMASK, 0))
+  if (__builtin_expect (atomic_load(pd->parent_cancelhandling) & CANCELING_BITMASK, 0))
     {
       INTERNAL_SYSCALL_DECL (err);
       sigset_t mask;
@@ -349,7 +349,7 @@
 	      pd->eventbuf.eventdata = pd;
 
 	      do
-		pd->nextevent = __nptl_last_event;
+		pd->nextevent = atomic_load(__nptl_last_event);
 	      while (atomic_compare_and_exchange_bool_acq (&__nptl_last_event,
 							   pd, pd->nextevent));
 	    }
@@ -412,16 +412,16 @@
   if (IS_DETACHED (pd))
     /* Free the TCB.  */
     __free_tcb (pd);
-  else if (__builtin_expect (pd->cancelhandling & SETXID_BITMASK, 0))
+  else if (__builtin_expect (atomic_load(pd->cancelhandling) & SETXID_BITMASK, 0))
     {
       /* Some other thread might call any of the setXid functions and expect
 	 us to reply.  In this case wait until we did that.  */
       do
 	lll_futex_wait (&pd->setxid_futex, 0, LLL_PRIVATE);
-      while (pd->cancelhandling & SETXID_BITMASK);
+      while (atomic_load(pd->cancelhandling) & SETXID_BITMASK);
 
       /* Reset the value so that the stack can be reused.  */
-      pd->setxid_futex = 0;
+      atomic_store(pd->setxid_futex, 0);
     }
 
   /* We cannot call '_exit' here.  '_exit' will terminate the process.
diff -r -N --unified glibc-2.19.orig/nptl/pthread_detach.c glibc-2.19-swoc/nptl/pthread_detach.c
--- glibc-2.19.orig/nptl/pthread_detach.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/pthread_detach.c	2015-06-05 15:42:14.198422508 +0200
@@ -47,7 +47,7 @@
   else
     /* Check whether the thread terminated meanwhile.  In this case we
        will just free the TCB.  */
-    if ((pd->cancelhandling & EXITING_BITMASK) != 0)
+    if ((atomic_load(pd->cancelhandling) & EXITING_BITMASK) != 0)
       /* Note that the code in __free_tcb makes sure each thread
 	 control block is freed only once.  */
       __free_tcb (pd);
diff -r -N --unified glibc-2.19.orig/nptl/pthread_getattr_np.c glibc-2.19-swoc/nptl/pthread_getattr_np.c
--- glibc-2.19.orig/nptl/pthread_getattr_np.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/pthread_getattr_np.c	2015-06-05 15:42:14.198422508 +0200
@@ -66,7 +66,7 @@
     {
       /* No stack information available.  This must be for the initial
 	 thread.  Get the info in some magical way.  */
-      assert (abs (thread->pid) == thread->tid);
+      assert (abs (thread->pid) == atomic_load(thread->tid));
 
       /* Stack size limit.  */
       struct rlimit rl;
diff -r -N --unified glibc-2.19.orig/nptl/pthread_getcpuclockid.c glibc-2.19-swoc/nptl/pthread_getcpuclockid.c
--- glibc-2.19.orig/nptl/pthread_getcpuclockid.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/pthread_getcpuclockid.c	2015-06-05 15:42:14.198422508 +0200
@@ -42,11 +42,11 @@
 
      If some day more clock IDs are needed the ID part can be
      enlarged.  The IDs are entirely internal.  */
-  if (pd->tid >= 1 << (8 * sizeof (*clockid) - CLOCK_IDFIELD_SIZE))
+  if (atomic_load(pd->tid) >= 1 << (8 * sizeof (*clockid) - CLOCK_IDFIELD_SIZE))
     return ERANGE;
 
   /* Store the number.  */
-  *clockid = CLOCK_THREAD_CPUTIME_ID | (pd->tid << CLOCK_IDFIELD_SIZE);
+  *clockid = CLOCK_THREAD_CPUTIME_ID | (atomic_load(pd->tid) << CLOCK_IDFIELD_SIZE);
 
   return 0;
 #else
diff -r -N --unified glibc-2.19.orig/nptl/pthread_getschedparam.c glibc-2.19-swoc/nptl/pthread_getschedparam.c
--- glibc-2.19.orig/nptl/pthread_getschedparam.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/pthread_getschedparam.c	2015-06-05 15:42:14.198422508 +0200
@@ -46,7 +46,7 @@
      not yet been retrieved do it now.  */
   if ((pd->flags & ATTR_FLAG_SCHED_SET) == 0)
     {
-      if (__sched_getparam (pd->tid, &pd->schedparam) != 0)
+      if (__sched_getparam (atomic_load(pd->tid), &pd->schedparam) != 0)
 	result = 1;
       else
 	pd->flags |= ATTR_FLAG_SCHED_SET;
@@ -54,7 +54,7 @@
 
   if ((pd->flags & ATTR_FLAG_POLICY_SET) == 0)
     {
-      pd->schedpolicy = __sched_getscheduler (pd->tid);
+      pd->schedpolicy = __sched_getscheduler (atomic_load(pd->tid));
       if (pd->schedpolicy == -1)
 	result = 1;
       else
diff -r -N --unified glibc-2.19.orig/nptl/pthread_join.c glibc-2.19-swoc/nptl/pthread_join.c
--- glibc-2.19.orig/nptl/pthread_join.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/pthread_join.c	2015-06-05 15:42:14.198422508 +0200
@@ -67,11 +67,11 @@
   int oldtype = CANCEL_ASYNC ();
 
   if ((pd == self
-       || (self->joinid == pd
-	   && (pd->cancelhandling
+       || (atomic_load(self->joinid) == pd
+	   && (atomic_load(pd->cancelhandling)
 	       & (CANCELING_BITMASK | CANCELED_BITMASK | EXITING_BITMASK
 		  | TERMINATED_BITMASK)) == 0))
-      && !CANCEL_ENABLED_AND_CANCELED (self->cancelhandling))
+      && !CANCEL_ENABLED_AND_CANCELED (atomic_load(self->cancelhandling)))
     /* This is a deadlock situation.  The threads are waiting for each
        other to finish.  Note that this is a "may" error.  To be 100%
        sure we catch this error we would have to lock the data
@@ -102,7 +102,7 @@
   if (__builtin_expect (result == 0, 1))
     {
       /* We mark the thread as terminated and as joined.  */
-      pd->tid = -1;
+      atomic_store(pd->tid, -1);
 
       /* Store the return value if the caller is interested.  */
       if (thread_return != NULL)
diff -r -N --unified glibc-2.19.orig/nptl/pthread_key_create.c glibc-2.19-swoc/nptl/pthread_key_create.c
--- glibc-2.19.orig/nptl/pthread_key_create.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/pthread_key_create.c	2015-06-05 15:42:14.198422508 +0200
@@ -29,7 +29,7 @@
   /* Find a slot in __pthread_kyes which is unused.  */
   for (size_t cnt = 0; cnt < PTHREAD_KEYS_MAX; ++cnt)
     {
-      uintptr_t seq = __pthread_keys[cnt].seq;
+      uintptr_t seq = atomic_load(__pthread_keys[cnt].seq);
 
       if (KEY_UNUSED (seq) && KEY_USABLE (seq)
 	  /* We found an unused slot.  Try to allocate it.  */
diff -r -N --unified glibc-2.19.orig/nptl/pthread_key_delete.c glibc-2.19-swoc/nptl/pthread_key_delete.c
--- glibc-2.19.orig/nptl/pthread_key_delete.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/pthread_key_delete.c	2015-06-05 15:42:14.198422508 +0200
@@ -29,7 +29,7 @@
 
   if (__builtin_expect (key < PTHREAD_KEYS_MAX, 1))
     {
-      unsigned int seq = __pthread_keys[key].seq;
+      unsigned int seq = atomic_load(__pthread_keys[key].seq);
 
       if (__builtin_expect (! KEY_UNUSED (seq), 1)
 	  && ! atomic_compare_and_exchange_bool_acq (&__pthread_keys[key].seq,
diff -r -N --unified glibc-2.19.orig/nptl/pthread_mutex_lock.c glibc-2.19-swoc/nptl/pthread_mutex_lock.c
--- glibc-2.19.orig/nptl/pthread_mutex_lock.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/pthread_mutex_lock.c	2015-06-05 15:42:14.202422508 +0200
@@ -183,7 +183,7 @@
       THREAD_SETMEM (THREAD_SELF, robust_head.list_op_pending,
 		     &mutex->__data.__list.__next);
 
-      oldval = mutex->__data.__lock;
+      oldval = atomic_load(mutex->__data.__lock);
       do
 	{
 	again:
@@ -293,7 +293,7 @@
 			 (void *) (((uintptr_t) &mutex->__data.__list.__next)
 				   | 1));
 
-	oldval = mutex->__data.__lock;
+	oldval = atomic_load(mutex->__data.__lock);
 
 	/* Check whether we already hold the mutex.  */
 	if (__builtin_expect ((oldval & FUTEX_TID_MASK) == id, 0))
@@ -354,7 +354,7 @@
 		  pause_not_cancel ();
 	      }
 
-	    oldval = mutex->__data.__lock;
+	    oldval = atomic_load(mutex->__data.__lock);
 
 	    assert (robust || (oldval & FUTEX_OWNER_DIED) == 0);
 	  }
@@ -416,7 +416,7 @@
       {
 	int kind = mutex->__data.__kind & PTHREAD_MUTEX_KIND_MASK_NP;
 
-	oldval = mutex->__data.__lock;
+	oldval = atomic_load(mutex->__data.__lock);
 
 	/* Check whether we already hold the mutex.  */
 	if (mutex->__data.__owner == id)
diff -r -N --unified glibc-2.19.orig/nptl/pthread_mutex_setprioceiling.c glibc-2.19-swoc/nptl/pthread_mutex_setprioceiling.c
--- glibc-2.19.orig/nptl/pthread_mutex_setprioceiling.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/pthread_mutex_setprioceiling.c	2015-06-05 15:42:14.202422508 +0200
@@ -33,7 +33,7 @@
   if ((mutex->__data.__kind & PTHREAD_MUTEX_PRIO_PROTECT_NP) == 0)
     return EINVAL;
 
-  if (__sched_fifo_min_prio == -1)
+  if (atomic_load(__sched_fifo_min_prio) == -1)
     __init_sched_fifo_prio ();
 
   if (__builtin_expect (prioceiling < __sched_fifo_min_prio, 0)
@@ -56,7 +56,7 @@
 	locked = true;
     }
 
-  int oldval = mutex->__data.__lock;
+  int oldval = atomic_load(mutex->__data.__lock);
   if (! locked)
     do
       {
@@ -106,9 +106,9 @@
 
   int newlock = 0;
   if (locked)
-    newlock = (mutex->__data.__lock & ~PTHREAD_MUTEX_PRIO_CEILING_MASK);
-  mutex->__data.__lock = newlock
-			 | (prioceiling << PTHREAD_MUTEX_PRIO_CEILING_SHIFT);
+    newlock = (atomic_load(mutex->__data.__lock) & ~PTHREAD_MUTEX_PRIO_CEILING_MASK);
+  atomic_store(mutex->__data.__lock, newlock
+	       | (prioceiling << PTHREAD_MUTEX_PRIO_CEILING_SHIFT));
   atomic_full_barrier ();
 
   lll_futex_wake (&mutex->__data.__lock, INT_MAX,
diff -r -N --unified glibc-2.19.orig/nptl/pthread_mutex_timedlock.c glibc-2.19-swoc/nptl/pthread_mutex_timedlock.c
--- glibc-2.19.orig/nptl/pthread_mutex_timedlock.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/pthread_mutex_timedlock.c	2015-06-05 15:42:14.202422508 +0200
@@ -141,7 +141,7 @@
       THREAD_SETMEM (THREAD_SELF, robust_head.list_op_pending,
 		     &mutex->__data.__list.__next);
 
-      oldval = mutex->__data.__lock;
+      oldval = atomic_load(mutex->__data.__lock);
       do
 	{
 	again:
@@ -247,7 +247,7 @@
 			 (void *) (((uintptr_t) &mutex->__data.__list.__next)
 				   | 1));
 
-	oldval = mutex->__data.__lock;
+	oldval = atomic_load(mutex->__data.__lock);
 
 	/* Check whether we already hold the mutex.  */
 	if (__builtin_expect ((oldval & FUTEX_TID_MASK) == id, 0))
@@ -332,7 +332,7 @@
 		return INTERNAL_SYSCALL_ERRNO (e, __err);
 	      }
 
-	    oldval = mutex->__data.__lock;
+	    oldval = atomic_load(mutex->__data.__lock);
 
 	    assert (robust || (oldval & FUTEX_OWNER_DIED) == 0);
 	  }
@@ -389,7 +389,7 @@
       {
 	int kind = mutex->__data.__kind & PTHREAD_MUTEX_KIND_MASK_NP;
 
-	oldval = mutex->__data.__lock;
+	oldval = atomic_load(mutex->__data.__lock);
 
 	/* Check whether we already hold the mutex.  */
 	if (mutex->__data.__owner == id)
diff -r -N --unified glibc-2.19.orig/nptl/pthread_mutex_trylock.c glibc-2.19-swoc/nptl/pthread_mutex_trylock.c
--- glibc-2.19.orig/nptl/pthread_mutex_trylock.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/pthread_mutex_trylock.c	2015-06-05 15:42:14.202422508 +0200
@@ -98,7 +98,7 @@
       THREAD_SETMEM (THREAD_SELF, robust_head.list_op_pending,
 		     &mutex->__data.__list.__next);
 
-      oldval = mutex->__data.__lock;
+      oldval = atomic_load(mutex->__data.__lock);
       do
 	{
 	again:
@@ -208,7 +208,7 @@
 			 (void *) (((uintptr_t) &mutex->__data.__list.__next)
 				   | 1));
 
-	oldval = mutex->__data.__lock;
+	oldval = atomic_load(mutex->__data.__lock);
 
 	/* Check whether we already hold the mutex.  */
 	if (__builtin_expect ((oldval & FUTEX_TID_MASK) == id, 0))
@@ -267,7 +267,7 @@
 		return EBUSY;
 	      }
 
-	    oldval = mutex->__data.__lock;
+	    oldval = atomic_load(mutex->__data.__lock);
 	  }
 
 	if (__builtin_expect (oldval & FUTEX_OWNER_DIED, 0))
@@ -326,7 +326,7 @@
       {
 	int kind = mutex->__data.__kind & PTHREAD_MUTEX_KIND_MASK_NP;
 
-	oldval = mutex->__data.__lock;
+	oldval = atomic_load(mutex->__data.__lock);
 
 	/* Check whether we already hold the mutex.  */
 	if (mutex->__data.__owner == id)
diff -r -N --unified glibc-2.19.orig/nptl/pthread_mutex_unlock.c glibc-2.19-swoc/nptl/pthread_mutex_unlock.c
--- glibc-2.19.orig/nptl/pthread_mutex_unlock.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/pthread_mutex_unlock.c	2015-06-05 15:42:14.202422508 +0200
@@ -229,7 +229,7 @@
 	--mutex->__data.__nusers;
 
       /* Unlock.  */
-      if ((mutex->__data.__lock & FUTEX_WAITERS) != 0
+      if ((atomic_load(mutex->__data.__lock) & FUTEX_WAITERS) != 0
 	  || atomic_compare_and_exchange_bool_rel (&mutex->__data.__lock, 0,
 						   THREAD_GETMEM (THREAD_SELF,
 								  tid)))
@@ -277,7 +277,7 @@
       int newval, oldval;
       do
 	{
-	  oldval = mutex->__data.__lock;
+	  oldval = atomic_load(mutex->__data.__lock);
 	  newval = oldval & PTHREAD_MUTEX_PRIO_CEILING_MASK;
 	}
       while (atomic_compare_and_exchange_bool_rel (&mutex->__data.__lock,
diff -r -N --unified glibc-2.19.orig/nptl/pthread_once.c glibc-2.19-swoc/nptl/pthread_once.c
--- glibc-2.19.orig/nptl/pthread_once.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/pthread_once.c	2015-06-05 15:42:14.202422508 +0200
@@ -1,6 +1,5 @@
-/* Copyright (C) 2002-2014 Free Software Foundation, Inc.
+/* Copyright (C) 2004-2014 Free Software Foundation, Inc.
    This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
 
    The GNU C Library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
@@ -9,46 +8,82 @@
 
    The GNU C Library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the GNU
    Lesser General Public License for more details.
 
    You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
+   License along with the GNU C Library.  If not, see
    <http://www.gnu.org/licenses/>.  */
 
 #include "pthreadP.h"
 #include <lowlevellock.h>
 
+unsigned long int __fork_generation attribute_hidden;
 
+static void
+clear_once_control (void *arg)
+{
+  pthread_once_t *once_control = (pthread_once_t *) arg;
 
-static int once_lock = LLL_LOCK_INITIALIZER;
-
+  atomic_store(*once_control, 0);
+  lll_futex_wake (once_control, INT_MAX, LLL_PRIVATE);
+}
 
 int
-__pthread_once (once_control, init_routine)
-     pthread_once_t *once_control;
-     void (*init_routine) (void);
+__pthread_once (pthread_once_t *once_control, void (*init_routine) (void))
 {
-  /* XXX Depending on whether the LOCK_IN_ONCE_T is defined use a
-     global lock variable or one which is part of the pthread_once_t
-     object.  */
-  if (*once_control == PTHREAD_ONCE_INIT)
+  for (;;)
     {
-      lll_lock (once_lock, LLL_PRIVATE);
+      int oldval;
+      int newval;
 
-      /* XXX This implementation is not complete.  It doesn't take
-	 cancelation and fork into account.  */
-      if (*once_control == PTHREAD_ONCE_INIT)
+      /* Pseudo code:
+	 newval = __fork_generation | 1;
+	 oldval = *once_control;
+	 if ((oldval & 2) == 0)
+	   *once_control = newval;
+	 Do this atomically.
+      */
+      do
 	{
-	  init_routine ();
+	  newval = atomic_load(__fork_generation) | 1;
+	  oldval = atomic_load(*once_control);
+	  if (oldval & 2)
+	    break;
+	} while (atomic_compare_and_exchange_val_acq (once_control, newval, oldval) != oldval);
+
+      /* Check if the initializer has already been done.  */
+      if ((oldval & 2) != 0)
+	return 0;
+
+      /* Check if another thread already runs the initializer.	*/
+      if ((oldval & 1) == 0)
+	break;
+
+      /* Check whether the initializer execution was interrupted by a fork.  */
+      if (oldval != newval)
+	break;
 
-	  *once_control = !PTHREAD_ONCE_INIT;
-	}
-
-      lll_unlock (once_lock, LLL_PRIVATE);
+      /* Same generation, some other thread was faster. Wait.  */
+      lll_futex_wait (once_control, oldval, LLL_PRIVATE);
     }
 
+  /* This thread is the first here.  Do the initialization.
+     Register a cleanup handler so that in case the thread gets
+     interrupted the initialization can be restarted.  */
+  pthread_cleanup_push (clear_once_control, once_control);
+
+  init_routine ();
+
+  pthread_cleanup_pop (0);
+
+  /* Say that the initialisation is done.  */
+  atomic_store(*once_control, __fork_generation | 2);
+
+  /* Wake up all other threads.  */
+  lll_futex_wake (once_control, INT_MAX, LLL_PRIVATE);
+
   return 0;
 }
-strong_alias (__pthread_once, pthread_once)
+weak_alias (__pthread_once, pthread_once)
 hidden_def (__pthread_once)
diff -r -N --unified glibc-2.19.orig/nptl/pthread_setschedparam.c glibc-2.19-swoc/nptl/pthread_setschedparam.c
--- glibc-2.19.orig/nptl/pthread_setschedparam.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/pthread_setschedparam.c	2015-06-05 15:42:14.202422508 +0200
@@ -54,7 +54,7 @@
     }
 
   /* Try to set the scheduler information.  */
-  if (__builtin_expect (__sched_setscheduler (pd->tid, policy,
+  if (__builtin_expect (__sched_setscheduler (atomic_load(pd->tid), policy,
 					      param) == -1, 0))
     result = errno;
   else
diff -r -N --unified glibc-2.19.orig/nptl/pthread_setschedprio.c glibc-2.19-swoc/nptl/pthread_setschedprio.c
--- glibc-2.19.orig/nptl/pthread_setschedprio.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/pthread_setschedprio.c	2015-06-05 15:42:14.202422508 +0200
@@ -48,7 +48,7 @@
     param.sched_priority = pd->tpp->priomax;
 
   /* Try to set the scheduler information.  */
-  if (__builtin_expect (sched_setparam (pd->tid, &param) == -1, 0))
+  if (__builtin_expect (sched_setparam (atomic_load(pd->tid), &param) == -1, 0))
     result = errno;
   else
     {
diff -r -N --unified glibc-2.19.orig/nptl/pthread_spin_lock.c glibc-2.19-swoc/nptl/pthread_spin_lock.c
--- glibc-2.19.orig/nptl/pthread_spin_lock.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/pthread_spin_lock.c	2015-06-05 15:42:14.202422508 +0200
@@ -54,12 +54,12 @@
 	{
 	  int wait = SPIN_LOCK_READS_BETWEEN_CMPXCHG;
 
-	  while (*lock != 0 && wait > 0)
+	  while (atomic_load(*lock) != 0 && wait > 0)
 	    --wait;
 	}
       else
 	{
-	  while (*lock != 0)
+	  while (atomic_load(*lock) != 0)
 	    ;
 	}
     }
diff -r -N --unified glibc-2.19.orig/nptl/pthread_spin_unlock.c glibc-2.19-swoc/nptl/pthread_spin_unlock.c
--- glibc-2.19.orig/nptl/pthread_spin_unlock.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/pthread_spin_unlock.c	2015-06-05 15:42:14.202422508 +0200
@@ -24,6 +24,6 @@
 pthread_spin_unlock (pthread_spinlock_t *lock)
 {
   atomic_full_barrier ();
-  *lock = 0;
+  atomic_store(*lock, 0);
   return 0;
 }
diff -r -N --unified glibc-2.19.orig/nptl/pthread_timedjoin.c glibc-2.19-swoc/nptl/pthread_timedjoin.c
--- glibc-2.19.orig/nptl/pthread_timedjoin.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/pthread_timedjoin.c	2015-06-05 15:42:14.202422508 +0200
@@ -50,7 +50,7 @@
     return EINVAL;
 
   self = THREAD_SELF;
-  if (pd == self || self->joinid == pd)
+  if (pd == self || atomic_load(self->joinid) == pd)
     /* This is a deadlock situation.  The threads are waiting for each
        other to finish.  Note that this is a "may" error.  To be 100%
        sure we catch this error we would have to lock the data
@@ -100,7 +100,7 @@
       __free_tcb (pd);
     }
   else
-    pd->joinid = NULL;
+    atomic_store(pd->joinid, NULL);
 
   return result;
 }
diff -r -N --unified glibc-2.19.orig/nptl/pthread_tryjoin.c glibc-2.19-swoc/nptl/pthread_tryjoin.c
--- glibc-2.19.orig/nptl/pthread_tryjoin.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/pthread_tryjoin.c	2015-06-05 15:42:14.202422508 +0200
@@ -42,7 +42,7 @@
     return EINVAL;
 
   self = THREAD_SELF;
-  if (pd == self || self->joinid == pd)
+  if (pd == self || atomic_load(self->joinid) == pd)
     /* This is a deadlock situation.  The threads are waiting for each
        other to finish.  Note that this is a "may" error.  To be 100%
        sure we catch this error we would have to lock the data
@@ -53,7 +53,7 @@
     return EDEADLK;
 
   /* Return right away if the thread hasn't terminated yet.  */
-  if (pd->tid != 0)
+  if (atomic_load(pd->tid) != 0)
     return EBUSY;
 
   /* Wait for the thread to finish.  If it is already locked something
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/pthread/createthread.c glibc-2.19-swoc/nptl/sysdeps/pthread/createthread.c
--- glibc-2.19.orig/nptl/sysdeps/pthread/createthread.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/pthread/createthread.c	2015-06-05 15:42:14.202422508 +0200
@@ -211,7 +211,7 @@
 
 	      /* Enqueue the descriptor.  */
 	      do
-		pd->nextevent = __nptl_last_event;
+		pd->nextevent = atomic_load(__nptl_last_event);
 	      while (atomic_compare_and_exchange_bool_acq (&__nptl_last_event,
 							   pd, pd->nextevent)
 		     != 0);
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/pthread/list.h glibc-2.19-swoc/nptl/sysdeps/pthread/list.h
--- glibc-2.19.orig/nptl/sysdeps/pthread/list.h	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/pthread/list.h	2015-06-05 15:42:14.202422508 +0200
@@ -57,11 +57,11 @@
 static inline void
 list_add (list_t *newp, list_t *head)
 {
-  newp->next = head->next;
+  newp->next = atomic_load(head->next);
   newp->prev = head;
-  head->next->prev = newp;
+  atomic_store(head->next->prev, newp);
   atomic_write_barrier ();
-  head->next = newp;
+  atomic_store(head->next, newp);
 }
 
 
@@ -69,8 +69,8 @@
 static inline void
 list_del (list_t *elem)
 {
-  elem->next->prev = elem->prev;
-  elem->prev->next = elem->next;
+  atomic_store(elem->next->prev, elem->prev);
+  atomic_store(elem->prev->next, elem->next);
 }
 
 
@@ -79,12 +79,12 @@
 list_splice (list_t *add, list_t *head)
 {
   /* Do nothing if the list which gets added is empty.  */
-  if (add != add->next)
+  if (add != atomic_load(add->next))
     {
-      add->next->prev = head;
-      add->prev->next = head->next;
-      head->next->prev = add->prev;
-      head->next = add->next;
+      atomic_store(add->next->prev, head);
+      atomic_store(add->prev->next, head->next);
+      atomic_store(head->next->prev, add->prev);
+      atomic_store(head->next, add->next);
     }
 }
 
@@ -97,20 +97,20 @@
 
 /* Iterate forward over the elements of the list.  */
 # define list_for_each(pos, head) \
-  for (pos = (head)->next; pos != (head); pos = pos->next)
+  for (pos = atomic_load((head)->next); pos != (head); pos = atomic_load(pos->next))
 
 
 /* Iterate forward over the elements of the list.  */
 # define list_for_each_prev(pos, head) \
-  for (pos = (head)->prev; pos != (head); pos = pos->prev)
+  for (pos = atomic_load((head)->prev); pos != (head); pos = atomic_load(pos->prev))
 
 
 /* Iterate backwards over the elements list.  The list elements can be
    removed from the list while doing this.  */
 # define list_for_each_prev_safe(pos, p, head) \
-  for (pos = (head)->prev, p = pos->prev; \
+  for (pos = atomic_load((head)->prev), p = atomic_load(pos->prev);	\
        pos != (head); \
-       pos = p, p = pos->prev)
+       pos = p, p = atomic_load(pos->prev))
 
 #endif /* _LIST_H */
 
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/pthread/unwind-forcedunwind.c glibc-2.19-swoc/nptl/sysdeps/pthread/unwind-forcedunwind.c
--- glibc-2.19.orig/nptl/sysdeps/pthread/unwind-forcedunwind.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/pthread/unwind-forcedunwind.c	2015-06-05 15:42:14.202422508 +0200
@@ -42,7 +42,7 @@
   void *getcfa;
   void *handle;
 
-  if (__builtin_expect (libgcc_s_handle != NULL, 1))
+  if (__builtin_expect (atomic_load(libgcc_s_handle) != NULL, 1))
     {
       /* Force gcc to reload all values.  */
       asm volatile ("" ::: "memory");
@@ -75,17 +75,17 @@
      pthread_cancel_init might return early even when the pointer the
      caller is interested in is not initialized yet.  */
   atomic_write_barrier ();
-  libgcc_s_handle = handle;
+  atomic_store(libgcc_s_handle, handle);
 }
 
 void
 __libc_freeres_fn_section
 __unwind_freeres (void)
 {
-  void *handle = libgcc_s_handle;
+  void *handle = atomic_load(libgcc_s_handle);
   if (handle != NULL)
     {
-      libgcc_s_handle = NULL;
+      atomic_store(libgcc_s_handle, NULL);
       __libc_dlclose (handle);
     }
 }
@@ -93,7 +93,7 @@
 void
 _Unwind_Resume (struct _Unwind_Exception *exc)
 {
-  if (__builtin_expect (libgcc_s_handle == NULL, 0))
+  if (__builtin_expect (atomic_load(libgcc_s_handle) == NULL, 0))
     pthread_cancel_init ();
   else
     atomic_read_barrier ();
@@ -109,7 +109,7 @@
 		      struct _Unwind_Exception *ue_header,
 		      struct _Unwind_Context *context)
 {
-  if (__builtin_expect (libgcc_s_handle == NULL, 0))
+  if (__builtin_expect (atomic_load(libgcc_s_handle) == NULL, 0))
     pthread_cancel_init ();
   else
     atomic_read_barrier ();
@@ -125,7 +125,7 @@
 _Unwind_ForcedUnwind (struct _Unwind_Exception *exc, _Unwind_Stop_Fn stop,
 		      void *stop_argument)
 {
-  if (__builtin_expect (libgcc_s_handle == NULL, 0))
+  if (__builtin_expect (atomic_load(libgcc_s_handle) == NULL, 0))
     pthread_cancel_init ();
   else
     atomic_read_barrier ();
@@ -140,7 +140,7 @@
 _Unwind_Word
 _Unwind_GetCFA (struct _Unwind_Context *context)
 {
-  if (__builtin_expect (libgcc_s_handle == NULL, 0))
+  if (__builtin_expect (atomic_load(libgcc_s_handle) == NULL, 0))
     pthread_cancel_init ();
   else
     atomic_read_barrier ();
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/fork.c glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/fork.c
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/fork.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/fork.c	2015-06-05 15:42:14.202422508 +0200
@@ -62,12 +62,12 @@
   /* Run all the registered preparation handlers.  In reverse order.
      While doing this we build up a list of all the entries.  */
   struct fork_handler *runp;
-  while ((runp = __fork_handlers) != NULL)
+  while ((runp = atomic_load(__fork_handlers)) != NULL)
     {
       /* Make sure we read from the current RUNP pointer.  */
       atomic_full_barrier ();
 
-      unsigned int oldval = runp->refcntr;
+      unsigned int oldval = atomic_load(runp->refcntr);
 
       if (oldval == 0)
 	/* This means some other thread removed the list just after
@@ -102,7 +102,7 @@
 	  allp = newp;
 
 	  /* Advance to the next handler.  */
-	  runp = runp->next;
+	  runp = atomic_load(runp->next);
 	  if (runp == NULL)
 	    break;
 
@@ -138,6 +138,8 @@
     {
       struct pthread *self = THREAD_SELF;
 
+      mvee_invalidate_buffer();
+
       assert (THREAD_GETMEM (self, tid) != ppid);
 
       if (__fork_generation_pointer != NULL)
@@ -223,10 +225,10 @@
 	    allp->handler->parent_handler ();
 
 	  if (atomic_decrement_and_test (&allp->handler->refcntr)
-	      && allp->handler->need_signal)
+	      && atomic_load(allp->handler->need_signal))
 	    lll_futex_wake (allp->handler->refcntr, 1, LLL_PRIVATE);
 
-	  allp = allp->next;
+	  allp = atomic_load(allp->next);
 	}
     }
 
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/lowlevellock.c glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/lowlevellock.c
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/lowlevellock.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/lowlevellock.c	2015-06-05 15:42:14.202422508 +0200
@@ -26,7 +26,7 @@
 void
 __lll_lock_wait_private (int *futex)
 {
-  if (*futex == 2)
+  if (atomic_load(*futex) == 2)
     lll_futex_wait (futex, 2, LLL_PRIVATE);
 
   while (atomic_exchange_acq (futex, 2) != 0)
@@ -39,7 +39,7 @@
 void
 __lll_lock_wait (int *futex, int private)
 {
-  if (*futex == 2)
+  if (atomic_load(*futex) == 2)
     lll_futex_wait (futex, 2, private);
 
   while (atomic_exchange_acq (futex, 2) != 0)
@@ -92,7 +92,7 @@
     return EINVAL;
 
   /* Repeat until thread terminated.  */
-  while ((tid = *tidp) != 0)
+  while ((tid = atomic_load(*tidp)) != 0)
     {
       struct timeval tv;
       struct timespec rt;
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/lowlevelrobustlock.c glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/lowlevelrobustlock.c
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/lowlevelrobustlock.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/lowlevelrobustlock.c	2015-06-05 15:42:14.202422508 +0200
@@ -26,7 +26,7 @@
 int
 __lll_robust_lock_wait (int *futex, int private)
 {
-  int oldval = *futex;
+  int oldval = atomic_load(*futex);
   int tid = THREAD_GETMEM (THREAD_SELF, tid);
 
   /* If the futex changed meanwhile try locking again.  */
@@ -64,7 +64,7 @@
     return EINVAL;
 
   int tid = THREAD_GETMEM (THREAD_SELF, tid);
-  int oldval = *futex;
+  int oldval = atomic_load(*futex);
 
   /* If the futex changed meanwhile try locking again.  */
   if (oldval == 0)
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/pthread_getaffinity.c glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/pthread_getaffinity.c
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/pthread_getaffinity.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/pthread_getaffinity.c	2015-06-05 15:42:14.202422508 +0200
@@ -32,7 +32,7 @@
   const struct pthread *pd = (const struct pthread *) th;
 
   INTERNAL_SYSCALL_DECL (err);
-  int res = INTERNAL_SYSCALL (sched_getaffinity, err, 3, pd->tid,
+  int res = INTERNAL_SYSCALL (sched_getaffinity, err, 3, atomic_load(pd->tid),
 			      MIN (INT_MAX, cpusetsize), cpuset);
   if (INTERNAL_SYSCALL_ERROR_P (res, err))
     return INTERNAL_SYSCALL_ERRNO (res, err);
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/pthread_getcpuclockid.c glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/pthread_getcpuclockid.c
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/pthread_getcpuclockid.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/pthread_getcpuclockid.c	2015-06-05 15:42:14.202422508 +0200
@@ -38,7 +38,7 @@
 
   /* The clockid_t value is a simple computation from the TID.  */
 
-  const clockid_t tidclock = MAKE_THREAD_CPUCLOCK (pd->tid, CPUCLOCK_SCHED);
+  const clockid_t tidclock = MAKE_THREAD_CPUCLOCK (atomic_load(pd->tid), CPUCLOCK_SCHED);
 
   *clockid = tidclock;
   return 0;
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/pthread_getname.c glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/pthread_getname.c
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/pthread_getname.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/pthread_getname.c	2015-06-05 15:42:14.202422508 +0200
@@ -46,7 +46,7 @@
 
 #define FMT "/proc/self/task/%u/comm"
   char fname[sizeof (FMT) + 8];
-  sprintf (fname, FMT, (unsigned int) pd->tid);
+  sprintf (fname, FMT, (unsigned int) atomic_load(pd->tid));
 
   int fd = open_not_cancel_2 (fname, O_RDONLY);
   if (fd == -1)
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/pthread_setaffinity.c glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/pthread_setaffinity.c
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/pthread_setaffinity.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/pthread_setaffinity.c	2015-06-05 15:42:14.202422508 +0200
@@ -63,7 +63,7 @@
 
   if (__builtin_expect (__kernel_cpumask_size == 0, 0))
     {
-      res = __determine_cpumask_size (pd->tid);
+      res = __determine_cpumask_size (atomic_load(pd->tid));
       if (res != 0)
 	return res;
     }
@@ -76,7 +76,7 @@
 	 fulfilled.  */
       return EINVAL;
 
-  res = INTERNAL_SYSCALL (sched_setaffinity, err, 3, pd->tid, cpusetsize,
+  res = INTERNAL_SYSCALL (sched_setaffinity, err, 3, atomic_load(pd->tid), cpusetsize,
 			  cpuset);
 
 #ifdef RESET_VGETCPU_CACHE
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/pthread_setname.c glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/pthread_setname.c
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/pthread_setname.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/pthread_setname.c	2015-06-05 15:42:14.202422508 +0200
@@ -46,7 +46,7 @@
 
 #define FMT "/proc/self/task/%u/comm"
   char fname[sizeof (FMT) + 8];
-  sprintf (fname, FMT, (unsigned int) pd->tid);
+  sprintf (fname, FMT, (unsigned int) atomic_load(pd->tid));
 
   int fd = open_not_cancel_2 (fname, O_RDWR);
   if (fd == -1)
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/register-atfork.c glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/register-atfork.c
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/register-atfork.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/register-atfork.c	2015-06-05 15:42:14.202422508 +0200
@@ -49,18 +49,18 @@
     {
       /* Search for an empty entry.  */
       for (i = 0; i < NHANDLER; ++i)
-	if (runp->mem[i].refcntr == 0)
+	if (atomic_load(runp->mem[i].refcntr) == 0)
 	  goto found;
     }
-  while ((runp = runp->next) != NULL);
+  while ((runp = atomic_load(runp->next)) != NULL);
 
   /* We have to allocate a new entry.  */
   runp = (struct fork_handler_pool *) calloc (1, sizeof (*runp));
   if (runp != NULL)
     {
       /* Enqueue the new memory pool into the list.  */
-      runp->next = fork_handler_pool.next;
-      fork_handler_pool.next = runp;
+      runp->next = atomic_load(fork_handler_pool.next);
+      atomic_store(fork_handler_pool.next, runp);
 
       /* We use the last entry on the page.  This means when we start
 	 searching from the front the next time we will find the first
@@ -69,8 +69,8 @@
 
     found:
       result = &runp->mem[i];
-      result->refcntr = 1;
-      result->need_signal = 0;
+      atomic_store(result->refcntr, 1);
+      atomic_store(result->need_signal, 0);
     }
 
   return result;
@@ -113,7 +113,7 @@
 __linkin_atfork (struct fork_handler *newp)
 {
   do
-    newp->next = __fork_handlers;
+    newp->next = atomic_load(__fork_handlers);
   while (catomic_compare_and_exchange_bool_acq (&__fork_handlers,
 						newp, newp->next) != 0);
 }
@@ -125,7 +125,7 @@
   lll_lock (__fork_lock, LLL_PRIVATE);
 
   /* No more fork handlers.  */
-  __fork_handlers = NULL;
+  atomic_store(__fork_handlers, NULL);
 
   /* Free eventually allocated memory blocks for the object pool.  */
   struct fork_handler_pool *runp = fork_handler_pool.next;
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/sem_post.c glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/sem_post.c
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/sem_post.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/sem_post.c	2015-06-05 15:42:14.202422508 +0200
@@ -34,8 +34,8 @@
   __typeof (isem->value) cur;
   do
     {
-      cur = isem->value;
-      if (isem->value == SEM_VALUE_MAX)
+      cur = atomic_load(isem->value);
+      if (cur == SEM_VALUE_MAX)
 	{
 	  __set_errno (EOVERFLOW);
 	  return -1;
@@ -44,7 +44,7 @@
   while (atomic_compare_and_exchange_bool_rel (&isem->value, cur + 1, cur));
 
   atomic_full_barrier ();
-  if (isem->nwaiters > 0)
+  if (atomic_load(isem->nwaiters) > 0)
     {
       int err = lll_futex_wake (&isem->value, 1,
 				isem->private ^ FUTEX_PRIVATE_FLAG);
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/sem_trywait.c glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/sem_trywait.c
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/sem_trywait.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/sem_trywait.c	2015-06-05 15:42:14.202422508 +0200
@@ -32,7 +32,7 @@
   int *futex = (int *) sem;
   int val;
 
-  if (*futex > 0)
+  if (atomic_load(*futex) > 0)
     {
       val = atomic_decrement_if_positive (futex);
       if (val > 0)
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/timer_routines.c glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/timer_routines.c
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/timer_routines.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/timer_routines.c	2015-06-05 15:42:14.206422508 +0200
@@ -182,7 +182,7 @@
   int res = pthread_create (&th, &attr, timer_helper_thread, NULL);
   if (res == 0)
     /* We managed to start the helper thread.  */
-    __helper_tid = ((struct pthread *) th)->tid;
+    __helper_tid = atomic_load(((struct pthread *) th)->tid);
 
   /* Restore the signal mask.  */
   INTERNAL_SYSCALL (rt_sigprocmask, err, 4, SIG_SETMASK, &oss, NULL,
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/unregister-atfork.c glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/unregister-atfork.c
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/unregister-atfork.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/unregister-atfork.c	2015-06-05 15:42:14.206422508 +0200
@@ -33,16 +33,16 @@
      We do not worry about other threads adding entries for this DSO
      right this moment.  If this happens this is a race and we can do
      whatever we please.  The program will crash anyway seen.  */
-  struct fork_handler *runp = __fork_handlers;
+  struct fork_handler *runp = atomic_load(__fork_handlers);
   struct fork_handler *lastp = NULL;
 
   while (runp != NULL)
-    if (runp->dso_handle == dso_handle)
+    if (atomic_load(runp->dso_handle) == dso_handle)
       break;
     else
       {
 	lastp = runp;
-	runp = runp->next;
+	runp = atomic_load(runp->next);
       }
 
   if (runp == NULL)
@@ -67,7 +67,7 @@
   do
     {
     again:
-      if (runp->dso_handle == dso_handle)
+      if (atomic_load(runp->dso_handle) == dso_handle)
 	{
 	  if (lastp == NULL)
 	    {
@@ -77,12 +77,12 @@
 							 runp->next, runp)
 		  != 0)
 		{
-		  runp = __fork_handlers;
+		  runp = atomic_load(__fork_handlers);
 		  goto again;
 		}
 	    }
 	  else
-	    lastp->next = runp->next;
+	    atomic_store(lastp->next, runp->next);
 
 	  /* We cannot overwrite the ->next element now.  Put the deleted
 	     entries in a separate list.  */
@@ -94,7 +94,7 @@
       else
 	lastp = runp;
 
-      runp = runp->next;
+      runp = atomic_load(runp->next);
     }
   while (runp != NULL);
 
@@ -105,7 +105,7 @@
   while (deleted != NULL)
     {
       /* We need to be informed by possible current users.  */
-      deleted->handler->need_signal = 1;
+      atomic_store(deleted->handler->need_signal, 1);
       /* Make sure this gets written out first.  */
       atomic_write_barrier ();
 
@@ -113,7 +113,7 @@
 	 wait for the last user.  */
       atomic_decrement (&deleted->handler->refcntr);
       unsigned int val;
-      while ((val = deleted->handler->refcntr) != 0)
+      while ((val = atomic_load(deleted->handler->refcntr)) != 0)
 	lll_futex_wait (&deleted->handler->refcntr, val, LLL_PRIVATE);
 
       deleted = deleted->next;
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/clone.S glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/clone.S
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/clone.S	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/clone.S	1970-01-01 01:00:00.000000000 +0100
@@ -1,9 +0,0 @@
-/* We want an #include_next, but we are the main source file.
-   So, #include ourselves and in that incarnation we can use #include_next.  */
-#ifndef INCLUDED_SELF
-# define INCLUDED_SELF
-# include <clone.S>
-#else
-# define RESET_PID
-# include_next <clone.S>
-#endif
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/libc-lowlevellock.S glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/libc-lowlevellock.S
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/libc-lowlevellock.S	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/libc-lowlevellock.S	1970-01-01 01:00:00.000000000 +0100
@@ -1,19 +0,0 @@
-/* Copyright (C) 2002-2014 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include "lowlevellock.S"
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/lowlevellock.h glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/lowlevellock.h
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/lowlevellock.h	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/lowlevellock.h	2015-06-05 15:42:14.206422508 +0200
@@ -1,6 +1,5 @@
-/* Copyright (C) 2002-2014 Free Software Foundation, Inc.
+/* Copyright (C) 2005-2014 Free Software Foundation, Inc.
    This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
 
    The GNU C Library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
@@ -9,61 +8,42 @@
 
    The GNU C Library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the GNU
    Lesser General Public License for more details.
 
    You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
+   License along with the GNU C Library.  If not, see
    <http://www.gnu.org/licenses/>.  */
 
 #ifndef _LOWLEVELLOCK_H
 #define _LOWLEVELLOCK_H	1
 
-#include <stap-probe.h>
-
 #ifndef __ASSEMBLER__
-# include <time.h>
-# include <sys/param.h>
-# include <bits/pthreadtypes.h>
-# include <kernel-features.h>
-# include <tcb-offsets.h>
-
-# ifndef LOCK_INSTR
-#  ifdef UP
-#   define LOCK_INSTR	/* nothing */
-#  else
-#   define LOCK_INSTR "lock;"
-#  endif
-# endif
-#else
-# ifndef LOCK
-#  ifdef UP
-#   define LOCK
-#  else
-#   define LOCK lock
-#  endif
-# endif
-#endif
+#include <time.h>
+#include <sys/param.h>
+#include <bits/pthreadtypes.h>
+#include <atomic.h>
+#include <kernel-features.h>
+#endif // </__ASSEMBLER__>
 
-#define SYS_futex		__NR_futex
 #define FUTEX_WAIT		0
 #define FUTEX_WAKE		1
+#define FUTEX_REQUEUE		3
 #define FUTEX_CMP_REQUEUE	4
 #define FUTEX_WAKE_OP		5
+#define FUTEX_OP_CLEAR_WAKE_IF_GT_ONE	((4 << 24) | 1)
 #define FUTEX_LOCK_PI		6
 #define FUTEX_UNLOCK_PI		7
 #define FUTEX_TRYLOCK_PI	8
 #define FUTEX_WAIT_BITSET	9
 #define FUTEX_WAKE_BITSET	10
-#define FUTEX_WAIT_REQUEUE_PI	11
-#define FUTEX_CMP_REQUEUE_PI	12
+#define FUTEX_WAIT_REQUEUE_PI   11
+#define FUTEX_CMP_REQUEUE_PI    12
 #define FUTEX_PRIVATE_FLAG	128
 #define FUTEX_CLOCK_REALTIME	256
 
 #define FUTEX_BITSET_MATCH_ANY	0xffffffff
 
-#define FUTEX_OP_CLEAR_WAKE_IF_GT_ONE	((4 << 24) | 1)
-
 /* Values for 'private' parameter of locking macros.  Yes, the
    definition seems to be backwards.  But it is not.  The bit will be
    reversed before passing to the system call.  */
@@ -71,7 +51,6 @@
 #define LLL_SHARED	FUTEX_PRIVATE_FLAG
 
 #ifndef __ASSEMBLER__
-
 #if !defined NOT_IN_libc || defined IS_IN_rtld
 /* In libc.so or ld.so all futexes are private.  */
 # ifdef __ASSUME_PRIVATE_FUTEX
@@ -91,535 +70,253 @@
    ? ((private) == 0							      \
       ? ((fl) | THREAD_GETMEM (THREAD_SELF, header.private_futex))	      \
       : (fl))								      \
-   : ({ unsigned int __fl = ((private) ^ FUTEX_PRIVATE_FLAG);		      \
-	asm ("andl %%fs:%P1, %0" : "+r" (__fl)				      \
-	     : "i" (offsetof (struct pthread, header.private_futex)));	      \
-	__fl | (fl); }))
+   : ((fl) | (((private) ^ FUTEX_PRIVATE_FLAG)				      \
+	      & THREAD_GETMEM (THREAD_SELF, header.private_futex))))
 # endif
 #endif
+#endif
 
-/* Initializer for lock.  */
-#define LLL_LOCK_INITIALIZER		(0)
-#define LLL_LOCK_INITIALIZER_LOCKED	(1)
-#define LLL_LOCK_INITIALIZER_WAITERS	(2)
-
-/* Delay in spinlock loop.  */
-#define BUSY_WAIT_NOP	  asm ("rep; nop")
 
+#define lll_futex_wait(futexp, val, private) \
+  lll_futex_timed_wait(futexp, val, NULL, private)
 
-#define LLL_STUB_UNWIND_INFO_START \
-	".section	.eh_frame,\"a\",@progbits\n" 		\
-"7:\t"	".long	9f-8f	# Length of Common Information Entry\n" \
-"8:\t"	".long	0x0	# CIE Identifier Tag\n\t" 		\
-	".byte	0x1	# CIE Version\n\t" 			\
-	".ascii \"zR\\0\"	# CIE Augmentation\n\t" 	\
-	".uleb128 0x1	# CIE Code Alignment Factor\n\t" 	\
-	".sleb128 -8	# CIE Data Alignment Factor\n\t" 	\
-	".byte	0x10	# CIE RA Column\n\t" 			\
-	".uleb128 0x1	# Augmentation size\n\t" 		\
-	".byte	0x1b	# FDE Encoding (pcrel sdata4)\n\t" 	\
-	".byte	0x12	# DW_CFA_def_cfa_sf\n\t" 		\
-	".uleb128 0x7\n\t" 					\
-	".sleb128 16\n\t" 					\
-	".align " LP_SIZE "\n" 					\
-"9:\t"	".long	23f-10f	# FDE Length\n" 			\
-"10:\t"	".long	10b-7b	# FDE CIE offset\n\t" 			\
-	".long	1b-.	# FDE initial location\n\t" 		\
-	".long	6b-1b	# FDE address range\n\t" 		\
-	".uleb128 0x0	# Augmentation size\n\t" 		\
-	".byte	0x16	# DW_CFA_val_expression\n\t" 		\
-	".uleb128 0x10\n\t" 					\
-	".uleb128 12f-11f\n" 					\
-"11:\t"	".byte	0x80	# DW_OP_breg16\n\t" 			\
-	".sleb128 4b-1b\n"
-#define LLL_STUB_UNWIND_INFO_END \
-	".byte	0x16	# DW_CFA_val_expression\n\t" 		\
-	".uleb128 0x10\n\t" 					\
-	".uleb128 14f-13f\n" 					\
-"13:\t"	".byte	0x80	# DW_OP_breg16\n\t" 			\
-	".sleb128 4b-2b\n" 					\
-"14:\t"	".byte	0x40 + (3b-2b) # DW_CFA_advance_loc\n\t" 	\
-	".byte	0x0e	# DW_CFA_def_cfa_offset\n\t" 		\
-	".uleb128 0\n\t" 					\
-	".byte	0x16	# DW_CFA_val_expression\n\t" 		\
-	".uleb128 0x10\n\t" 					\
-	".uleb128 16f-15f\n" 					\
-"15:\t"	".byte	0x80	# DW_OP_breg16\n\t" 			\
-	".sleb128 4b-3b\n" 					\
-"16:\t"	".byte	0x40 + (4b-3b-1) # DW_CFA_advance_loc\n\t" 	\
-	".byte	0x0e	# DW_CFA_def_cfa_offset\n\t" 		\
-	".uleb128 128\n\t" 					\
-	".byte	0x16	# DW_CFA_val_expression\n\t" 		\
-	".uleb128 0x10\n\t" 					\
-	".uleb128 20f-17f\n" 					\
-"17:\t"	".byte	0x80	# DW_OP_breg16\n\t" 			\
-	".sleb128 19f-18f\n\t" 					\
-	".byte	0x0d	# DW_OP_const4s\n" 			\
-"18:\t"	".4byte	4b-.\n\t" 					\
-	".byte	0x1c	# DW_OP_minus\n\t" 			\
-	".byte	0x0d	# DW_OP_const4s\n" 			\
-"19:\t"	".4byte	24f-.\n\t" 					\
-	".byte	0x22	# DW_OP_plus\n" 			\
-"20:\t"	".byte	0x40 + (5b-4b+1) # DW_CFA_advance_loc\n\t" 	\
-	".byte	0x13	# DW_CFA_def_cfa_offset_sf\n\t" 	\
-	".sleb128 16\n\t" 					\
-	".byte	0x16	# DW_CFA_val_expression\n\t" 		\
-	".uleb128 0x10\n\t" 					\
-	".uleb128 22f-21f\n" 					\
-"21:\t"	".byte	0x80	# DW_OP_breg16\n\t" 			\
-	".sleb128 4b-5b\n" 					\
-"22:\t"	".align " LP_SIZE "\n" 					\
-"23:\t"	".previous\n"
-
-/* Unwind info for
-   1: leaq ..., %rdi
-   2: subq $128, %rsp
-   3: callq ...
-   4: addq $128, %rsp
-   5: jmp 24f
-   6:
-   snippet.  */
-#define LLL_STUB_UNWIND_INFO_5 \
-LLL_STUB_UNWIND_INFO_START					\
-"12:\t"	".byte	0x40 + (2b-1b) # DW_CFA_advance_loc\n\t" 	\
-LLL_STUB_UNWIND_INFO_END
-
-/* Unwind info for
-   1: leaq ..., %rdi
-   0: movq ..., %rdx
-   2: subq $128, %rsp
-   3: callq ...
-   4: addq $128, %rsp
-   5: jmp 24f
-   6:
-   snippet.  */
-#define LLL_STUB_UNWIND_INFO_6 \
-LLL_STUB_UNWIND_INFO_START					\
-"12:\t"	".byte	0x40 + (0b-1b) # DW_CFA_advance_loc\n\t" 	\
-	".byte	0x16	# DW_CFA_val_expression\n\t" 		\
-	".uleb128 0x10\n\t" 					\
-	".uleb128 26f-25f\n" 					\
-"25:\t"	".byte	0x80	# DW_OP_breg16\n\t" 			\
-	".sleb128 4b-0b\n" 					\
-"26:\t"	".byte	0x40 + (2b-0b) # DW_CFA_advance_loc\n\t" 	\
-LLL_STUB_UNWIND_INFO_END
+#define lll_futex_timed_wait(futexp, val, timespec, private) \
+  ({									      \
+    INTERNAL_SYSCALL_DECL (__err);					      \
+    long int __ret;							      \
+    __ret = INTERNAL_SYSCALL (futex, __err, 4, (futexp),		      \
+			      __lll_private_flag (FUTEX_WAIT, private),	      \
+			      (val), (timespec));			      \
+    __ret;								      \
+  })
 
+#define lll_futex_timed_wait_bitset(futexp, val, timespec, clockbit, private) \
+  ({									\
+    INTERNAL_SYSCALL_DECL (__err);					\
+    long int __ret;							\
+    int __op = FUTEX_WAIT_BITSET | clockbit;				\
+    __ret = INTERNAL_SYSCALL (futex, __err, 6, (futexp),		\
+			      __lll_private_flag (__op, private),	\
+			      (val), (timespec), NULL /* Unused.  */,	\
+			      FUTEX_BITSET_MATCH_ANY);			\
+    __ret;								\
+  })
 
-#define lll_futex_wait(futex, val, private) \
-  lll_futex_timed_wait(futex, val, NULL, private)
+#define lll_futex_wake(futexp, nr, private) \
+  ({									      \
+    INTERNAL_SYSCALL_DECL (__err);					      \
+    long int __ret;							      \
+    __ret = INTERNAL_SYSCALL (futex, __err, 4, (futexp),		      \
+			      __lll_private_flag (FUTEX_WAKE, private),	      \
+			      (nr), 0);					      \
+    __ret;								      \
+  })
 
+#define lll_robust_dead(futexv, private) \
+  do									      \
+    {									      \
+      int *__futexp = &(futexv);					      \
+      atomic_or (__futexp, FUTEX_OWNER_DIED);				      \
+      lll_futex_wake (__futexp, 1, private);				      \
+    }									      \
+  while (0)
 
-#define lll_futex_timed_wait(futex, val, timeout, private) \
+/* Returns non-zero if error happened, zero if success.  */
+#define lll_futex_requeue(futexp, nr_wake, nr_move, mutex, val, private) \
   ({									      \
-    register const struct timespec *__to __asm ("r10") = timeout;	      \
-    int __status;							      \
-    register __typeof (val) _val __asm ("edx") = (val);			      \
-    __asm __volatile ("syscall"						      \
-		      : "=a" (__status)					      \
-		      : "0" (SYS_futex), "D" (futex),			      \
-			"S" (__lll_private_flag (FUTEX_WAIT, private)),	      \
-			"d" (_val), "r" (__to)				      \
-		      : "memory", "cc", "r11", "cx");			      \
-    __status;								      \
+    INTERNAL_SYSCALL_DECL (__err);					      \
+    long int __ret;							      \
+    __ret = INTERNAL_SYSCALL (futex, __err, 6, (futexp),		      \
+			      __lll_private_flag (FUTEX_CMP_REQUEUE, private),\
+			      (nr_wake), (nr_move), (mutex), (val));	      \
+    INTERNAL_SYSCALL_ERROR_P (__ret, __err);				      \
   })
 
 
-#define lll_futex_wake(futex, nr, private) \
+/* Returns non-zero if error happened, zero if success.  */
+/* lll_futex_wake_unlock => moved to atomic.h */
+
+/* Priority Inheritance support.  */
+#define lll_futex_wait_requeue_pi(futexp, val, mutex, private) \
+  lll_futex_timed_wait_requeue_pi (futexp, val, NULL, 0, mutex, private)
+
+#define lll_futex_timed_wait_requeue_pi(futexp, val, timespec, clockbit,      \
+					mutex, private)			      \
   ({									      \
-    int __status;							      \
-    register __typeof (nr) _nr __asm ("edx") = (nr);			      \
-    LIBC_PROBE (lll_futex_wake, 3, futex, nr, private);                       \
-    __asm __volatile ("syscall"						      \
-		      : "=a" (__status)					      \
-		      : "0" (SYS_futex), "D" (futex),			      \
-			"S" (__lll_private_flag (FUTEX_WAKE, private)),	      \
-			"d" (_nr)					      \
-		      : "memory", "cc", "r10", "r11", "cx");		      \
-    __status;								      \
+    INTERNAL_SYSCALL_DECL (__err);					      \
+    int __op = FUTEX_WAIT_REQUEUE_PI | clockbit;			      \
+									      \
+    INTERNAL_SYSCALL (futex, __err, 5, (futexp),			      \
+		      __lll_private_flag (__op, private),		      \
+		      (val), (timespec), mutex); 			      \
   })
 
+#define lll_futex_cmp_requeue_pi(futexp, nr_wake, nr_move, mutex, val, priv)  \
+  ({									      \
+    INTERNAL_SYSCALL_DECL (__err);					      \
+    long int __ret;							      \
+									      \
+    __ret = INTERNAL_SYSCALL (futex, __err, 6, (futexp),		      \
+			      __lll_private_flag (FUTEX_CMP_REQUEUE_PI, priv),\
+			      (nr_wake), (nr_move), (mutex), (val));	      \
+    INTERNAL_SYSCALL_ERROR_P (__ret, __err);				      \
+  })
 
-/* NB: in the lll_trylock macro we simply return the value in %eax
-   after the cmpxchg instruction.  In case the operation succeded this
-   value is zero.  In case the operation failed, the cmpxchg instruction
-   has loaded the current value of the memory work which is guaranteed
-   to be nonzero.  */
-#if defined NOT_IN_libc || defined UP
-# define __lll_trylock_asm LOCK_INSTR "cmpxchgl %2, %1"
-#else
-# define __lll_trylock_asm "cmpl $0, __libc_multiple_threads(%%rip)\n\t"      \
-			   "je 0f\n\t"					      \
-			   "lock; cmpxchgl %2, %1\n\t"			      \
-			   "jmp 1f\n\t"					      \
-			   "0:\tcmpxchgl %2, %1\n\t"			      \
-			   "1:"
-#endif
 
-#define lll_trylock(futex) \
-  ({ int ret;								      \
-     __asm __volatile (__lll_trylock_asm				      \
-		       : "=a" (ret), "=m" (futex)			      \
-		       : "r" (LLL_LOCK_INITIALIZER_LOCKED), "m" (futex),      \
-			 "0" (LLL_LOCK_INITIALIZER)			      \
-		       : "memory");					      \
-     ret; })
-
-#define lll_robust_trylock(futex, id) \
-  ({ int ret;								      \
-     __asm __volatile (LOCK_INSTR "cmpxchgl %2, %1"			      \
-		       : "=a" (ret), "=m" (futex)			      \
-		       : "r" (id), "m" (futex),	"0" (LLL_LOCK_INITIALIZER)    \
-		       : "memory");					      \
-     ret; })
-
-#define lll_cond_trylock(futex) \
-  ({ int ret;								      \
-     __asm __volatile (LOCK_INSTR "cmpxchgl %2, %1"			      \
-		       : "=a" (ret), "=m" (futex)			      \
-		       : "r" (LLL_LOCK_INITIALIZER_WAITERS),		      \
-			 "m" (futex), "0" (LLL_LOCK_INITIALIZER)	      \
-		       : "memory");					      \
-     ret; })
-
-#if defined NOT_IN_libc || defined UP
-# define __lll_lock_asm_start LOCK_INSTR "cmpxchgl %4, %2\n\t"		      \
-			      "jnz 1f\n\t"
-#else
-# define __lll_lock_asm_start "cmpl $0, __libc_multiple_threads(%%rip)\n\t"   \
-			      "je 0f\n\t"				      \
-			      "lock; cmpxchgl %4, %2\n\t"		      \
-			      "jnz 1f\n\t"				      \
-			      "jmp 24f\n"				      \
-			      "0:\tcmpxchgl %4, %2\n\t"			      \
-			      "jnz 1f\n\t"
+#define lll_trylock(lock)	\
+  atomic_compare_and_exchange_val_acq(&(lock), 1, 0)
+
+#define lll_cond_trylock(lock)	\
+  atomic_compare_and_exchange_val_acq(&(lock), 2, 0)
+
+#define __lll_robust_trylock(futex, id) \
+  (atomic_compare_and_exchange_val_acq (futex, id, 0) != 0)
+#define lll_robust_trylock(lock, id) \
+  __lll_robust_trylock (&(lock), id)
+
+#ifndef __ASSEMBLER__
+extern void __lll_lock_wait_private (int *futex) attribute_hidden;
+extern void __lll_lock_wait (int *futex, int private) attribute_hidden;
+extern int __lll_robust_lock_wait (int *futex, int private) attribute_hidden;
 #endif
 
-#define lll_lock(futex, private) \
-  (void)								      \
-    ({ int ignore1, ignore2, ignore3;					      \
-       if (__builtin_constant_p (private) && (private) == LLL_PRIVATE)	      \
-	 __asm __volatile (__lll_lock_asm_start				      \
-			   ".subsection 1\n\t"				      \
-			   ".type _L_lock_%=, @function\n"		      \
-			   "_L_lock_%=:\n"				      \
-			   "1:\tlea %2, %%" RDI_LP "\n"			      \
-			   "2:\tsub $128, %%" RSP_LP "\n"		      \
-			   "3:\tcallq __lll_lock_wait_private\n"	      \
-			   "4:\tadd $128, %%" RSP_LP "\n"		      \
-			   "5:\tjmp 24f\n"				      \
-			   "6:\t.size _L_lock_%=, 6b-1b\n\t"		      \
-			   ".previous\n"				      \
-			   LLL_STUB_UNWIND_INFO_5			      \
-			   "24:"					      \
-			   : "=S" (ignore1), "=&D" (ignore2), "=m" (futex),   \
-			     "=a" (ignore3)				      \
-			   : "0" (1), "m" (futex), "3" (0)		      \
-			   : "cx", "r11", "cc", "memory");		      \
-       else								      \
-	 __asm __volatile (__lll_lock_asm_start				      \
-			   ".subsection 1\n\t"				      \
-			   ".type _L_lock_%=, @function\n"		      \
-			   "_L_lock_%=:\n"				      \
-			   "1:\tlea %2, %%" RDI_LP "\n"			      \
-			   "2:\tsub $128, %%" RSP_LP "\n"		      \
-			   "3:\tcallq __lll_lock_wait\n"		      \
-			   "4:\tadd $128, %%" RSP_LP "\n"		      \
-			   "5:\tjmp 24f\n"				      \
-			   "6:\t.size _L_lock_%=, 6b-1b\n\t"		      \
-			   ".previous\n"				      \
-			   LLL_STUB_UNWIND_INFO_5			      \
-			   "24:"					      \
-			   : "=S" (ignore1), "=D" (ignore2), "=m" (futex),    \
-			     "=a" (ignore3)				      \
-			   : "1" (1), "m" (futex), "3" (0), "0" (private)     \
-			   : "cx", "r11", "cc", "memory");		      \
-    })									      \
+#define __lll_lock(futex, private)					      \
+  ((void) ({								      \
+    int *__futex = (futex);						      \
+    if (__builtin_expect (atomic_compare_and_exchange_val_acq (__futex,       \
+								1, 0), 0))    \
+      {									      \
+	if (__builtin_constant_p (private) && (private) == LLL_PRIVATE)	      \
+	  __lll_lock_wait_private (__futex);				      \
+	else								      \
+	  __lll_lock_wait (__futex, private);				      \
+      }									      \
+  }))
+#define lll_lock(futex, private) __lll_lock (&(futex), private)
+
 
+#define __lll_robust_lock(futex, id, private)				      \
+  ({									      \
+    int *__futex = (futex);						      \
+    int __val = 0;							      \
+									      \
+    if (__builtin_expect (atomic_compare_and_exchange_bool_acq (__futex, id,  \
+								0), 0))	      \
+      __val = __lll_robust_lock_wait (__futex, private);		      \
+    __val;								      \
+  })
 #define lll_robust_lock(futex, id, private) \
-  ({ int result, ignore1, ignore2;					      \
-    __asm __volatile (LOCK_INSTR "cmpxchgl %4, %2\n\t"			      \
-		      "jnz 1f\n\t"					      \
-		      ".subsection 1\n\t"				      \
-		      ".type _L_robust_lock_%=, @function\n"		      \
-		      "_L_robust_lock_%=:\n"				      \
-		      "1:\tlea %2, %%" RDI_LP "\n"			      \
-		      "2:\tsub $128, %%" RSP_LP "\n"			      \
-		      "3:\tcallq __lll_robust_lock_wait\n"		      \
-		      "4:\tadd $128, %%" RSP_LP "\n"			      \
-		      "5:\tjmp 24f\n"					      \
-		      "6:\t.size _L_robust_lock_%=, 6b-1b\n\t"		      \
-		      ".previous\n"					      \
-		      LLL_STUB_UNWIND_INFO_5				      \
-		      "24:"						      \
-		      : "=S" (ignore1), "=D" (ignore2), "=m" (futex),	      \
-			"=a" (result)					      \
-		      : "1" (id), "m" (futex), "3" (0), "0" (private)	      \
-		      : "cx", "r11", "cc", "memory");			      \
-    result; })
-
-#define lll_cond_lock(futex, private) \
-  (void)								      \
-    ({ int ignore1, ignore2, ignore3;					      \
-       __asm __volatile (LOCK_INSTR "cmpxchgl %4, %2\n\t"		      \
-			 "jnz 1f\n\t"					      \
-			 ".subsection 1\n\t"				      \
-			 ".type _L_cond_lock_%=, @function\n"		      \
-			 "_L_cond_lock_%=:\n"				      \
-			 "1:\tlea %2, %%" RDI_LP "\n"			      \
-			 "2:\tsub $128, %%" RSP_LP "\n"			      \
-			 "3:\tcallq __lll_lock_wait\n"			      \
-			 "4:\tadd $128, %%" RSP_LP "\n"			      \
-			 "5:\tjmp 24f\n"				      \
-			 "6:\t.size _L_cond_lock_%=, 6b-1b\n\t"		      \
-			 ".previous\n"					      \
-			 LLL_STUB_UNWIND_INFO_5				      \
-			 "24:"						      \
-			 : "=S" (ignore1), "=D" (ignore2), "=m" (futex),      \
-			   "=a" (ignore3)				      \
-			 : "1" (2), "m" (futex), "3" (0), "0" (private)	      \
-			 : "cx", "r11", "cc", "memory");		      \
-    })
+  __lll_robust_lock (&(futex), id, private)
+
+
+#define __lll_cond_lock(futex, private)					      \
+  ((void) ({								      \
+    int *__futex = (futex);						      \
+    if (__builtin_expect (atomic_exchange_acq (__futex, 2), 0))		      \
+      __lll_lock_wait (__futex, private);				      \
+  }))
+#define lll_cond_lock(futex, private) __lll_cond_lock (&(futex), private)
+
 
 #define lll_robust_cond_lock(futex, id, private) \
-  ({ int result, ignore1, ignore2;					      \
-    __asm __volatile (LOCK_INSTR "cmpxchgl %4, %2\n\t"			      \
-		      "jnz 1f\n\t"					      \
-		      ".subsection 1\n\t"				      \
-		      ".type _L_robust_cond_lock_%=, @function\n"	      \
-		      "_L_robust_cond_lock_%=:\n"			      \
-		      "1:\tlea %2, %%" RDI_LP "\n"			      \
-		      "2:\tsub $128, %%" RSP_LP "\n"			      \
-		      "3:\tcallq __lll_robust_lock_wait\n"		      \
-		      "4:\tadd $128, %%" RSP_LP "\n"			      \
-		      "5:\tjmp 24f\n"					      \
-		      "6:\t.size _L_robust_cond_lock_%=, 6b-1b\n\t"	      \
-		      ".previous\n"					      \
-		      LLL_STUB_UNWIND_INFO_5				      \
-		      "24:"						      \
-		      : "=S" (ignore1), "=D" (ignore2), "=m" (futex),	      \
-			"=a" (result)					      \
-		      : "1" (id | FUTEX_WAITERS), "m" (futex), "3" (0),	      \
-			"0" (private)					      \
-		      : "cx", "r11", "cc", "memory");			      \
-    result; })
-
-#define lll_timedlock(futex, timeout, private) \
-  ({ int result, ignore1, ignore2, ignore3;				      \
-     __asm __volatile (LOCK_INSTR "cmpxchgl %1, %4\n\t"			      \
-		       "jnz 1f\n\t"					      \
-		       ".subsection 1\n\t"				      \
-		       ".type _L_timedlock_%=, @function\n"		      \
-		       "_L_timedlock_%=:\n"				      \
-		       "1:\tlea %4, %%" RDI_LP "\n"			      \
-		       "0:\tmov %8, %%" RDX_LP "\n"			      \
-		       "2:\tsub $128, %%" RSP_LP "\n"			      \
-		       "3:\tcallq __lll_timedlock_wait\n"		      \
-		       "4:\tadd $128, %%" RSP_LP "\n"			      \
-		       "5:\tjmp 24f\n"					      \
-		       "6:\t.size _L_timedlock_%=, 6b-1b\n\t"		      \
-		       ".previous\n"					      \
-		       LLL_STUB_UNWIND_INFO_6				      \
-		       "24:"						      \
-		       : "=a" (result), "=D" (ignore1), "=S" (ignore2),	      \
-			 "=&d" (ignore3), "=m" (futex)			      \
-		       : "0" (0), "1" (1), "m" (futex), "m" (timeout),	      \
-			 "2" (private)					      \
-		       : "memory", "cx", "cc", "r10", "r11");		      \
-     result; })
-
-extern int __lll_timedlock_elision (int *futex, short *adapt_count,
-					 const struct timespec *timeout,
-					 int private) attribute_hidden;
-
-#define lll_timedlock_elision(futex, adapt_count, timeout, private)	\
-  __lll_timedlock_elision(&(futex), &(adapt_count), timeout, private)
-
-#define lll_robust_timedlock(futex, timeout, id, private) \
-  ({ int result, ignore1, ignore2, ignore3;				      \
-     __asm __volatile (LOCK_INSTR "cmpxchgl %1, %4\n\t"			      \
-		       "jnz 1f\n\t"					      \
-		       ".subsection 1\n\t"				      \
-		       ".type _L_robust_timedlock_%=, @function\n"	      \
-		       "_L_robust_timedlock_%=:\n"			      \
-		       "1:\tlea %4, %%" RDI_LP "\n"			      \
-		       "0:\tmov %8, %%" RDX_LP "\n"			      \
-		       "2:\tsub $128, %%" RSP_LP "\n"			      \
-		       "3:\tcallq __lll_robust_timedlock_wait\n"	      \
-		       "4:\tadd $128, %%" RSP_LP "\n"			      \
-		       "5:\tjmp 24f\n"					      \
-		       "6:\t.size _L_robust_timedlock_%=, 6b-1b\n\t"	      \
-		       ".previous\n"					      \
-		       LLL_STUB_UNWIND_INFO_6				      \
-		       "24:"						      \
-		       : "=a" (result), "=D" (ignore1), "=S" (ignore2),       \
-			 "=&d" (ignore3), "=m" (futex)			      \
-		       : "0" (0), "1" (id), "m" (futex), "m" (timeout),	      \
-			 "2" (private)					      \
-		       : "memory", "cx", "cc", "r10", "r11");		      \
-     result; })
-
-#if defined NOT_IN_libc || defined UP
-# define __lll_unlock_asm_start LOCK_INSTR "decl %0\n\t"		      \
-				"jne 1f\n\t"
-#else
-# define __lll_unlock_asm_start "cmpl $0, __libc_multiple_threads(%%rip)\n\t" \
-				"je 0f\n\t"				      \
-				"lock; decl %0\n\t"			      \
-				"jne 1f\n\t"				      \
-				"jmp 24f\n\t"				      \
-				"0:\tdecl %0\n\t"			      \
-				"jne 1f\n\t"
+  __lll_robust_lock (&(futex), (id) | FUTEX_WAITERS, private)
+
+
+#ifndef __ASSEMBLER__
+extern int __lll_timedlock_wait (int *futex, const struct timespec *,
+				 int private) attribute_hidden;
+extern int __lll_robust_timedlock_wait (int *futex, const struct timespec *,
+					int private) attribute_hidden;
 #endif
 
-#define lll_unlock(futex, private) \
-  (void)								      \
-    ({ int ignore;							      \
-       if (__builtin_constant_p (private) && (private) == LLL_PRIVATE)	      \
-	 __asm __volatile (__lll_unlock_asm_start			      \
-			   ".subsection 1\n\t"				      \
-			   ".type _L_unlock_%=, @function\n"		      \
-			   "_L_unlock_%=:\n"				      \
-			   "1:\tlea %0, %%" RDI_LP "\n"			      \
-			   "2:\tsub $128, %%" RSP_LP "\n"		      \
-			   "3:\tcallq __lll_unlock_wake_private\n"	      \
-			   "4:\tadd $128, %%" RSP_LP "\n"		      \
-			   "5:\tjmp 24f\n"				      \
-			   "6:\t.size _L_unlock_%=, 6b-1b\n\t"		      \
-			   ".previous\n"				      \
-			   LLL_STUB_UNWIND_INFO_5			      \
-			   "24:"					      \
-			   : "=m" (futex), "=&D" (ignore)		      \
-			   : "m" (futex)				      \
-			   : "ax", "cx", "r11", "cc", "memory");	      \
-       else								      \
-	 __asm __volatile (__lll_unlock_asm_start			      \
-			   ".subsection 1\n\t"				      \
-			   ".type _L_unlock_%=, @function\n"		      \
-			   "_L_unlock_%=:\n"				      \
-			   "1:\tlea %0, %%" RDI_LP "\n"			      \
-			   "2:\tsub $128, %%" RSP_LP "\n"		      \
-			   "3:\tcallq __lll_unlock_wake\n"		      \
-			   "4:\tadd $128, %%" RSP_LP "\n"		      \
-			   "5:\tjmp 24f\n"				      \
-			   "6:\t.size _L_unlock_%=, 6b-1b\n\t"		      \
-			   ".previous\n"				      \
-			   LLL_STUB_UNWIND_INFO_5			      \
-			   "24:"					      \
-			   : "=m" (futex), "=&D" (ignore)		      \
-			   : "m" (futex), "S" (private)			      \
-			   : "ax", "cx", "r11", "cc", "memory");	      \
+#define __lll_timedlock(futex, abstime, private)			      \
+  ({									      \
+     int *__futex = (futex);						      \
+     int __val = 0;							      \
+									      \
+     if (__builtin_expect (atomic_exchange_acq (__futex, 1), 0))	      \
+       __val = __lll_timedlock_wait (__futex, abstime, private);	      \
+     __val;								      \
+  })
+#define lll_timedlock(futex, abstime, private) \
+  __lll_timedlock (&(futex), abstime, private)
+
+
+#define __lll_robust_timedlock(futex, abstime, id, private)		      \
+  ({									      \
+    int *__futex = (futex);						      \
+    int __val = 0;							      \
+									      \
+    if (__builtin_expect (atomic_compare_and_exchange_bool_acq (__futex, id,  \
+								0), 0))	      \
+      __val = __lll_robust_timedlock_wait (__futex, abstime, private);	      \
+    __val;								      \
+  })
+#define lll_robust_timedlock(futex, abstime, id, private) \
+  __lll_robust_timedlock (&(futex), abstime, id, private)
+
+
+#define __lll_unlock(futex, private) \
+  (void)							\
+    ({ int *__futex = (futex);					\
+       int __oldval = atomic_exchange_rel (__futex, 0);		\
+       if (__builtin_expect (__oldval > 1, 0))			\
+	 lll_futex_wake (__futex, 1, private);			\
     })
+#define lll_unlock(futex, private) __lll_unlock(&(futex), private)
 
-#define lll_robust_unlock(futex, private) \
-  do									      \
-    {									      \
-      int ignore;							      \
-      __asm __volatile (LOCK_INSTR "andl %2, %0\n\t"			      \
-			"jne 1f\n\t"					      \
-			".subsection 1\n\t"				      \
-			".type _L_robust_unlock_%=, @function\n"	      \
-			"_L_robust_unlock_%=:\n"			      \
-			"1:\tlea %0, %%" RDI_LP "\n"			      \
-			"2:\tsub $128, %%" RSP_LP "\n"			      \
-			"3:\tcallq __lll_unlock_wake\n"			      \
-			"4:\tadd $128, %%" RSP_LP "\n"			      \
-			"5:\tjmp 24f\n"					      \
-			"6:\t.size _L_robust_unlock_%=, 6b-1b\n\t"	      \
-			".previous\n"					      \
-			LLL_STUB_UNWIND_INFO_5				      \
-			"24:"						      \
-			: "=m" (futex), "=&D" (ignore)			      \
-			: "i" (FUTEX_WAITERS), "m" (futex),		      \
-			  "S" (private)					      \
-			: "ax", "cx", "r11", "cc", "memory");		      \
-    }									      \
-  while (0)
 
-#define lll_robust_dead(futex, private) \
-  do									      \
-    {									      \
-      int ignore;							      \
-      __asm __volatile (LOCK_INSTR "orl %3, (%2)\n\t"			      \
-			"syscall"					      \
-			: "=m" (futex), "=a" (ignore)			      \
-			: "D" (&(futex)), "i" (FUTEX_OWNER_DIED),	      \
-			  "S" (__lll_private_flag (FUTEX_WAKE, private)),     \
-			  "1" (__NR_futex), "d" (1)			      \
-			: "cx", "r11", "cc", "memory");			      \
-    }									      \
-  while (0)
+#define __lll_robust_unlock(futex, private) \
+  (void)							\
+    ({ int *__futex = (futex);					\
+       int __oldval = atomic_exchange_rel (__futex, 0);		\
+       if (__builtin_expect (__oldval & FUTEX_WAITERS, 0))	\
+	 lll_futex_wake (__futex, 1, private);			\
+    })
+#define lll_robust_unlock(futex, private) \
+  __lll_robust_unlock(&(futex), private)
 
-/* Returns non-zero if error happened, zero if success.  */
-#define lll_futex_requeue(ftx, nr_wake, nr_move, mutex, val, private) \
-  ({ int __res;								      \
-     register int __nr_move __asm ("r10") = nr_move;			      \
-     register void *__mutex __asm ("r8") = mutex;			      \
-     register int __val __asm ("r9") = val;				      \
-     __asm __volatile ("syscall"					      \
-		       : "=a" (__res)					      \
-		       : "0" (__NR_futex), "D" ((void *) ftx),		      \
-			 "S" (__lll_private_flag (FUTEX_CMP_REQUEUE,	      \
-						  private)), "d" (nr_wake),   \
-			 "r" (__nr_move), "r" (__mutex), "r" (__val)	      \
-		       : "cx", "r11", "cc", "memory");			      \
-     __res < 0; })
 
 #define lll_islocked(futex) \
-  (futex != LLL_LOCK_INITIALIZER)
+  (futex != 0)
 
 
+/* Our internal lock implementation is identical to the binary-compatible
+   mutex implementation. */
+
+/* Initializers for lock.  */
+#define LLL_LOCK_INITIALIZER		(0)
+#define LLL_LOCK_INITIALIZER_LOCKED	(1)
+
+/* The states of a lock are:
+    0  -  untaken
+    1  -  taken by one user
+   >1  -  taken by more users */
+
 /* The kernel notifies a process which uses CLONE_CHILD_CLEARTID via futex
    wakeup when the clone terminates.  The memory location contains the
    thread ID while the clone is running and is reset to zero
-   afterwards.
-
-   The macro parameter must not have any side effect.  */
-#define lll_wait_tid(tid) \
-  do {									      \
-    int __ignore;							      \
-    register __typeof (tid) _tid asm ("edx") = (tid);			      \
-    if (_tid != 0)							      \
-      __asm __volatile ("xorq %%r10, %%r10\n\t"				      \
-			"1:\tmovq %2, %%rax\n\t"			      \
-			"syscall\n\t"					      \
-			"cmpl $0, (%%rdi)\n\t"				      \
-			"jne 1b"					      \
-			: "=&a" (__ignore)				      \
-			: "S" (FUTEX_WAIT), "i" (SYS_futex), "D" (&tid),      \
-			  "d" (_tid)					      \
-			: "memory", "cc", "r10", "r11", "cx");		      \
+   afterwards.	*/
+#define lll_wait_tid(tid)						\
+  do {									\
+    __typeof (tid) __tid;						\
+    /* we must perform the call because the kernel will introduce */    \
+    /* a datarace by clearing the tids */				\
+    if ((__tid = atomic_load(tid)) != 0 || mvee_should_sync_tid())	\
+      syscall(__NR_futex, &(tid), __lll_private_flag(mvee_should_sync_tid() ? MVEE_FUTEX_WAIT_TID : FUTEX_WAIT, LLL_SHARED), __tid, NULL); \
   } while (0)
 
-extern int __lll_timedwait_tid (int *tid, const struct timespec *abstime)
+#ifndef __ASSEMBLER__
+extern int __lll_timedwait_tid (int *, const struct timespec *)
      attribute_hidden;
-#define lll_timedwait_tid(tid, abstime) \
-  ({									      \
-    int __result = 0;							      \
-    if (tid != 0)							      \
-      {									      \
-	if (abstime->tv_nsec < 0 || abstime->tv_nsec >= 1000000000)	      \
-	  __result = EINVAL;						      \
-	else								      \
-	  __result = __lll_timedwait_tid (&tid, abstime);		      \
-      }									      \
-    __result; })
-
-extern int __lll_lock_elision (int *futex, short *adapt_count, int private)
-  attribute_hidden;
-
-extern int __lll_unlock_elision (int *lock, int private)
-  attribute_hidden;
-
-extern int __lll_trylock_elision (int *lock, short *adapt_count)
-  attribute_hidden;
-
-#define lll_lock_elision(futex, adapt_count, private) \
-  __lll_lock_elision (&(futex), &(adapt_count), private)
-#define lll_unlock_elision(futex, private) \
-  __lll_unlock_elision (&(futex), private)
-#define lll_trylock_elision(futex, adapt_count) \
-  __lll_trylock_elision (&(futex), &(adapt_count))
+#endif
 
-#endif  /* !__ASSEMBLER__ */
+#define lll_timedwait_tid(tid, abstime) \
+  ({							\
+    int __res = 0;					\
+    if (atomic_load(tid) != 0 || mvee_should_sync_tid())	\
+      __res = __lll_timedwait_tid (&(tid), (abstime));	\
+    __res;						\
+  })
 
 #endif	/* lowlevellock.h */
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/lowlevellock.S glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/lowlevellock.S
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/lowlevellock.S	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/lowlevellock.S	1970-01-01 01:00:00.000000000 +0100
@@ -1,462 +0,0 @@
-/* Copyright (C) 2002-2014 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include <sysdep.h>
-#include <pthread-errnos.h>
-#include <kernel-features.h>
-#include <lowlevellock.h>
-
-#include <stap-probe.h>
-
-	.text
-
-#ifdef __ASSUME_PRIVATE_FUTEX
-# define LOAD_PRIVATE_FUTEX_WAIT(reg) \
-	movl	$(FUTEX_WAIT | FUTEX_PRIVATE_FLAG), reg
-# define LOAD_PRIVATE_FUTEX_WAKE(reg) \
-	movl	$(FUTEX_WAKE | FUTEX_PRIVATE_FLAG), reg
-# define LOAD_FUTEX_WAIT(reg) \
-	xorl	$(FUTEX_WAIT | FUTEX_PRIVATE_FLAG), reg
-# define LOAD_FUTEX_WAIT_ABS(reg) \
-	xorl	$(FUTEX_WAIT_BITSET | FUTEX_PRIVATE_FLAG | FUTEX_CLOCK_REALTIME), reg
-# define LOAD_FUTEX_WAKE(reg) \
-	xorl	$(FUTEX_WAKE | FUTEX_PRIVATE_FLAG), reg
-#else
-# if FUTEX_WAIT == 0
-#  define LOAD_PRIVATE_FUTEX_WAIT(reg) \
-	movl    %fs:PRIVATE_FUTEX, reg
-# else
-#  define LOAD_PRIVATE_FUTEX_WAIT(reg) \
-	movl	%fs:PRIVATE_FUTEX, reg ; \
-	orl	$FUTEX_WAIT, reg
-# endif
-# define LOAD_PRIVATE_FUTEX_WAKE(reg) \
-	movl    %fs:PRIVATE_FUTEX, reg ; \
-	orl     $FUTEX_WAKE, reg
-# if FUTEX_WAIT == 0
-#  define LOAD_FUTEX_WAIT(reg) \
-	xorl	$FUTEX_PRIVATE_FLAG, reg ; \
-	andl	%fs:PRIVATE_FUTEX, reg
-# else
-#  define LOAD_FUTEX_WAIT(reg) \
-	xorl	$FUTEX_PRIVATE_FLAG, reg ; \
-	andl	%fs:PRIVATE_FUTEX, reg ; \
-	orl	$FUTEX_WAIT, reg
-# endif
-# define LOAD_FUTEX_WAIT_ABS(reg) \
-	xorl	$FUTEX_PRIVATE_FLAG, reg ; \
-	andl	%fs:PRIVATE_FUTEX, reg ; \
-	orl	$FUTEX_WAIT_BITSET | FUTEX_CLOCK_REALTIME, reg
-# define LOAD_FUTEX_WAKE(reg) \
-	xorl	$FUTEX_PRIVATE_FLAG, reg ; \
-	andl	%fs:PRIVATE_FUTEX, reg ; \
-	orl	$FUTEX_WAKE, reg
-#endif
-
-
-	.globl	__lll_lock_wait_private
-	.type	__lll_lock_wait_private,@function
-	.hidden	__lll_lock_wait_private
-	.align	16
-__lll_lock_wait_private:
-	cfi_startproc
-	pushq	%r10
-	cfi_adjust_cfa_offset(8)
-	pushq	%rdx
-	cfi_adjust_cfa_offset(8)
-	cfi_offset(%r10, -16)
-	cfi_offset(%rdx, -24)
-	xorq	%r10, %r10	/* No timeout.  */
-	movl	$2, %edx
-	LOAD_PRIVATE_FUTEX_WAIT (%esi)
-
-	cmpl	%edx, %eax	/* NB:	 %edx == 2 */
-	jne	2f
-
-1:	LIBC_PROBE (lll_lock_wait_private, 1, %rdi)
-	movl	$SYS_futex, %eax
-	syscall
-
-2:	movl	%edx, %eax
-	xchgl	%eax, (%rdi)	/* NB:	 lock is implied */
-
-	testl	%eax, %eax
-	jnz	1b
-
-	popq	%rdx
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%rdx)
-	popq	%r10
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r10)
-	retq
-	cfi_endproc
-	.size	__lll_lock_wait_private,.-__lll_lock_wait_private
-
-#ifdef NOT_IN_libc
-	.globl	__lll_lock_wait
-	.type	__lll_lock_wait,@function
-	.hidden	__lll_lock_wait
-	.align	16
-__lll_lock_wait:
-	cfi_startproc
-	pushq	%r10
-	cfi_adjust_cfa_offset(8)
-	pushq	%rdx
-	cfi_adjust_cfa_offset(8)
-	cfi_offset(%r10, -16)
-	cfi_offset(%rdx, -24)
-	xorq	%r10, %r10	/* No timeout.  */
-	movl	$2, %edx
-	LOAD_FUTEX_WAIT (%esi)
-
-	cmpl	%edx, %eax	/* NB:	 %edx == 2 */
-	jne	2f
-
-1:	LIBC_PROBE (lll_lock_wait, 2, %rdi, %rsi)
-	movl	$SYS_futex, %eax
-	syscall
-
-2:	movl	%edx, %eax
-	xchgl	%eax, (%rdi)	/* NB:	 lock is implied */
-
-	testl	%eax, %eax
-	jnz	1b
-
-	popq	%rdx
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%rdx)
-	popq	%r10
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r10)
-	retq
-	cfi_endproc
-	.size	__lll_lock_wait,.-__lll_lock_wait
-
-	/*      %rdi: futex
-		%rsi: flags
-		%rdx: timeout
-		%eax: futex value
-	*/
-	.globl	__lll_timedlock_wait
-	.type	__lll_timedlock_wait,@function
-	.hidden	__lll_timedlock_wait
-	.align	16
-__lll_timedlock_wait:
-	cfi_startproc
-# ifndef __ASSUME_FUTEX_CLOCK_REALTIME
-#  ifdef PIC
-	cmpl	$0, __have_futex_clock_realtime(%rip)
-#  else
-	cmpl	$0, __have_futex_clock_realtime
-#  endif
-	je	.Lreltmo
-# endif
-
-	cmpq	$0, (%rdx)
-	js	5f
-
-	pushq	%r9
-	cfi_adjust_cfa_offset(8)
-	cfi_rel_offset(%r9, 0)
-
-	movq	%rdx, %r10
-	movl	$0xffffffff, %r9d
-	LOAD_FUTEX_WAIT_ABS (%esi)
-
-	movl	$2, %edx
-	cmpl	%edx, %eax
-	jne	2f
-
-1:	movl	$SYS_futex, %eax
-	movl	$2, %edx
-	syscall
-
-2:	xchgl	%edx, (%rdi)	/* NB:   lock is implied */
-
-	testl	%edx, %edx
-	jz	3f
-
-	cmpl	$-ETIMEDOUT, %eax
-	je	4f
-	cmpl	$-EINVAL, %eax
-	jne	1b
-4:	movl	%eax, %edx
-	negl	%edx
-
-3:	movl	%edx, %eax
-	popq	%r9
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r9)
-	retq
-
-5:	movl	$ETIMEDOUT, %eax
-	retq
-
-# ifndef __ASSUME_FUTEX_CLOCK_REALTIME
-.Lreltmo:
-	/* Check for a valid timeout value.  */
-	cmpq	$1000000000, 8(%rdx)
-	jae	3f
-
-	pushq	%r8
-	cfi_adjust_cfa_offset(8)
-	pushq	%r9
-	cfi_adjust_cfa_offset(8)
-	pushq	%r12
-	cfi_adjust_cfa_offset(8)
-	pushq	%r13
-	cfi_adjust_cfa_offset(8)
-	pushq	%r14
-	cfi_adjust_cfa_offset(8)
-	cfi_offset(%r8, -16)
-	cfi_offset(%r9, -24)
-	cfi_offset(%r12, -32)
-	cfi_offset(%r13, -40)
-	cfi_offset(%r14, -48)
-	pushq	%rsi
-	cfi_adjust_cfa_offset(8)
-
-	/* Stack frame for the timespec and timeval structs.  */
-	subq	$24, %rsp
-	cfi_adjust_cfa_offset(24)
-
-	movq	%rdi, %r12
-	movq	%rdx, %r13
-
-	movl	$2, %edx
-	xchgl	%edx, (%r12)
-
-	testl	%edx, %edx
-	je	6f
-
-1:
-	/* Get current time.  */
-	movq	%rsp, %rdi
-	xorl	%esi, %esi
-	/* This call works because we directly jump to a system call entry
-	   which preserves all the registers.  */
-	call	JUMPTARGET(__gettimeofday)
-
-	/* Compute relative timeout.  */
-	movq	8(%rsp), %rax
-	movl	$1000, %edi
-	mul	%rdi		/* Milli seconds to nano seconds.  */
-	movq	(%r13), %rdi
-	movq	8(%r13), %rsi
-	subq	(%rsp), %rdi
-	subq	%rax, %rsi
-	jns	4f
-	addq	$1000000000, %rsi
-	decq	%rdi
-4:	testq	%rdi, %rdi
-	js	2f		/* Time is already up.  */
-
-	/* Store relative timeout.  */
-	movq	%rdi, (%rsp)
-	movq	%rsi, 8(%rsp)
-
-	/* Futex call.  */
-	movl	$2, %edx
-	movl	$1, %eax
-	movq	%rsp, %r10
-	movl	24(%rsp), %esi
-	LOAD_FUTEX_WAIT (%esi)
-	movq	%r12, %rdi
-	movl	$SYS_futex, %eax
-	syscall
-
-	/* NB: %edx == 2 */
-	xchgl	%edx, (%r12)
-
-	testl	%edx, %edx
-	je	6f
-
-	cmpl	$-ETIMEDOUT, %eax
-	jne	1b
-2:	movl	$ETIMEDOUT, %edx
-
-6:	addq	$32, %rsp
-	cfi_adjust_cfa_offset(-32)
-	popq	%r14
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r14)
-	popq	%r13
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r13)
-	popq	%r12
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r12)
-	popq	%r9
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r9)
-	popq	%r8
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r8)
-	movl	%edx, %eax
-	retq
-
-3:	movl	$EINVAL, %eax
-	retq
-# endif
-	cfi_endproc
-	.size	__lll_timedlock_wait,.-__lll_timedlock_wait
-#endif
-
-
-	.globl	__lll_unlock_wake_private
-	.type	__lll_unlock_wake_private,@function
-	.hidden	__lll_unlock_wake_private
-	.align	16
-__lll_unlock_wake_private:
-	cfi_startproc
-	pushq	%rsi
-	cfi_adjust_cfa_offset(8)
-	pushq	%rdx
-	cfi_adjust_cfa_offset(8)
-	cfi_offset(%rsi, -16)
-	cfi_offset(%rdx, -24)
-
-	movl	$0, (%rdi)
-	LOAD_PRIVATE_FUTEX_WAKE (%esi)
-	movl	$1, %edx	/* Wake one thread.  */
-	movl	$SYS_futex, %eax
-	syscall
-
-	popq	%rdx
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%rdx)
-	popq	%rsi
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%rsi)
-	retq
-	cfi_endproc
-	.size	__lll_unlock_wake_private,.-__lll_unlock_wake_private
-
-#ifdef NOT_IN_libc
-	.globl	__lll_unlock_wake
-	.type	__lll_unlock_wake,@function
-	.hidden	__lll_unlock_wake
-	.align	16
-__lll_unlock_wake:
-	cfi_startproc
-	pushq	%rsi
-	cfi_adjust_cfa_offset(8)
-	pushq	%rdx
-	cfi_adjust_cfa_offset(8)
-	cfi_offset(%rsi, -16)
-	cfi_offset(%rdx, -24)
-
-	movl	$0, (%rdi)
-	LOAD_FUTEX_WAKE (%esi)
-	movl	$1, %edx	/* Wake one thread.  */
-	movl	$SYS_futex, %eax
-	syscall
-
-	popq	%rdx
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%rdx)
-	popq	%rsi
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%rsi)
-	retq
-	cfi_endproc
-	.size	__lll_unlock_wake,.-__lll_unlock_wake
-
-	.globl	__lll_timedwait_tid
-	.type	__lll_timedwait_tid,@function
-	.hidden	__lll_timedwait_tid
-	.align	16
-__lll_timedwait_tid:
-	cfi_startproc
-	pushq	%r12
-	cfi_adjust_cfa_offset(8)
-	pushq	%r13
-	cfi_adjust_cfa_offset(8)
-	cfi_offset(%r12, -16)
-	cfi_offset(%r13, -24)
-
-	movq	%rdi, %r12
-	movq	%rsi, %r13
-
-	subq	$16, %rsp
-	cfi_adjust_cfa_offset(16)
-
-	/* Get current time.  */
-2:	movq	%rsp, %rdi
-	xorl	%esi, %esi
-	/* This call works because we directly jump to a system call entry
-	   which preserves all the registers.  */
-	call	JUMPTARGET(__gettimeofday)
-
-	/* Compute relative timeout.  */
-	movq	8(%rsp), %rax
-	movl	$1000, %edi
-	mul	%rdi		/* Milli seconds to nano seconds.  */
-	movq	(%r13), %rdi
-	movq	8(%r13), %rsi
-	subq	(%rsp), %rdi
-	subq	%rax, %rsi
-	jns	5f
-	addq	$1000000000, %rsi
-	decq	%rdi
-5:	testq	%rdi, %rdi
-	js	6f		/* Time is already up.  */
-
-	movq	%rdi, (%rsp)	/* Store relative timeout.  */
-	movq	%rsi, 8(%rsp)
-
-	movl	(%r12), %edx
-	testl	%edx, %edx
-	jz	4f
-
-	movq	%rsp, %r10
-	/* XXX The kernel so far uses global futex for the wakeup at
-	   all times.  */
-#if FUTEX_WAIT == 0
-	xorl	%esi, %esi
-#else
-	movl	$FUTEX_WAIT, %esi
-#endif
-	movq	%r12, %rdi
-	movl	$SYS_futex, %eax
-	syscall
-
-	cmpl	$0, (%rdi)
-	jne	1f
-4:	xorl	%eax, %eax
-
-8:	addq	$16, %rsp
-	cfi_adjust_cfa_offset(-16)
-	popq	%r13
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r13)
-	popq	%r12
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r12)
-	retq
-
-	cfi_adjust_cfa_offset(32)
-1:	cmpq	$-ETIMEDOUT, %rax
-	jne	2b
-
-6:	movl	$ETIMEDOUT, %eax
-	jmp	8b
-	cfi_endproc
-	.size	__lll_timedwait_tid,.-__lll_timedwait_tid
-#endif
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/lowlevelrobustlock.S glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/lowlevelrobustlock.S
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/lowlevelrobustlock.S	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/lowlevelrobustlock.S	1970-01-01 01:00:00.000000000 +0100
@@ -1,306 +0,0 @@
-/* Copyright (C) 2002-2014 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include <sysdep.h>
-#include <pthread-errnos.h>
-#include <lowlevellock.h>
-#include <lowlevelrobustlock.h>
-#include <kernel-features.h>
-
-	.text
-
-#define FUTEX_WAITERS		0x80000000
-#define FUTEX_OWNER_DIED	0x40000000
-
-#ifdef __ASSUME_PRIVATE_FUTEX
-# define LOAD_FUTEX_WAIT(reg) \
-	xorl	$(FUTEX_WAIT | FUTEX_PRIVATE_FLAG), reg
-# define LOAD_FUTEX_WAIT_ABS(reg) \
-	xorl	$(FUTEX_WAIT_BITSET | FUTEX_PRIVATE_FLAG | FUTEX_CLOCK_REALTIME), reg
-#else
-# if FUTEX_WAIT == 0
-#  define LOAD_FUTEX_WAIT(reg) \
-	xorl	$FUTEX_PRIVATE_FLAG, reg ; \
-	andl	%fs:PRIVATE_FUTEX, reg
-# else
-#  define LOAD_FUTEX_WAIT(reg) \
-	xorl	$FUTEX_PRIVATE_FLAG, reg ; \
-	andl	%fs:PRIVATE_FUTEX, reg ; \
-	orl	$FUTEX_WAIT, reg
-# endif
-# define LOAD_FUTEX_WAIT_ABS(reg) \
-	xorl	$FUTEX_PRIVATE_FLAG, reg ; \
-	andl	%fs:PRIVATE_FUTEX, reg ; \
-	orl	$FUTEX_WAIT_BITSET | FUTEX_CLOCK_REALTIME, reg
-#endif
-
-
-	.globl	__lll_robust_lock_wait
-	.type	__lll_robust_lock_wait,@function
-	.hidden	__lll_robust_lock_wait
-	.align	16
-__lll_robust_lock_wait:
-	cfi_startproc
-	pushq	%r10
-	cfi_adjust_cfa_offset(8)
-	pushq	%rdx
-	cfi_adjust_cfa_offset(8)
-	cfi_offset(%r10, -16)
-	cfi_offset(%rdx, -24)
-
-	xorq	%r10, %r10	/* No timeout.  */
-	LOAD_FUTEX_WAIT (%esi)
-
-4:	movl	%eax, %edx
-	orl	$FUTEX_WAITERS, %edx
-
-	testl	$FUTEX_OWNER_DIED, %eax
-	jnz	3f
-
-	cmpl	%edx, %eax
-	je	1f
-
-	LOCK
-	cmpxchgl %edx, (%rdi)
-	jnz	2f
-
-1:	movl	$SYS_futex, %eax
-	syscall
-
-	movl	(%rdi), %eax
-
-2:	testl	%eax, %eax
-	jne	4b
-
-	movl	%fs:TID, %edx
-	orl	$FUTEX_WAITERS, %edx
-	LOCK
-	cmpxchgl %edx, (%rdi)
-	jnz	4b
-	/* NB:	 %rax == 0 */
-
-3:	popq	%rdx
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%rdx)
-	popq	%r10
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r10)
-	retq
-	cfi_endproc
-	.size	__lll_robust_lock_wait,.-__lll_robust_lock_wait
-
-
-	.globl	__lll_robust_timedlock_wait
-	.type	__lll_robust_timedlock_wait,@function
-	.hidden	__lll_robust_timedlock_wait
-	.align	16
-__lll_robust_timedlock_wait:
-	cfi_startproc
-# ifndef __ASSUME_FUTEX_CLOCK_REALTIME
-#  ifdef PIC
-	cmpl	$0, __have_futex_clock_realtime(%rip)
-#  else
-	cmpl	$0, __have_futex_clock_realtime
-#  endif
-	je	.Lreltmo
-# endif
-
-	cmpq	$0, (%rdx)
-	js	7f
-
-	pushq	%r9
-	cfi_adjust_cfa_offset(8)
-	cfi_rel_offset(%r9, 0)
-	movq	%rdx, %r10
-	movl	$0xffffffff, %r9d
-	LOAD_FUTEX_WAIT_ABS (%esi)
-
-1:	testl	$FUTEX_OWNER_DIED, %eax
-	jnz	3f
-
-	movl	%eax, %edx
-	orl	$FUTEX_WAITERS, %edx
-
-	cmpl	%eax, %edx
-	je	5f
-
-	LOCK
-	cmpxchgl %edx, (%rdi)
-	movq	$0, %rcx	/* Must use mov to avoid changing cc.  */
-	jnz	6f
-
-5:	movl	$SYS_futex, %eax
-	syscall
-	movl	%eax, %ecx
-
-	movl	(%rdi), %eax
-
-6:	testl	%eax, %eax
-	jne	2f
-
-	movl	%fs:TID, %edx
-	orl	$FUTEX_WAITERS, %edx
-	LOCK
-	cmpxchgl %edx, (%rdi)
-	jnz	2f
-
-3:	popq	%r9
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r9)
-	retq
-
-	cfi_adjust_cfa_offset(8)
-	cfi_rel_offset(%r9, 0)
-	/* Check whether the time expired.  */
-2:	cmpl	$-ETIMEDOUT, %ecx
-	je	4f
-	cmpl	$-EINVAL, %ecx
-	jne	1b
-
-4:	movl	%ecx, %eax
-	negl	%eax
-	jmp	3b
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r9)
-
-7:	movl	$ETIMEDOUT, %eax
-	retq
-
-
-# ifndef __ASSUME_FUTEX_CLOCK_REALTIME
-.Lreltmo:
-	/* Check for a valid timeout value.  */
-	cmpq	$1000000000, 8(%rdx)
-	jae	3f
-
-	pushq	%r8
-	cfi_adjust_cfa_offset(8)
-	pushq	%r9
-	cfi_adjust_cfa_offset(8)
-	pushq	%r12
-	cfi_adjust_cfa_offset(8)
-	pushq	%r13
-	cfi_adjust_cfa_offset(8)
-	cfi_offset(%r8, -16)
-	cfi_offset(%r9, -24)
-	cfi_offset(%r12, -32)
-	cfi_offset(%r13, -40)
-	pushq	%rsi
-	cfi_adjust_cfa_offset(8)
-
-	/* Stack frame for the timespec and timeval structs.  */
-	subq	$32, %rsp
-	cfi_adjust_cfa_offset(32)
-
-	movq	%rdi, %r12
-	movq	%rdx, %r13
-
-1:	movq	%rax, 16(%rsp)
-
-	/* Get current time.  */
-	movq	%rsp, %rdi
-	xorl	%esi, %esi
-	/* This call works because we directly jump to a system call entry
-	   which preserves all the registers.  */
-	call	JUMPTARGET(__gettimeofday)
-
-	/* Compute relative timeout.  */
-	movq	8(%rsp), %rax
-	movl	$1000, %edi
-	mul	%rdi		/* Milli seconds to nano seconds.  */
-	movq	(%r13), %rdi
-	movq	8(%r13), %rsi
-	subq	(%rsp), %rdi
-	subq	%rax, %rsi
-	jns	4f
-	addq	$1000000000, %rsi
-	decq	%rdi
-4:	testq	%rdi, %rdi
-	js	8f		/* Time is already up.  */
-
-	/* Futex call.  */
-	movq	%rdi, (%rsp)	/* Store relative timeout.  */
-	movq	%rsi, 8(%rsp)
-
-	movq	16(%rsp), %rdx
-	movl	%edx, %eax
-	orl	$FUTEX_WAITERS, %edx
-
-	testl	$FUTEX_OWNER_DIED, %eax
-	jnz	6f
-
-	cmpl	%eax, %edx
-	je	2f
-
-	LOCK
-	cmpxchgl %edx, (%r12)
-	movq	$0, %rcx	/* Must use mov to avoid changing cc.  */
-	jnz	5f
-
-2:	movq	%rsp, %r10
-	movl	32(%rsp), %esi
-	LOAD_FUTEX_WAIT (%esi)
-	movq	%r12, %rdi
-	movl	$SYS_futex, %eax
-	syscall
-	movq	%rax, %rcx
-
-	movl	(%r12), %eax
-
-5:	testl	%eax, %eax
-	jne	7f
-
-	movl	%fs:TID, %edx
-	orl	$FUTEX_WAITERS, %edx
-	LOCK
-	cmpxchgl %edx, (%r12)
-	jnz	7f
-
-6:	addq	$40, %rsp
-	cfi_adjust_cfa_offset(-40)
-	popq	%r13
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r13)
-	popq	%r12
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r12)
-	popq	%r9
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r9)
-	popq	%r8
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r8)
-	retq
-
-3:	movl	$EINVAL, %eax
-	retq
-
-	cfi_adjust_cfa_offset(72)
-	cfi_offset(%r8, -16)
-	cfi_offset(%r9, -24)
-	cfi_offset(%r12, -32)
-	cfi_offset(%r13, -40)
-	/* Check whether the time expired.  */
-7:	cmpl	$-ETIMEDOUT, %ecx
-	jne	1b
-
-8:	movl	$ETIMEDOUT, %eax
-	jmp	6b
-#endif
-	cfi_endproc
-	.size	__lll_robust_timedlock_wait,.-__lll_robust_timedlock_wait
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_barrier_wait.S glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_barrier_wait.S
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_barrier_wait.S	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_barrier_wait.S	1970-01-01 01:00:00.000000000 +0100
@@ -1,160 +0,0 @@
-/* Copyright (C) 2002-2014 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include <sysdep.h>
-#include <lowlevellock.h>
-#include <lowlevelbarrier.h>
-
-
-	.text
-
-	.globl	pthread_barrier_wait
-	.type	pthread_barrier_wait,@function
-	.align	16
-pthread_barrier_wait:
-	/* Get the mutex.  */
-	xorl	%eax, %eax
-	movl	$1, %esi
-	LOCK
-	cmpxchgl %esi, MUTEX(%rdi)
-	jnz	1f
-
-	/* One less waiter.  If this was the last one needed wake
-	   everybody.  */
-2:	decl	LEFT(%rdi)
-	je	3f
-
-	/* There are more threads to come.  */
-#if CURR_EVENT == 0
-	movl	(%rdi), %edx
-#else
-	movl	CURR_EVENT(%rdi), %edx
-#endif
-
-	/* Release the mutex.  */
-	LOCK
-	decl	MUTEX(%rdi)
-	jne	6f
-
-	/* Wait for the remaining threads.  The call will return immediately
-	   if the CURR_EVENT memory has meanwhile been changed.  */
-7:
-#if FUTEX_WAIT == 0
-	movl	PRIVATE(%rdi), %esi
-#else
-	movl	$FUTEX_WAIT, %esi
-	orl	PRIVATE(%rdi), %esi
-#endif
-	xorq	%r10, %r10
-8:	movl	$SYS_futex, %eax
-	syscall
-
-	/* Don't return on spurious wakeups.  The syscall does not change
-	   any register except %eax so there is no need to reload any of
-	   them.  */
-#if CURR_EVENT == 0
-	cmpl	%edx, (%rdi)
-#else
-	cmpl	%edx, CURR_EVENT(%rdi)
-#endif
-	je	8b
-
-	/* Increment LEFT.  If this brings the count back to the
-	   initial count unlock the object.  */
-	movl	$1, %edx
-	movl	INIT_COUNT(%rdi), %eax
-	LOCK
-	xaddl	%edx, LEFT(%rdi)
-	subl	$1, %eax
-	cmpl	%eax, %edx
-	jne,pt	10f
-
-	/* Release the mutex.  We cannot release the lock before
-	   waking the waiting threads since otherwise a new thread might
-	   arrive and gets waken up, too.  */
-	LOCK
-	decl	MUTEX(%rdi)
-	jne	9f
-
-10:	xorl	%eax, %eax		/* != PTHREAD_BARRIER_SERIAL_THREAD */
-
-	retq
-
-	/* The necessary number of threads arrived.  */
-3:
-#if CURR_EVENT == 0
-	incl	(%rdi)
-#else
-	incl	CURR_EVENT(%rdi)
-#endif
-
-	/* Wake up all waiters.  The count is a signed number in the kernel
-	   so 0x7fffffff is the highest value.  */
-	movl	$0x7fffffff, %edx
-	movl	$FUTEX_WAKE, %esi
-	orl	PRIVATE(%rdi), %esi
-	movl	$SYS_futex, %eax
-	syscall
-
-	/* Increment LEFT.  If this brings the count back to the
-	   initial count unlock the object.  */
-	movl	$1, %edx
-	movl	INIT_COUNT(%rdi), %eax
-	LOCK
-	xaddl	%edx, LEFT(%rdi)
-	subl	$1, %eax
-	cmpl	%eax, %edx
-	jne,pt	5f
-
-	/* Release the mutex.  We cannot release the lock before
-	   waking the waiting threads since otherwise a new thread might
-	   arrive and gets waken up, too.  */
-	LOCK
-	decl	MUTEX(%rdi)
-	jne	4f
-
-5:	orl	$-1, %eax		/* == PTHREAD_BARRIER_SERIAL_THREAD */
-
-	retq
-
-1:	movl	PRIVATE(%rdi), %esi
-	addq	$MUTEX, %rdi
-	xorl	$LLL_SHARED, %esi
-	callq	__lll_lock_wait
-	subq	$MUTEX, %rdi
-	jmp	2b
-
-4:	movl	PRIVATE(%rdi), %esi
-	addq	$MUTEX, %rdi
-	xorl	$LLL_SHARED, %esi
-	callq	__lll_unlock_wake
-	jmp	5b
-
-6:	movl	PRIVATE(%rdi), %esi
-	addq	$MUTEX, %rdi
-	xorl	$LLL_SHARED, %esi
-	callq	__lll_unlock_wake
-	subq	$MUTEX, %rdi
-	jmp	7b
-
-9:	movl	PRIVATE(%rdi), %esi
-	addq	$MUTEX, %rdi
-	xorl	$LLL_SHARED, %esi
-	callq	__lll_unlock_wake
-	jmp	10b
-	.size	pthread_barrier_wait,.-pthread_barrier_wait
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_broadcast.S glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_broadcast.S
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_broadcast.S	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_broadcast.S	1970-01-01 01:00:00.000000000 +0100
@@ -1,179 +0,0 @@
-/* Copyright (C) 2002-2014 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include <sysdep.h>
-#include <shlib-compat.h>
-#include <lowlevellock.h>
-#include <lowlevelcond.h>
-#include <kernel-features.h>
-#include <pthread-pi-defines.h>
-#include <pthread-errnos.h>
-#include <stap-probe.h>
-
-	.text
-
-	/* int pthread_cond_broadcast (pthread_cond_t *cond) */
-	.globl	__pthread_cond_broadcast
-	.type	__pthread_cond_broadcast, @function
-	.align	16
-__pthread_cond_broadcast:
-
-	LIBC_PROBE (cond_broadcast, 1, %rdi)
-
-	/* Get internal lock.  */
-	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-#if cond_lock == 0
-	cmpxchgl %esi, (%rdi)
-#else
-	cmpxchgl %esi, cond_lock(%rdi)
-#endif
-	jnz	1f
-
-2:	addq	$cond_futex, %rdi
-	movq	total_seq-cond_futex(%rdi), %r9
-	cmpq	wakeup_seq-cond_futex(%rdi), %r9
-	jna	4f
-
-	/* Cause all currently waiting threads to recognize they are
-	   woken up.  */
-	movq	%r9, wakeup_seq-cond_futex(%rdi)
-	movq	%r9, woken_seq-cond_futex(%rdi)
-	addq	%r9, %r9
-	movl	%r9d, (%rdi)
-	incl	broadcast_seq-cond_futex(%rdi)
-
-	/* Get the address of the mutex used.  */
-	mov	dep_mutex-cond_futex(%rdi), %R8_LP
-
-	/* Unlock.  */
-	LOCK
-	decl	cond_lock-cond_futex(%rdi)
-	jne	7f
-
-8:	cmp	$-1, %R8_LP
-	je	9f
-
-	/* Do not use requeue for pshared condvars.  */
-	testl	$PS_BIT, MUTEX_KIND(%r8)
-	jne	9f
-
-	/* Requeue to a PI mutex if the PI bit is set.  */
-	movl	MUTEX_KIND(%r8), %eax
-	andl	$(ROBUST_BIT|PI_BIT), %eax
-	cmpl	$PI_BIT, %eax
-	je	81f
-
-	/* Wake up all threads.  */
-#ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$(FUTEX_CMP_REQUEUE|FUTEX_PRIVATE_FLAG), %esi
-#else
-	movl	%fs:PRIVATE_FUTEX, %esi
-	orl	$FUTEX_CMP_REQUEUE, %esi
-#endif
-	movl	$SYS_futex, %eax
-	movl	$1, %edx
-	movl	$0x7fffffff, %r10d
-	syscall
-
-	/* For any kind of error, which mainly is EAGAIN, we try again
-	   with WAKE.  The general test also covers running on old
-	   kernels.  */
-	cmpq	$-4095, %rax
-	jae	9f
-
-10:	xorl	%eax, %eax
-	retq
-
-	/* Wake up all threads.  */
-81:	movl	$(FUTEX_CMP_REQUEUE_PI|FUTEX_PRIVATE_FLAG), %esi
-	movl	$SYS_futex, %eax
-	movl	$1, %edx
-	movl	$0x7fffffff, %r10d
-	syscall
-
-	/* For any kind of error, which mainly is EAGAIN, we try again
-	   with WAKE.  The general test also covers running on old
-	   kernels.  */
-	cmpq	$-4095, %rax
-	jb	10b
-	jmp	9f
-
-	.align	16
-	/* Unlock.  */
-4:	LOCK
-	decl	cond_lock-cond_futex(%rdi)
-	jne	5f
-
-6:	xorl	%eax, %eax
-	retq
-
-	/* Initial locking failed.  */
-1:
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_lock_wait
-#if cond_lock != 0
-	subq	$cond_lock, %rdi
-#endif
-	jmp	2b
-
-	/* Unlock in loop requires wakeup.  */
-5:	addq	$cond_lock-cond_futex, %rdi
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_unlock_wake
-	jmp	6b
-
-	/* Unlock in loop requires wakeup.  */
-7:	addq	$cond_lock-cond_futex, %rdi
-	cmp	$-1, %R8_LP
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_unlock_wake
-	subq	$cond_lock-cond_futex, %rdi
-	jmp	8b
-
-9:	/* The futex requeue functionality is not available.  */
-	cmp	$-1, %R8_LP
-	movl	$0x7fffffff, %edx
-#ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$FUTEX_WAKE, %eax
-	movl	$(FUTEX_WAKE|FUTEX_PRIVATE_FLAG), %esi
-	cmove	%eax, %esi
-#else
-	movl	$0, %eax
-	movl	%fs:PRIVATE_FUTEX, %esi
-	cmove	%eax, %esi
-	orl	$FUTEX_WAKE, %esi
-#endif
-	movl	$SYS_futex, %eax
-	syscall
-	jmp	10b
-	.size	__pthread_cond_broadcast, .-__pthread_cond_broadcast
-versioned_symbol (libpthread, __pthread_cond_broadcast, pthread_cond_broadcast,
-		  GLIBC_2_3_2)
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_signal.S glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_signal.S
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_signal.S	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_signal.S	1970-01-01 01:00:00.000000000 +0100
@@ -1,164 +0,0 @@
-/* Copyright (C) 2002-2014 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include <sysdep.h>
-#include <shlib-compat.h>
-#include <lowlevellock.h>
-#include <lowlevelcond.h>
-#include <pthread-pi-defines.h>
-#include <kernel-features.h>
-#include <pthread-errnos.h>
-#include <stap-probe.h>
-
-
-	.text
-
-	/* int pthread_cond_signal (pthread_cond_t *cond) */
-	.globl	__pthread_cond_signal
-	.type	__pthread_cond_signal, @function
-	.align	16
-__pthread_cond_signal:
-
-	LIBC_PROBE (cond_signal, 1, %rdi)
-
-	/* Get internal lock.  */
-	movq	%rdi, %r8
-	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-#if cond_lock == 0
-	cmpxchgl %esi, (%rdi)
-#else
-	cmpxchgl %esi, cond_lock(%rdi)
-#endif
-	jnz	1f
-
-2:	addq	$cond_futex, %rdi
-	movq	total_seq(%r8), %rcx
-	cmpq	wakeup_seq(%r8), %rcx
-	jbe	4f
-
-	/* Bump the wakeup number.  */
-	addq	$1, wakeup_seq(%r8)
-	addl	$1, (%rdi)
-
-	/* Wake up one thread.  */
-	LP_OP(cmp) $-1, dep_mutex(%r8)
-	movl	$FUTEX_WAKE_OP, %esi
-	movl	$1, %edx
-	movl	$SYS_futex, %eax
-	je	8f
-
-	/* Get the address of the mutex used.  */
-	mov     dep_mutex(%r8), %RCX_LP
-	movl	MUTEX_KIND(%rcx), %r11d
-	andl	$(ROBUST_BIT|PI_BIT), %r11d
-	cmpl	$PI_BIT, %r11d
-	je	9f
-
-#ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$(FUTEX_WAKE_OP|FUTEX_PRIVATE_FLAG), %esi
-#else
-	orl	%fs:PRIVATE_FUTEX, %esi
-#endif
-
-8:	movl	$1, %r10d
-#if cond_lock != 0
-	addq	$cond_lock, %r8
-#endif
-	movl	$FUTEX_OP_CLEAR_WAKE_IF_GT_ONE, %r9d
-	syscall
-#if cond_lock != 0
-	subq	$cond_lock, %r8
-#endif
-	/* For any kind of error, we try again with WAKE.
-	   The general test also covers running on old kernels.  */
-	cmpq	$-4095, %rax
-	jae	7f
-
-	xorl	%eax, %eax
-	retq
-
-	/* Wake up one thread and requeue none in the PI Mutex case.  */
-9:	movl	$(FUTEX_CMP_REQUEUE_PI|FUTEX_PRIVATE_FLAG), %esi
-	movq	%rcx, %r8
-	xorq	%r10, %r10
-	movl	(%rdi), %r9d	// XXX Can this be right?
-	syscall
-
-	leaq	-cond_futex(%rdi), %r8
-
-	/* For any kind of error, we try again with WAKE.
-	   The general test also covers running on old kernels.  */
-	cmpq	$-4095, %rax
-	jb	4f
-
-7:
-#ifdef __ASSUME_PRIVATE_FUTEX
-	andl	$FUTEX_PRIVATE_FLAG, %esi
-#else
-	andl	%fs:PRIVATE_FUTEX, %esi
-#endif
-	orl	$FUTEX_WAKE, %esi
-	movl	$SYS_futex, %eax
-	/* %rdx should be 1 already from $FUTEX_WAKE_OP syscall.
-	movl	$1, %edx  */
-	syscall
-
-	/* Unlock.  */
-4:	LOCK
-#if cond_lock == 0
-	decl	(%r8)
-#else
-	decl	cond_lock(%r8)
-#endif
-	jne	5f
-
-6:	xorl	%eax, %eax
-	retq
-
-	/* Initial locking failed.  */
-1:
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_lock_wait
-#if cond_lock != 0
-	subq	$cond_lock, %rdi
-#endif
-	jmp	2b
-
-	/* Unlock in loop requires wakeup.  */
-5:
-	movq	%r8, %rdi
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_unlock_wake
-	jmp	6b
-	.size	__pthread_cond_signal, .-__pthread_cond_signal
-versioned_symbol (libpthread, __pthread_cond_signal, pthread_cond_signal,
-		  GLIBC_2_3_2)
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_timedwait.S glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_timedwait.S
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_timedwait.S	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_timedwait.S	1970-01-01 01:00:00.000000000 +0100
@@ -1,840 +0,0 @@
-/* Copyright (C) 2002-2014 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include <sysdep.h>
-#include <shlib-compat.h>
-#include <lowlevellock.h>
-#include <lowlevelcond.h>
-#include <pthread-pi-defines.h>
-#include <pthread-errnos.h>
-#include <stap-probe.h>
-
-#include <kernel-features.h>
-
-
-	.text
-
-
-/* int pthread_cond_timedwait (pthread_cond_t *cond, pthread_mutex_t *mutex,
-			       const struct timespec *abstime)  */
-	.globl	__pthread_cond_timedwait
-	.type	__pthread_cond_timedwait, @function
-	.align	16
-__pthread_cond_timedwait:
-.LSTARTCODE:
-	cfi_startproc
-#ifdef SHARED
-	cfi_personality(DW_EH_PE_pcrel | DW_EH_PE_sdata4 | DW_EH_PE_indirect,
-			DW.ref.__gcc_personality_v0)
-	cfi_lsda(DW_EH_PE_pcrel | DW_EH_PE_sdata4, .LexceptSTART)
-#else
-	cfi_personality(DW_EH_PE_udata4, __gcc_personality_v0)
-	cfi_lsda(DW_EH_PE_udata4, .LexceptSTART)
-#endif
-
-	pushq	%r12
-	cfi_adjust_cfa_offset(8)
-	cfi_rel_offset(%r12, 0)
-	pushq	%r13
-	cfi_adjust_cfa_offset(8)
-	cfi_rel_offset(%r13, 0)
-	pushq	%r14
-	cfi_adjust_cfa_offset(8)
-	cfi_rel_offset(%r14, 0)
-	pushq	%r15
-	cfi_adjust_cfa_offset(8)
-	cfi_rel_offset(%r15, 0)
-#ifdef __ASSUME_FUTEX_CLOCK_REALTIME
-# define FRAME_SIZE (32+8)
-#else
-# define FRAME_SIZE (48+8)
-#endif
-	subq	$FRAME_SIZE, %rsp
-	cfi_adjust_cfa_offset(FRAME_SIZE)
-	cfi_remember_state
-
-	LIBC_PROBE (cond_timedwait, 3, %rdi, %rsi, %rdx)
-
-	cmpq	$1000000000, 8(%rdx)
-	movl	$EINVAL, %eax
-	jae	48f
-
-	/* Stack frame:
-
-	   rsp + 48
-		    +--------------------------+
-	   rsp + 32 | timeout value            |
-		    +--------------------------+
-	   rsp + 24 | old wake_seq value       |
-		    +--------------------------+
-	   rsp + 16 | mutex pointer            |
-		    +--------------------------+
-	   rsp +  8 | condvar pointer          |
-		    +--------------------------+
-	   rsp +  4 | old broadcast_seq value  |
-		    +--------------------------+
-	   rsp +  0 | old cancellation mode    |
-		    +--------------------------+
-	*/
-
-	LP_OP(cmp) $-1, dep_mutex(%rdi)
-
-	/* Prepare structure passed to cancellation handler.  */
-	movq	%rdi, 8(%rsp)
-	movq	%rsi, 16(%rsp)
-	movq	%rdx, %r13
-
-	je	22f
-	mov	%RSI_LP, dep_mutex(%rdi)
-
-22:
-	xorb	%r15b, %r15b
-
-#ifndef __ASSUME_FUTEX_CLOCK_REALTIME
-#  ifdef PIC
-	cmpl	$0, __have_futex_clock_realtime(%rip)
-#  else
-	cmpl	$0, __have_futex_clock_realtime
-#  endif
-	je	.Lreltmo
-#endif
-
-	/* Get internal lock.  */
-	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-#if cond_lock == 0
-	cmpxchgl %esi, (%rdi)
-#else
-	cmpxchgl %esi, cond_lock(%rdi)
-#endif
-	jnz	31f
-
-	/* Unlock the mutex.  */
-32:	movq	16(%rsp), %rdi
-	xorl	%esi, %esi
-	callq	__pthread_mutex_unlock_usercnt
-
-	testl	%eax, %eax
-	jne	46f
-
-	movq	8(%rsp), %rdi
-	incq	total_seq(%rdi)
-	incl	cond_futex(%rdi)
-	addl	$(1 << nwaiters_shift), cond_nwaiters(%rdi)
-
-	/* Get and store current wakeup_seq value.  */
-	movq	8(%rsp), %rdi
-	movq	wakeup_seq(%rdi), %r9
-	movl	broadcast_seq(%rdi), %edx
-	movq	%r9, 24(%rsp)
-	movl	%edx, 4(%rsp)
-
-	cmpq	$0, (%r13)
-	movq	$-ETIMEDOUT, %r14
-	js	36f
-
-38:	movl	cond_futex(%rdi), %r12d
-
-	/* Unlock.  */
-	LOCK
-#if cond_lock == 0
-	decl	(%rdi)
-#else
-	decl	cond_lock(%rdi)
-#endif
-	jne	33f
-
-.LcleanupSTART1:
-34:	callq	__pthread_enable_asynccancel
-	movl	%eax, (%rsp)
-
-	movq	%r13, %r10
-	movl	$FUTEX_WAIT_BITSET, %esi
-	LP_OP(cmp) $-1, dep_mutex(%rdi)
-	je	60f
-
-	mov	dep_mutex(%rdi), %R8_LP
-	/* Requeue to a non-robust PI mutex if the PI bit is set and
-	the robust bit is not set.  */
-	movl	MUTEX_KIND(%r8), %eax
-	andl	$(ROBUST_BIT|PI_BIT), %eax
-	cmpl	$PI_BIT, %eax
-	jne	61f
-
-	movl	$(FUTEX_WAIT_REQUEUE_PI|FUTEX_PRIVATE_FLAG), %esi
-	xorl	%eax, %eax
-	/* The following only works like this because we only support
-	   two clocks, represented using a single bit.  */
-	testl	$1, cond_nwaiters(%rdi)
-	movl	$FUTEX_CLOCK_REALTIME, %edx
-	cmove	%edx, %eax
-	orl	%eax, %esi
-	movq	%r12, %rdx
-	addq	$cond_futex, %rdi
-	movl	$SYS_futex, %eax
-	syscall
-
-	cmpl	$0, %eax
-	sete	%r15b
-
-#ifdef __ASSUME_REQUEUE_PI
-	jmp	62f
-#else
-	je	62f
-
-	/* When a futex syscall with FUTEX_WAIT_REQUEUE_PI returns
-	   successfully, it has already locked the mutex for us and the
-	   pi_flag (%r15b) is set to denote that fact.  However, if another
-	   thread changed the futex value before we entered the wait, the
-	   syscall may return an EAGAIN and the mutex is not locked.  We go
-	   ahead with a success anyway since later we look at the pi_flag to
-	   decide if we got the mutex or not.  The sequence numbers then make
-	   sure that only one of the threads actually wake up.  We retry using
-	   normal FUTEX_WAIT only if the kernel returned ENOSYS, since normal
-	   and PI futexes don't mix.
-
-	   Note that we don't check for EAGAIN specifically; we assume that the
-	   only other error the futex function could return is EAGAIN (barring
-	   the ETIMEOUT of course, for the timeout case in futex) since
-	   anything else would mean an error in our function.  It is too
-	   expensive to do that check for every call (which is  quite common in
-	   case of a large number of threads), so it has been skipped.  */
-	cmpl    $-ENOSYS, %eax
-	jne     62f
-
-	subq	$cond_futex, %rdi
-#endif
-
-61:	movl	$(FUTEX_WAIT_BITSET|FUTEX_PRIVATE_FLAG), %esi
-60:	xorb	%r15b, %r15b
-	xorl	%eax, %eax
-	/* The following only works like this because we only support
-	   two clocks, represented using a single bit.  */
-	testl	$1, cond_nwaiters(%rdi)
-	movl	$FUTEX_CLOCK_REALTIME, %edx
-	movl	$0xffffffff, %r9d
-	cmove	%edx, %eax
-	orl	%eax, %esi
-	movq	%r12, %rdx
-	addq	$cond_futex, %rdi
-	movl	$SYS_futex, %eax
-	syscall
-62:	movq	%rax, %r14
-
-	movl	(%rsp), %edi
-	callq	__pthread_disable_asynccancel
-.LcleanupEND1:
-
-	/* Lock.  */
-	movq	8(%rsp), %rdi
-	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-#if cond_lock == 0
-	cmpxchgl %esi, (%rdi)
-#else
-	cmpxchgl %esi, cond_lock(%rdi)
-#endif
-	jne	35f
-
-36:	movl	broadcast_seq(%rdi), %edx
-
-	movq	woken_seq(%rdi), %rax
-
-	movq	wakeup_seq(%rdi), %r9
-
-	cmpl	4(%rsp), %edx
-	jne	53f
-
-	cmpq	24(%rsp), %r9
-	jbe	45f
-
-	cmpq	%rax, %r9
-	ja	39f
-
-45:	cmpq	$-ETIMEDOUT, %r14
-	je	99f
-
-	/* We need to go back to futex_wait.  If we're using requeue_pi, then
-	   release the mutex we had acquired and go back.  */
-	test	%r15b, %r15b
-	jz	38b
-
-	/* Adjust the mutex values first and then unlock it.  The unlock
-	   should always succeed or else the kernel did not lock the
-	   mutex correctly.  */
-	movq	%r8, %rdi
-	callq	__pthread_mutex_cond_lock_adjust
-	xorl	%esi, %esi
-	callq	__pthread_mutex_unlock_usercnt
-	/* Reload cond_var.  */
-	movq	8(%rsp), %rdi
-	jmp	38b
-
-99:	incq	wakeup_seq(%rdi)
-	incl	cond_futex(%rdi)
-	movl	$ETIMEDOUT, %r14d
-	jmp	44f
-
-53:	xorq	%r14, %r14
-	jmp	54f
-
-39:	xorq	%r14, %r14
-44:	incq	woken_seq(%rdi)
-
-54:	subl	$(1 << nwaiters_shift), cond_nwaiters(%rdi)
-
-	/* Wake up a thread which wants to destroy the condvar object.  */
-	cmpq	$0xffffffffffffffff, total_seq(%rdi)
-	jne	55f
-	movl	cond_nwaiters(%rdi), %eax
-	andl	$~((1 << nwaiters_shift) - 1), %eax
-	jne	55f
-
-	addq	$cond_nwaiters, %rdi
-	LP_OP(cmp) $-1, dep_mutex-cond_nwaiters(%rdi)
-	movl	$1, %edx
-#ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$FUTEX_WAKE, %eax
-	movl	$(FUTEX_WAKE|FUTEX_PRIVATE_FLAG), %esi
-	cmove	%eax, %esi
-#else
-	movl	$0, %eax
-	movl	%fs:PRIVATE_FUTEX, %esi
-	cmove	%eax, %esi
-	orl	$FUTEX_WAKE, %esi
-#endif
-	movl	$SYS_futex, %eax
-	syscall
-	subq	$cond_nwaiters, %rdi
-
-55:	LOCK
-#if cond_lock == 0
-	decl	(%rdi)
-#else
-	decl	cond_lock(%rdi)
-#endif
-	jne	40f
-
-	/* If requeue_pi is used the kernel performs the locking of the
-	   mutex. */
-41:	movq	16(%rsp), %rdi
-	testb	%r15b, %r15b
-	jnz	64f
-
-	callq	__pthread_mutex_cond_lock
-
-63:	testq	%rax, %rax
-	cmoveq	%r14, %rax
-
-48:	addq	$FRAME_SIZE, %rsp
-	cfi_adjust_cfa_offset(-FRAME_SIZE)
-	popq	%r15
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r15)
-	popq	%r14
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r14)
-	popq	%r13
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r13)
-	popq	%r12
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r12)
-
-	retq
-
-	cfi_restore_state
-
-64:	callq	__pthread_mutex_cond_lock_adjust
-	movq	%r14, %rax
-	jmp	48b
-
-	/* Initial locking failed.  */
-31:
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_lock_wait
-	jmp	32b
-
-	/* Unlock in loop requires wakeup.  */
-33:
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_unlock_wake
-	jmp	34b
-
-	/* Locking in loop failed.  */
-35:
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_lock_wait
-#if cond_lock != 0
-	subq	$cond_lock, %rdi
-#endif
-	jmp	36b
-
-	/* Unlock after loop requires wakeup.  */
-40:
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_unlock_wake
-	jmp	41b
-
-	/* The initial unlocking of the mutex failed.  */
-46:	movq	8(%rsp), %rdi
-	movq	%rax, (%rsp)
-	LOCK
-#if cond_lock == 0
-	decl	(%rdi)
-#else
-	decl	cond_lock(%rdi)
-#endif
-	jne	47f
-
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_unlock_wake
-
-47:	movq	(%rsp), %rax
-	jmp	48b
-
-
-#ifndef __ASSUME_FUTEX_CLOCK_REALTIME
-.Lreltmo:
-	/* Get internal lock.  */
-	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-# if cond_lock == 0
-	cmpxchgl %esi, (%rdi)
-# else
-	cmpxchgl %esi, cond_lock(%rdi)
-# endif
-	jnz	1f
-
-	/* Unlock the mutex.  */
-2:	movq	16(%rsp), %rdi
-	xorl	%esi, %esi
-	callq	__pthread_mutex_unlock_usercnt
-
-	testl	%eax, %eax
-	jne	46b
-
-	movq	8(%rsp), %rdi
-	incq	total_seq(%rdi)
-	incl	cond_futex(%rdi)
-	addl	$(1 << nwaiters_shift), cond_nwaiters(%rdi)
-
-	/* Get and store current wakeup_seq value.  */
-	movq	8(%rsp), %rdi
-	movq	wakeup_seq(%rdi), %r9
-	movl	broadcast_seq(%rdi), %edx
-	movq	%r9, 24(%rsp)
-	movl	%edx, 4(%rsp)
-
-	/* Get the current time.  */
-8:
-# ifdef __NR_clock_gettime
-	/* Get the clock number.  Note that the field in the condvar
-	   structure stores the number minus 1.  */
-	movq	8(%rsp), %rdi
-	movl	cond_nwaiters(%rdi), %edi
-	andl	$((1 << nwaiters_shift) - 1), %edi
-	/* Only clocks 0 and 1 are allowed so far.  Both are handled in the
-	   kernel.  */
-	leaq	32(%rsp), %rsi
-#  ifdef SHARED
-	mov	__vdso_clock_gettime@GOTPCREL(%rip), %RAX_LP
-	mov	(%rax), %RAX_LP
-	PTR_DEMANGLE (%RAX_LP)
-	call	*%rax
-#  else
-	movl	$__NR_clock_gettime, %eax
-	syscall
-#  endif
-
-	/* Compute relative timeout.  */
-	movq	(%r13), %rcx
-	movq	8(%r13), %rdx
-	subq	32(%rsp), %rcx
-	subq	40(%rsp), %rdx
-# else
-	leaq	24(%rsp), %rdi
-	xorl	%esi, %esi
-	/* This call works because we directly jump to a system call entry
-	   which preserves all the registers.  */
-	call	JUMPTARGET(__gettimeofday)
-
-	/* Compute relative timeout.  */
-	movq	40(%rsp), %rax
-	movl	$1000, %edx
-	mul	%rdx		/* Milli seconds to nano seconds.  */
-	movq	(%r13), %rcx
-	movq	8(%r13), %rdx
-	subq	32(%rsp), %rcx
-	subq	%rax, %rdx
-# endif
-	jns	12f
-	addq	$1000000000, %rdx
-	decq	%rcx
-12:	testq	%rcx, %rcx
-	movq	8(%rsp), %rdi
-	movq	$-ETIMEDOUT, %r14
-	js	6f
-
-	/* Store relative timeout.  */
-21:	movq	%rcx, 32(%rsp)
-	movq	%rdx, 40(%rsp)
-
-	movl	cond_futex(%rdi), %r12d
-
-	/* Unlock.  */
-	LOCK
-# if cond_lock == 0
-	decl	(%rdi)
-# else
-	decl	cond_lock(%rdi)
-# endif
-	jne	3f
-
-.LcleanupSTART2:
-4:	callq	__pthread_enable_asynccancel
-	movl	%eax, (%rsp)
-
-	leaq	32(%rsp), %r10
-	LP_OP(cmp) $-1, dep_mutex(%rdi)
-	movq	%r12, %rdx
-# ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$FUTEX_WAIT, %eax
-	movl	$(FUTEX_WAIT|FUTEX_PRIVATE_FLAG), %esi
-	cmove	%eax, %esi
-# else
-	movl	$0, %eax
-	movl	%fs:PRIVATE_FUTEX, %esi
-	cmove	%eax, %esi
-#  if FUTEX_WAIT != 0
-	orl	$FUTEX_WAIT, %esi
-#  endif
-# endif
-	addq	$cond_futex, %rdi
-	movl	$SYS_futex, %eax
-	syscall
-	movq	%rax, %r14
-
-	movl	(%rsp), %edi
-	callq	__pthread_disable_asynccancel
-.LcleanupEND2:
-
-	/* Lock.  */
-	movq	8(%rsp), %rdi
-	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-# if cond_lock == 0
-	cmpxchgl %esi, (%rdi)
-# else
-	cmpxchgl %esi, cond_lock(%rdi)
-# endif
-	jne	5f
-
-6:	movl	broadcast_seq(%rdi), %edx
-
-	movq	woken_seq(%rdi), %rax
-
-	movq	wakeup_seq(%rdi), %r9
-
-	cmpl	4(%rsp), %edx
-	jne	53b
-
-	cmpq	24(%rsp), %r9
-	jbe	15f
-
-	cmpq	%rax, %r9
-	ja	39b
-
-15:	cmpq	$-ETIMEDOUT, %r14
-	jne	8b
-
-	jmp	99b
-
-	/* Initial locking failed.  */
-1:
-# if cond_lock != 0
-	addq	$cond_lock, %rdi
-# endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_lock_wait
-	jmp	2b
-
-	/* Unlock in loop requires wakeup.  */
-3:
-# if cond_lock != 0
-	addq	$cond_lock, %rdi
-# endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_unlock_wake
-	jmp	4b
-
-	/* Locking in loop failed.  */
-5:
-# if cond_lock != 0
-	addq	$cond_lock, %rdi
-# endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_lock_wait
-# if cond_lock != 0
-	subq	$cond_lock, %rdi
-# endif
-	jmp	6b
-#endif
-	.size	__pthread_cond_timedwait, .-__pthread_cond_timedwait
-versioned_symbol (libpthread, __pthread_cond_timedwait, pthread_cond_timedwait,
-		  GLIBC_2_3_2)
-
-
-	.align	16
-	.type	__condvar_cleanup2, @function
-__condvar_cleanup2:
-	/* Stack frame:
-
-	   rsp + 72
-		    +--------------------------+
-	   rsp + 64 | %r12                     |
-		    +--------------------------+
-	   rsp + 56 | %r13                     |
-		    +--------------------------+
-	   rsp + 48 | %r14                     |
-		    +--------------------------+
-	   rsp + 24 | unused                   |
-		    +--------------------------+
-	   rsp + 16 | mutex pointer            |
-		    +--------------------------+
-	   rsp +  8 | condvar pointer          |
-		    +--------------------------+
-	   rsp +  4 | old broadcast_seq value  |
-		    +--------------------------+
-	   rsp +  0 | old cancellation mode    |
-		    +--------------------------+
-	*/
-
-	movq	%rax, 24(%rsp)
-
-	/* Get internal lock.  */
-	movq	8(%rsp), %rdi
-	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-#if cond_lock == 0
-	cmpxchgl %esi, (%rdi)
-#else
-	cmpxchgl %esi, cond_lock(%rdi)
-#endif
-	jz	1f
-
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_lock_wait
-#if cond_lock != 0
-	subq	$cond_lock, %rdi
-#endif
-
-1:	movl	broadcast_seq(%rdi), %edx
-	cmpl	4(%rsp), %edx
-	jne	3f
-
-	/* We increment the wakeup_seq counter only if it is lower than
-	   total_seq.  If this is not the case the thread was woken and
-	   then canceled.  In this case we ignore the signal.  */
-	movq	total_seq(%rdi), %rax
-	cmpq	wakeup_seq(%rdi), %rax
-	jbe	6f
-	incq	wakeup_seq(%rdi)
-	incl	cond_futex(%rdi)
-6:	incq	woken_seq(%rdi)
-
-3:	subl	$(1 << nwaiters_shift), cond_nwaiters(%rdi)
-
-	/* Wake up a thread which wants to destroy the condvar object.  */
-	xorq	%r12, %r12
-	cmpq	$0xffffffffffffffff, total_seq(%rdi)
-	jne	4f
-	movl	cond_nwaiters(%rdi), %eax
-	andl	$~((1 << nwaiters_shift) - 1), %eax
-	jne	4f
-
-	LP_OP(cmp) $-1, dep_mutex(%rdi)
-	leaq	cond_nwaiters(%rdi), %rdi
-	movl	$1, %edx
-#ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$FUTEX_WAKE, %eax
-	movl	$(FUTEX_WAKE|FUTEX_PRIVATE_FLAG), %esi
-	cmove	%eax, %esi
-#else
-	movl	$0, %eax
-	movl	%fs:PRIVATE_FUTEX, %esi
-	cmove	%eax, %esi
-	orl	$FUTEX_WAKE, %esi
-#endif
-	movl	$SYS_futex, %eax
-	syscall
-	subq	$cond_nwaiters, %rdi
-	movl	$1, %r12d
-
-4:	LOCK
-#if cond_lock == 0
-	decl	(%rdi)
-#else
-	decl	cond_lock(%rdi)
-#endif
-	je	2f
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_unlock_wake
-
-	/* Wake up all waiters to make sure no signal gets lost.  */
-2:	testq	%r12, %r12
-	jnz	5f
-	addq	$cond_futex, %rdi
-	LP_OP(cmp) $-1, dep_mutex-cond_futex(%rdi)
-	movl	$0x7fffffff, %edx
-#ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$FUTEX_WAKE, %eax
-	movl	$(FUTEX_WAKE|FUTEX_PRIVATE_FLAG), %esi
-	cmove	%eax, %esi
-#else
-	movl	$0, %eax
-	movl	%fs:PRIVATE_FUTEX, %esi
-	cmove	%eax, %esi
-	orl	$FUTEX_WAKE, %esi
-#endif
-	movl	$SYS_futex, %eax
-	syscall
-
-	/* Lock the mutex only if we don't own it already.  This only happens
-	   in case of PI mutexes, if we got cancelled after a successful
-	   return of the futex syscall and before disabling async
-	   cancellation.  */
-5:	movq	16(%rsp), %rdi
-	movl	MUTEX_KIND(%rdi), %eax
-	andl	$(ROBUST_BIT|PI_BIT), %eax
-	cmpl	$PI_BIT, %eax
-	jne	7f
-
-	movl	(%rdi), %eax
-	andl	$TID_MASK, %eax
-	cmpl	%eax, %fs:TID
-	jne	7f
-	/* We managed to get the lock.  Fix it up before returning.  */
-	callq	__pthread_mutex_cond_lock_adjust
-	jmp	8f
-
-7:	callq	__pthread_mutex_cond_lock
-
-8:	movq	24(%rsp), %rdi
-	movq	FRAME_SIZE(%rsp), %r15
-	movq	FRAME_SIZE+8(%rsp), %r14
-	movq	FRAME_SIZE+16(%rsp), %r13
-	movq	FRAME_SIZE+24(%rsp), %r12
-.LcallUR:
-	call	_Unwind_Resume@PLT
-	hlt
-.LENDCODE:
-	cfi_endproc
-	.size	__condvar_cleanup2, .-__condvar_cleanup2
-
-
-	.section .gcc_except_table,"a",@progbits
-.LexceptSTART:
-	.byte	DW_EH_PE_omit			# @LPStart format
-	.byte	DW_EH_PE_omit			# @TType format
-	.byte	DW_EH_PE_uleb128		# call-site format
-	.uleb128 .Lcstend-.Lcstbegin
-.Lcstbegin:
-	.uleb128 .LcleanupSTART1-.LSTARTCODE
-	.uleb128 .LcleanupEND1-.LcleanupSTART1
-	.uleb128 __condvar_cleanup2-.LSTARTCODE
-	.uleb128  0
-#ifndef __ASSUME_FUTEX_CLOCK_REALTIME
-	.uleb128 .LcleanupSTART2-.LSTARTCODE
-	.uleb128 .LcleanupEND2-.LcleanupSTART2
-	.uleb128 __condvar_cleanup2-.LSTARTCODE
-	.uleb128  0
-#endif
-	.uleb128 .LcallUR-.LSTARTCODE
-	.uleb128 .LENDCODE-.LcallUR
-	.uleb128 0
-	.uleb128  0
-.Lcstend:
-
-
-#ifdef SHARED
-	.hidden	DW.ref.__gcc_personality_v0
-	.weak	DW.ref.__gcc_personality_v0
-	.section .gnu.linkonce.d.DW.ref.__gcc_personality_v0,"aw",@progbits
-	.align	LP_SIZE
-	.type	DW.ref.__gcc_personality_v0, @object
-	.size	DW.ref.__gcc_personality_v0, LP_SIZE
-DW.ref.__gcc_personality_v0:
-	ASM_ADDR __gcc_personality_v0
-#endif
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S	1970-01-01 01:00:00.000000000 +0100
@@ -1,555 +0,0 @@
-/* Copyright (C) 2002-2014 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include <sysdep.h>
-#include <shlib-compat.h>
-#include <lowlevellock.h>
-#include <lowlevelcond.h>
-#include <tcb-offsets.h>
-#include <pthread-pi-defines.h>
-#include <pthread-errnos.h>
-#include <stap-probe.h>
-
-#include <kernel-features.h>
-
-
-	.text
-
-/* int pthread_cond_wait (pthread_cond_t *cond, pthread_mutex_t *mutex)  */
-	.globl	__pthread_cond_wait
-	.type	__pthread_cond_wait, @function
-	.align	16
-__pthread_cond_wait:
-.LSTARTCODE:
-	cfi_startproc
-#ifdef SHARED
-	cfi_personality(DW_EH_PE_pcrel | DW_EH_PE_sdata4 | DW_EH_PE_indirect,
-			DW.ref.__gcc_personality_v0)
-	cfi_lsda(DW_EH_PE_pcrel | DW_EH_PE_sdata4, .LexceptSTART)
-#else
-	cfi_personality(DW_EH_PE_udata4, __gcc_personality_v0)
-	cfi_lsda(DW_EH_PE_udata4, .LexceptSTART)
-#endif
-
-#define FRAME_SIZE (32+8)
-	leaq	-FRAME_SIZE(%rsp), %rsp
-	cfi_adjust_cfa_offset(FRAME_SIZE)
-
-	/* Stack frame:
-
-	   rsp + 32
-		    +--------------------------+
-	   rsp + 24 | old wake_seq value       |
-		    +--------------------------+
-	   rsp + 16 | mutex pointer            |
-		    +--------------------------+
-	   rsp +  8 | condvar pointer          |
-		    +--------------------------+
-	   rsp +  4 | old broadcast_seq value  |
-		    +--------------------------+
-	   rsp +  0 | old cancellation mode    |
-		    +--------------------------+
-	*/
-
-	LIBC_PROBE (cond_wait, 2, %rdi, %rsi)
-
-	LP_OP(cmp) $-1, dep_mutex(%rdi)
-
-	/* Prepare structure passed to cancellation handler.  */
-	movq	%rdi, 8(%rsp)
-	movq	%rsi, 16(%rsp)
-
-	je	15f
-	mov	%RSI_LP, dep_mutex(%rdi)
-
-	/* Get internal lock.  */
-15:	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-#if cond_lock == 0
-	cmpxchgl %esi, (%rdi)
-#else
-	cmpxchgl %esi, cond_lock(%rdi)
-#endif
-	jne	1f
-
-	/* Unlock the mutex.  */
-2:	movq	16(%rsp), %rdi
-	xorl	%esi, %esi
-	callq	__pthread_mutex_unlock_usercnt
-
-	testl	%eax, %eax
-	jne	12f
-
-	movq	8(%rsp), %rdi
-	incq	total_seq(%rdi)
-	incl	cond_futex(%rdi)
-	addl	$(1 << nwaiters_shift), cond_nwaiters(%rdi)
-
-	/* Get and store current wakeup_seq value.  */
-	movq	8(%rsp), %rdi
-	movq	wakeup_seq(%rdi), %r9
-	movl	broadcast_seq(%rdi), %edx
-	movq	%r9, 24(%rsp)
-	movl	%edx, 4(%rsp)
-
-	/* Unlock.  */
-8:	movl	cond_futex(%rdi), %edx
-	LOCK
-#if cond_lock == 0
-	decl	(%rdi)
-#else
-	decl	cond_lock(%rdi)
-#endif
-	jne	3f
-
-.LcleanupSTART:
-4:	callq	__pthread_enable_asynccancel
-	movl	%eax, (%rsp)
-
-	xorq	%r10, %r10
-	LP_OP(cmp) $-1, dep_mutex(%rdi)
-	leaq	cond_futex(%rdi), %rdi
-	movl	$FUTEX_WAIT, %esi
-	je	60f
-
-	mov	dep_mutex-cond_futex(%rdi), %R8_LP
-	/* Requeue to a non-robust PI mutex if the PI bit is set and
-	the robust bit is not set.  */
-	movl	MUTEX_KIND(%r8), %eax
-	andl	$(ROBUST_BIT|PI_BIT), %eax
-	cmpl	$PI_BIT, %eax
-	jne	61f
-
-	movl	$(FUTEX_WAIT_REQUEUE_PI|FUTEX_PRIVATE_FLAG), %esi
-	movl	$SYS_futex, %eax
-	syscall
-
-	cmpl	$0, %eax
-	sete	%r8b
-
-#ifdef __ASSUME_REQUEUE_PI
-	jmp	62f
-#else
-	je	62f
-
-	/* When a futex syscall with FUTEX_WAIT_REQUEUE_PI returns
-	   successfully, it has already locked the mutex for us and the
-	   pi_flag (%r8b) is set to denote that fact.  However, if another
-	   thread changed the futex value before we entered the wait, the
-	   syscall may return an EAGAIN and the mutex is not locked.  We go
-	   ahead with a success anyway since later we look at the pi_flag to
-	   decide if we got the mutex or not.  The sequence numbers then make
-	   sure that only one of the threads actually wake up.  We retry using
-	   normal FUTEX_WAIT only if the kernel returned ENOSYS, since normal
-	   and PI futexes don't mix.
-
-	   Note that we don't check for EAGAIN specifically; we assume that the
-	   only other error the futex function could return is EAGAIN since
-	   anything else would mean an error in our function.  It is too
-	   expensive to do that check for every call (which is 	quite common in
-	   case of a large number of threads), so it has been skipped.  */
-	cmpl	$-ENOSYS, %eax
-	jne	62f
-
-# ifndef __ASSUME_PRIVATE_FUTEX
-	movl	$FUTEX_WAIT, %esi
-# endif
-#endif
-
-61:
-#ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$(FUTEX_WAIT|FUTEX_PRIVATE_FLAG), %esi
-#else
-	orl	%fs:PRIVATE_FUTEX, %esi
-#endif
-60:	xorb	%r8b, %r8b
-	movl	$SYS_futex, %eax
-	syscall
-
-62:	movl	(%rsp), %edi
-	callq	__pthread_disable_asynccancel
-.LcleanupEND:
-
-	/* Lock.  */
-	movq	8(%rsp), %rdi
-	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-#if cond_lock == 0
-	cmpxchgl %esi, (%rdi)
-#else
-	cmpxchgl %esi, cond_lock(%rdi)
-#endif
-	jnz	5f
-
-6:	movl	broadcast_seq(%rdi), %edx
-
-	movq	woken_seq(%rdi), %rax
-
-	movq	wakeup_seq(%rdi), %r9
-
-	cmpl	4(%rsp), %edx
-	jne	16f
-
-	cmpq	24(%rsp), %r9
-	jbe	19f
-
-	cmpq	%rax, %r9
-	jna	19f
-
-	incq	woken_seq(%rdi)
-
-	/* Unlock */
-16:	subl	$(1 << nwaiters_shift), cond_nwaiters(%rdi)
-
-	/* Wake up a thread which wants to destroy the condvar object.  */
-	cmpq	$0xffffffffffffffff, total_seq(%rdi)
-	jne	17f
-	movl	cond_nwaiters(%rdi), %eax
-	andl	$~((1 << nwaiters_shift) - 1), %eax
-	jne	17f
-
-	addq	$cond_nwaiters, %rdi
-	LP_OP(cmp) $-1, dep_mutex-cond_nwaiters(%rdi)
-	movl	$1, %edx
-#ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$FUTEX_WAKE, %eax
-	movl	$(FUTEX_WAKE|FUTEX_PRIVATE_FLAG), %esi
-	cmove	%eax, %esi
-#else
-	movl	$0, %eax
-	movl	%fs:PRIVATE_FUTEX, %esi
-	cmove	%eax, %esi
-	orl	$FUTEX_WAKE, %esi
-#endif
-	movl	$SYS_futex, %eax
-	syscall
-	subq	$cond_nwaiters, %rdi
-
-17:	LOCK
-#if cond_lock == 0
-	decl	(%rdi)
-#else
-	decl	cond_lock(%rdi)
-#endif
-	jne	10f
-
-	/* If requeue_pi is used the kernel performs the locking of the
-	   mutex. */
-11:	movq	16(%rsp), %rdi
-	testb	%r8b, %r8b
-	jnz	18f
-
-	callq	__pthread_mutex_cond_lock
-
-14:	leaq	FRAME_SIZE(%rsp), %rsp
-	cfi_adjust_cfa_offset(-FRAME_SIZE)
-
-	/* We return the result of the mutex_lock operation.  */
-	retq
-
-	cfi_adjust_cfa_offset(FRAME_SIZE)
-
-18:	callq	__pthread_mutex_cond_lock_adjust
-	xorl	%eax, %eax
-	jmp	14b
-
-	/* We need to go back to futex_wait.  If we're using requeue_pi, then
-	   release the mutex we had acquired and go back.  */
-19:	testb	%r8b, %r8b
-	jz	8b
-
-	/* Adjust the mutex values first and then unlock it.  The unlock
-	   should always succeed or else the kernel did not lock the mutex
-	   correctly.  */
-	movq	16(%rsp), %rdi
-	callq	__pthread_mutex_cond_lock_adjust
-	movq	%rdi, %r8
-	xorl	%esi, %esi
-	callq	__pthread_mutex_unlock_usercnt
-	/* Reload cond_var.  */
-	movq	8(%rsp), %rdi
-	jmp	8b
-
-	/* Initial locking failed.  */
-1:
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_lock_wait
-	jmp	2b
-
-	/* Unlock in loop requires wakeup.  */
-3:
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	/* The call preserves %rdx.  */
-	callq	__lll_unlock_wake
-#if cond_lock != 0
-	subq	$cond_lock, %rdi
-#endif
-	jmp	4b
-
-	/* Locking in loop failed.  */
-5:
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_lock_wait
-#if cond_lock != 0
-	subq	$cond_lock, %rdi
-#endif
-	jmp	6b
-
-	/* Unlock after loop requires wakeup.  */
-10:
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_unlock_wake
-	jmp	11b
-
-	/* The initial unlocking of the mutex failed.  */
-12:	movq	%rax, %r10
-	movq	8(%rsp), %rdi
-	LOCK
-#if cond_lock == 0
-	decl	(%rdi)
-#else
-	decl	cond_lock(%rdi)
-#endif
-	je	13f
-
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_unlock_wake
-
-13:	movq	%r10, %rax
-	jmp	14b
-
-	.size	__pthread_cond_wait, .-__pthread_cond_wait
-versioned_symbol (libpthread, __pthread_cond_wait, pthread_cond_wait,
-		  GLIBC_2_3_2)
-
-
-	.align	16
-	.type	__condvar_cleanup1, @function
-	.globl	__condvar_cleanup1
-	.hidden	__condvar_cleanup1
-__condvar_cleanup1:
-	/* Stack frame:
-
-	   rsp + 32
-		    +--------------------------+
-	   rsp + 24 | unused                   |
-		    +--------------------------+
-	   rsp + 16 | mutex pointer            |
-		    +--------------------------+
-	   rsp +  8 | condvar pointer          |
-		    +--------------------------+
-	   rsp +  4 | old broadcast_seq value  |
-		    +--------------------------+
-	   rsp +  0 | old cancellation mode    |
-		    +--------------------------+
-	*/
-
-	movq	%rax, 24(%rsp)
-
-	/* Get internal lock.  */
-	movq	8(%rsp), %rdi
-	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-#if cond_lock == 0
-	cmpxchgl %esi, (%rdi)
-#else
-	cmpxchgl %esi, cond_lock(%rdi)
-#endif
-	jz	1f
-
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_lock_wait
-#if cond_lock != 0
-	subq	$cond_lock, %rdi
-#endif
-
-1:	movl	broadcast_seq(%rdi), %edx
-	cmpl	4(%rsp), %edx
-	jne	3f
-
-	/* We increment the wakeup_seq counter only if it is lower than
-	   total_seq.  If this is not the case the thread was woken and
-	   then canceled.  In this case we ignore the signal.  */
-	movq	total_seq(%rdi), %rax
-	cmpq	wakeup_seq(%rdi), %rax
-	jbe	6f
-	incq	wakeup_seq(%rdi)
-	incl	cond_futex(%rdi)
-6:	incq	woken_seq(%rdi)
-
-3:	subl	$(1 << nwaiters_shift), cond_nwaiters(%rdi)
-
-	/* Wake up a thread which wants to destroy the condvar object.  */
-	xorl	%ecx, %ecx
-	cmpq	$0xffffffffffffffff, total_seq(%rdi)
-	jne	4f
-	movl	cond_nwaiters(%rdi), %eax
-	andl	$~((1 << nwaiters_shift) - 1), %eax
-	jne	4f
-
-	LP_OP(cmp) $-1, dep_mutex(%rdi)
-	leaq	cond_nwaiters(%rdi), %rdi
-	movl	$1, %edx
-#ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$FUTEX_WAKE, %eax
-	movl	$(FUTEX_WAKE|FUTEX_PRIVATE_FLAG), %esi
-	cmove	%eax, %esi
-#else
-	movl	$0, %eax
-	movl	%fs:PRIVATE_FUTEX, %esi
-	cmove	%eax, %esi
-	orl	$FUTEX_WAKE, %esi
-#endif
-	movl	$SYS_futex, %eax
-	syscall
-	subq	$cond_nwaiters, %rdi
-	movl	$1, %ecx
-
-4:	LOCK
-#if cond_lock == 0
-	decl	(%rdi)
-#else
-	decl	cond_lock(%rdi)
-#endif
-	je	2f
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	/* The call preserves %rcx.  */
-	callq	__lll_unlock_wake
-
-	/* Wake up all waiters to make sure no signal gets lost.  */
-2:	testl	%ecx, %ecx
-	jnz	5f
-	addq	$cond_futex, %rdi
-	LP_OP(cmp) $-1, dep_mutex-cond_futex(%rdi)
-	movl	$0x7fffffff, %edx
-#ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$FUTEX_WAKE, %eax
-	movl	$(FUTEX_WAKE|FUTEX_PRIVATE_FLAG), %esi
-	cmove	%eax, %esi
-#else
-	movl	$0, %eax
-	movl	%fs:PRIVATE_FUTEX, %esi
-	cmove	%eax, %esi
-	orl	$FUTEX_WAKE, %esi
-#endif
-	movl	$SYS_futex, %eax
-	syscall
-
-	/* Lock the mutex only if we don't own it already.  This only happens
-	   in case of PI mutexes, if we got cancelled after a successful
-	   return of the futex syscall and before disabling async
-	   cancellation.  */
-5:	movq	16(%rsp), %rdi
-	movl	MUTEX_KIND(%rdi), %eax
-	andl	$(ROBUST_BIT|PI_BIT), %eax
-	cmpl	$PI_BIT, %eax
-	jne	7f
-
-	movl	(%rdi), %eax
-	andl	$TID_MASK, %eax
-	cmpl	%eax, %fs:TID
-	jne	7f
-	/* We managed to get the lock.  Fix it up before returning.  */
-	callq	__pthread_mutex_cond_lock_adjust
-	jmp	8f
-
-
-7:	callq	__pthread_mutex_cond_lock
-
-8:	movq	24(%rsp), %rdi
-.LcallUR:
-	call	_Unwind_Resume@PLT
-	hlt
-.LENDCODE:
-	cfi_endproc
-	.size	__condvar_cleanup1, .-__condvar_cleanup1
-
-
-	.section .gcc_except_table,"a",@progbits
-.LexceptSTART:
-	.byte	DW_EH_PE_omit			# @LPStart format
-	.byte	DW_EH_PE_omit			# @TType format
-	.byte	DW_EH_PE_uleb128		# call-site format
-	.uleb128 .Lcstend-.Lcstbegin
-.Lcstbegin:
-	.uleb128 .LcleanupSTART-.LSTARTCODE
-	.uleb128 .LcleanupEND-.LcleanupSTART
-	.uleb128 __condvar_cleanup1-.LSTARTCODE
-	.uleb128 0
-	.uleb128 .LcallUR-.LSTARTCODE
-	.uleb128 .LENDCODE-.LcallUR
-	.uleb128 0
-	.uleb128 0
-.Lcstend:
-
-
-#ifdef SHARED
-	.hidden	DW.ref.__gcc_personality_v0
-	.weak	DW.ref.__gcc_personality_v0
-	.section .gnu.linkonce.d.DW.ref.__gcc_personality_v0,"aw",@progbits
-	.align	LP_SIZE
-	.type	DW.ref.__gcc_personality_v0, @object
-	.size	DW.ref.__gcc_personality_v0, LP_SIZE
-DW.ref.__gcc_personality_v0:
-	ASM_ADDR __gcc_personality_v0
-#endif
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_once.S glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_once.S
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_once.S	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_once.S	1970-01-01 01:00:00.000000000 +0100
@@ -1,193 +0,0 @@
-/* Copyright (C) 2002-2014 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include <sysdep.h>
-#include <kernel-features.h>
-#include <tcb-offsets.h>
-#include <lowlevellock.h>
-
-
-	.comm	__fork_generation, 4, 4
-
-	.text
-
-
-	.globl	__pthread_once
-	.type	__pthread_once,@function
-	.align	16
-__pthread_once:
-.LSTARTCODE:
-	cfi_startproc
-#ifdef SHARED
-	cfi_personality(DW_EH_PE_pcrel | DW_EH_PE_sdata4 | DW_EH_PE_indirect,
-			DW.ref.__gcc_personality_v0)
-	cfi_lsda(DW_EH_PE_pcrel | DW_EH_PE_sdata4, .LexceptSTART)
-#else
-	cfi_personality(DW_EH_PE_udata4, __gcc_personality_v0)
-	cfi_lsda(DW_EH_PE_udata4, .LexceptSTART)
-#endif
-	testl	$2, (%rdi)
-	jz	1f
-	xorl	%eax, %eax
-	retq
-
-	/* Preserve the function pointer.  */
-1:	pushq	%rsi
-	cfi_adjust_cfa_offset(8)
-	xorq	%r10, %r10
-
-	/* Not yet initialized or initialization in progress.
-	   Get the fork generation counter now.  */
-6:	movl	(%rdi), %eax
-
-5:	movl	%eax, %edx
-
-	testl	$2, %eax
-	jnz	4f
-
-	andl	$3, %edx
-	orl	__fork_generation(%rip), %edx
-	orl	$1, %edx
-
-	LOCK
-	cmpxchgl %edx, (%rdi)
-	jnz	5b
-
-	/* Check whether another thread already runs the initializer.  */
-	testl	$1, %eax
-	jz	3f	/* No -> do it.  */
-
-	/* Check whether the initializer execution was interrupted
-	   by a fork.  */
-	xorl	%edx, %eax
-	testl	$0xfffffffc, %eax
-	jnz	3f	/* Different for generation -> run initializer.  */
-
-	/* Somebody else got here first.  Wait.  */
-#ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$FUTEX_WAIT|FUTEX_PRIVATE_FLAG, %esi
-#else
-# if FUTEX_WAIT == 0
-	movl	%fs:PRIVATE_FUTEX, %esi
-# else
-	movl	$FUTEX_WAIT, %esi
-	orl	%fs:PRIVATE_FUTEX, %esi
-# endif
-#endif
-	movl	$SYS_futex, %eax
-	syscall
-	jmp	6b
-
-	/* Preserve the pointer to the control variable.  */
-3:	pushq	%rdi
-	cfi_adjust_cfa_offset(8)
-	pushq	%rdi
-	cfi_adjust_cfa_offset(8)
-
-.LcleanupSTART:
-	callq	*16(%rsp)
-.LcleanupEND:
-
-	/* Get the control variable address back.  */
-	popq	%rdi
-	cfi_adjust_cfa_offset(-8)
-
-	/* Sucessful run of the initializer.  Signal that we are done.  */
-	LOCK
-	incl	(%rdi)
-
-	addq	$8, %rsp
-	cfi_adjust_cfa_offset(-8)
-
-	/* Wake up all other threads.  */
-	movl	$0x7fffffff, %edx
-#ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$FUTEX_WAKE|FUTEX_PRIVATE_FLAG, %esi
-#else
-	movl	$FUTEX_WAKE, %esi
-	orl	%fs:PRIVATE_FUTEX, %esi
-#endif
-	movl	$SYS_futex, %eax
-	syscall
-
-4:	addq	$8, %rsp
-	cfi_adjust_cfa_offset(-8)
-	xorl	%eax, %eax
-	retq
-	.size	__pthread_once,.-__pthread_once
-
-
-hidden_def (__pthread_once)
-strong_alias (__pthread_once, pthread_once)
-
-
-	.type	clear_once_control,@function
-	.align	16
-clear_once_control:
-	cfi_adjust_cfa_offset(3 * 8)
-	movq	(%rsp), %rdi
-	movq	%rax, %r8
-	movl	$0, (%rdi)
-
-	movl	$0x7fffffff, %edx
-#ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$FUTEX_WAKE|FUTEX_PRIVATE_FLAG, %esi
-#else
-	movl	$FUTEX_WAKE, %esi
-	orl	%fs:PRIVATE_FUTEX, %esi
-#endif
-	movl	$SYS_futex, %eax
-	syscall
-
-	movq	%r8, %rdi
-.LcallUR:
-	call	_Unwind_Resume@PLT
-	hlt
-.LENDCODE:
-	cfi_endproc
-	.size	clear_once_control,.-clear_once_control
-
-
-	.section .gcc_except_table,"a",@progbits
-.LexceptSTART:
-	.byte	DW_EH_PE_omit			# @LPStart format
-	.byte	DW_EH_PE_omit			# @TType format
-	.byte	DW_EH_PE_uleb128		# call-site format
-	.uleb128 .Lcstend-.Lcstbegin
-.Lcstbegin:
-	.uleb128 .LcleanupSTART-.LSTARTCODE
-	.uleb128 .LcleanupEND-.LcleanupSTART
-	.uleb128 clear_once_control-.LSTARTCODE
-	.uleb128  0
-	.uleb128 .LcallUR-.LSTARTCODE
-	.uleb128 .LENDCODE-.LcallUR
-	.uleb128 0
-	.uleb128  0
-.Lcstend:
-
-
-#ifdef SHARED
-	.hidden	DW.ref.__gcc_personality_v0
-	.weak	DW.ref.__gcc_personality_v0
-	.section .gnu.linkonce.d.DW.ref.__gcc_personality_v0,"aw",@progbits
-	.align	LP_SIZE
-	.type	DW.ref.__gcc_personality_v0, @object
-	.size	DW.ref.__gcc_personality_v0, LP_SIZE
-DW.ref.__gcc_personality_v0:
-	ASM_ADDR __gcc_personality_v0
-#endif
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_rdlock.S glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_rdlock.S
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_rdlock.S	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_rdlock.S	1970-01-01 01:00:00.000000000 +0100
@@ -1,177 +0,0 @@
-/* Copyright (C) 2002-2014 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include <sysdep.h>
-#include <lowlevellock.h>
-#include <lowlevelrwlock.h>
-#include <pthread-errnos.h>
-#include <kernel-features.h>
-#include <stap-probe.h>
-
-	.text
-
-	.globl	__pthread_rwlock_rdlock
-	.type	__pthread_rwlock_rdlock,@function
-	.align	16
-__pthread_rwlock_rdlock:
-	cfi_startproc
-
-	LIBC_PROBE (rdlock_entry, 1, %rdi)
-
-	xorq	%r10, %r10
-
-	/* Get the lock.  */
-	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-#if MUTEX == 0
-	cmpxchgl %esi, (%rdi)
-#else
-	cmpxchgl %esi, MUTEX(%rdi)
-#endif
-	jnz	1f
-
-2:	movl	WRITER(%rdi), %eax
-	testl	%eax, %eax
-	jne	14f
-	cmpl	$0, WRITERS_QUEUED(%rdi)
-	je	5f
-	cmpl	$0, FLAGS(%rdi)
-	je	5f
-
-3:	incl	READERS_QUEUED(%rdi)
-	je	4f
-
-	movl	READERS_WAKEUP(%rdi), %edx
-
-	LOCK
-#if MUTEX == 0
-	decl	(%rdi)
-#else
-	decl	MUTEX(%rdi)
-#endif
-	jne	10f
-
-11:
-#ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$FUTEX_PRIVATE_FLAG|FUTEX_WAIT, %esi
-	xorl	PSHARED(%rdi), %esi
-#else
-# if FUTEX_WAIT == 0
-	movl	PSHARED(%rdi), %esi
-# else
-	movl	$FUTEX_WAIT, %esi
-	orl	PSHARED(%rdi), %esi
-# endif
-	xorl	%fs:PRIVATE_FUTEX, %esi
-#endif
-	addq	$READERS_WAKEUP, %rdi
-	movl	$SYS_futex, %eax
-	syscall
-
-	subq	$READERS_WAKEUP, %rdi
-
-	/* Reget the lock.  */
-	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-#if MUTEX == 0
-	cmpxchgl %esi, (%rdi)
-#else
-	cmpxchgl %esi, MUTEX(%rdi)
-#endif
-	jnz	12f
-
-13:	decl	READERS_QUEUED(%rdi)
-	jmp	2b
-
-5:	xorl	%edx, %edx
-	incl	NR_READERS(%rdi)
-	je	8f
-9:	LOCK
-#if MUTEX == 0
-	decl	(%rdi)
-#else
-	decl	MUTEX(%rdi)
-#endif
-	jne	6f
-7:
-
-	movq	%rdx, %rax
-	retq
-
-1:	movl	PSHARED(%rdi), %esi
-#if MUTEX != 0
-	addq	$MUTEX, %rdi
-#endif
-	callq	__lll_lock_wait
-#if MUTEX != 0
-	subq	$MUTEX, %rdi
-#endif
-	jmp	2b
-
-14:	cmpl	%fs:TID, %eax
-	jne	3b
-	/* Deadlock detected.  */
-	movl	$EDEADLK, %edx
-	jmp	9b
-
-6:	movl	PSHARED(%rdi), %esi
-#if MUTEX != 0
-	addq	$MUTEX, %rdi
-#endif
-	callq	__lll_unlock_wake
-#if MUTEX != 0
-	subq	$MUTEX, %rdi
-#endif
-	jmp	7b
-
-	/* Overflow.  */
-8:	decl	NR_READERS(%rdi)
-	movl	$EAGAIN, %edx
-	jmp	9b
-
-	/* Overflow.  */
-4:	decl	READERS_QUEUED(%rdi)
-	movl	$EAGAIN, %edx
-	jmp	9b
-
-10:	movl	PSHARED(%rdi), %esi
-#if MUTEX != 0
-	addq	$MUTEX, %rdi
-#endif
-	callq	__lll_unlock_wake
-#if MUTEX != 0
-	subq	$MUTEX, %rdi
-#endif
-	jmp	11b
-
-12:	movl	PSHARED(%rdi), %esi
-#if MUTEX == 0
-	addq	$MUTEX, %rdi
-#endif
-	callq	__lll_lock_wait
-#if MUTEX != 0
-	subq	$MUTEX, %rdi
-#endif
-	jmp	13b
-	cfi_endproc
-	.size	__pthread_rwlock_rdlock,.-__pthread_rwlock_rdlock
-
-strong_alias (__pthread_rwlock_rdlock, pthread_rwlock_rdlock)
-hidden_def (__pthread_rwlock_rdlock)
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_timedrdlock.S glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_timedrdlock.S
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_timedrdlock.S	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_timedrdlock.S	1970-01-01 01:00:00.000000000 +0100
@@ -1,274 +0,0 @@
-/* Copyright (C) 2002-2014 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include <sysdep.h>
-#include <lowlevellock.h>
-#include <lowlevelrwlock.h>
-#include <pthread-errnos.h>
-#include <kernel-features.h>
-
-	.text
-
-	.globl	pthread_rwlock_timedrdlock
-	.type	pthread_rwlock_timedrdlock,@function
-	.align	16
-pthread_rwlock_timedrdlock:
-	cfi_startproc
-	pushq	%r12
-	cfi_adjust_cfa_offset(8)
-	cfi_rel_offset(%r12, 0)
-	pushq	%r13
-	cfi_adjust_cfa_offset(8)
-	cfi_rel_offset(%r13, 0)
-#ifdef __ASSUME_FUTEX_CLOCK_REALTIME
-# define VALREG	%edx
-#else
-	pushq	%r14
-	cfi_adjust_cfa_offset(8)
-	cfi_rel_offset(%r14, 0)
-
-	subq	$16, %rsp
-	cfi_adjust_cfa_offset(16)
-# define VALREG %r14d
-#endif
-
-	movq	%rdi, %r12
-	movq	%rsi, %r13
-
-	/* Get the lock.  */
-	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-#if MUTEX == 0
-	cmpxchgl %esi, (%rdi)
-#else
-	cmpxchgl %esi, MUTEX(%rdi)
-#endif
-	jnz	1f
-
-2:	movl	WRITER(%r12), %eax
-	testl	%eax, %eax
-	jne	14f
-	cmpl	$0, WRITERS_QUEUED(%r12)
-	je	5f
-	cmpl	$0, FLAGS(%r12)
-	je	5f
-
-	/* Check the value of the timeout parameter.  */
-3:	cmpq	$1000000000, 8(%r13)
-	jae	19f
-
-	incl	READERS_QUEUED(%r12)
-	je	4f
-
-	movl	READERS_WAKEUP(%r12), VALREG
-
-	/* Unlock.  */
-	LOCK
-#if MUTEX == 0
-	decl	(%r12)
-#else
-	decl	MUTEX(%r12)
-#endif
-	jne	10f
-
-11:
-#ifndef __ASSUME_FUTEX_CLOCK_REALTIME
-#  ifdef PIC
-	cmpl	$0, __have_futex_clock_realtime(%rip)
-#  else
-	cmpl	$0, __have_futex_clock_realtime
-#  endif
-	je	.Lreltmo
-#endif
-
-	cmpq	$0, (%r13)
-	js	16f		/* Time is already up.  */
-
-	movl	$FUTEX_PRIVATE_FLAG|FUTEX_WAIT_BITSET|FUTEX_CLOCK_REALTIME, %esi
-	xorl	PSHARED(%r12), %esi
-	movq	%r13, %r10
-	movl	$0xffffffff, %r9d
-#ifndef __ASSUME_FUTEX_CLOCK_REALTIME
-	movl	%r14d, %edx
-#endif
-21:	leaq	READERS_WAKEUP(%r12), %rdi
-	movl	$SYS_futex, %eax
-	syscall
-	movq	%rax, %rdx
-
-#ifndef __ASSUME_FUTEX_CLOCK_REALTIME
-	.subsection 2
-.Lreltmo:
-	/* Get current time.  */
-	movq	%rsp, %rdi
-	xorl	%esi, %esi
-	/* This call works because we directly jump to a system call entry
-	   which preserves all the registers.  */
-	call	JUMPTARGET(__gettimeofday)
-
-	/* Compute relative timeout.  */
-	movq	8(%rsp), %rax
-	movl	$1000, %edi
-	mul	%rdi		/* Milli seconds to nano seconds.  */
-	movq	(%r13), %rcx
-	movq	8(%r13), %rdi
-	subq	(%rsp), %rcx
-	subq	%rax, %rdi
-	jns	15f
-	addq	$1000000000, %rdi
-	decq	%rcx
-15:	testq	%rcx, %rcx
-	js	16f		/* Time is already up.  */
-
-	/* Futex call.  */
-	movq	%rcx, (%rsp)	/* Store relative timeout.  */
-	movq	%rdi, 8(%rsp)
-
-# ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$FUTEX_PRIVATE_FLAG|FUTEX_WAIT, %esi
-	xorl	PSHARED(%r12), %esi
-# else
-#  if FUTEX_WAIT == 0
-	movl	PSHARED(%r12), %esi
-#  else
-	movl	$FUTEX_WAIT, %esi
-	orl	PSHARED(%r12), %esi
-#  endif
-	xorl	%fs:PRIVATE_FUTEX, %esi
-# endif
-	movq	%rsp, %r10
-	movl	%r14d, %edx
-
-	jmp	21b
-	.previous
-#endif
-
-17:	/* Reget the lock.  */
-	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-#if MUTEX == 0
-	cmpxchgl %esi, (%r12)
-#else
-	cmpxchgl %esi, MUTEX(%r12)
-#endif
-	jnz	12f
-
-13:	decl	READERS_QUEUED(%r12)
-	cmpq	$-ETIMEDOUT, %rdx
-	jne	2b
-
-18:	movl	$ETIMEDOUT, %edx
-	jmp	9f
-
-
-5:	xorl	%edx, %edx
-	incl	NR_READERS(%r12)
-	je	8f
-9:	LOCK
-#if MUTEX == 0
-	decl	(%r12)
-#else
-	decl	MUTEX(%r12)
-#endif
-	jne	6f
-
-7:	movq	%rdx, %rax
-
-#ifndef __ASSUME_FUTEX_CLOCK_REALTIME
-	addq	$16, %rsp
-	cfi_adjust_cfa_offset(-16)
-	popq	%r14
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r14)
-#endif
-	popq	%r13
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r13)
-	popq	%r12
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r12)
-	retq
-
-#ifdef __ASSUME_PRIVATE_FUTEX
-	cfi_adjust_cfa_offset(16)
-	cfi_rel_offset(%r12, 8)
-	cfi_rel_offset(%r13, 0)
-#else
-	cfi_adjust_cfa_offset(40)
-	cfi_offset(%r12, -16)
-	cfi_offset(%r13, -24)
-	cfi_offset(%r14, -32)
-#endif
-1:	movl	PSHARED(%rdi), %esi
-#if MUTEX != 0
-	addq	$MUTEX, %rdi
-#endif
-	callq	__lll_lock_wait
-	jmp	2b
-
-14:	cmpl	%fs:TID, %eax
-	jne	3b
-	movl	$EDEADLK, %edx
-	jmp	9b
-
-6:	movl	PSHARED(%r12), %esi
-#if MUTEX == 0
-	movq	%r12, %rdi
-#else
-	leal	MUTEX(%r12), %rdi
-#endif
-	callq	__lll_unlock_wake
-	jmp	7b
-
-	/* Overflow.  */
-8:	decl	NR_READERS(%r12)
-	movl	$EAGAIN, %edx
-	jmp	9b
-
-	/* Overflow.  */
-4:	decl	READERS_QUEUED(%r12)
-	movl	$EAGAIN, %edx
-	jmp	9b
-
-10:	movl	PSHARED(%r12), %esi
-#if MUTEX == 0
-	movq	%r12, %rdi
-#else
-	leaq	MUTEX(%r12), %rdi
-#endif
-	callq	__lll_unlock_wake
-	jmp	11b
-
-12:	movl	PSHARED(%r12), %esi
-#if MUTEX == 0
-	movq	%r12, %rdi
-#else
-	leaq	MUTEX(%r12), %rdi
-#endif
-	callq	__lll_lock_wait
-	jmp	13b
-
-16:	movq	$-ETIMEDOUT, %rdx
-	jmp	17b
-
-19:	movl	$EINVAL, %edx
-	jmp	9b
-	cfi_endproc
-	.size	pthread_rwlock_timedrdlock,.-pthread_rwlock_timedrdlock
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_timedwrlock.S glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_timedwrlock.S
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_timedwrlock.S	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_timedwrlock.S	1970-01-01 01:00:00.000000000 +0100
@@ -1,266 +0,0 @@
-/* Copyright (C) 2002-2014 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include <sysdep.h>
-#include <lowlevellock.h>
-#include <lowlevelrwlock.h>
-#include <pthread-errnos.h>
-#include <kernel-features.h>
-
-	.text
-
-	.globl	pthread_rwlock_timedwrlock
-	.type	pthread_rwlock_timedwrlock,@function
-	.align	16
-pthread_rwlock_timedwrlock:
-	cfi_startproc
-	pushq	%r12
-	cfi_adjust_cfa_offset(8)
-	cfi_rel_offset(%r12, 0)
-	pushq	%r13
-	cfi_adjust_cfa_offset(8)
-	cfi_rel_offset(%r13, 0)
-#ifdef __ASSUME_FUTEX_CLOCK_REALTIME
-# define VALREG	%edx
-#else
-	pushq	%r14
-	cfi_adjust_cfa_offset(8)
-	cfi_rel_offset(%r14, 0)
-
-	subq	$16, %rsp
-	cfi_adjust_cfa_offset(16)
-# define VALREG %r14d
-#endif
-
-	movq	%rdi, %r12
-	movq	%rsi, %r13
-
-	/* Get the lock.  */
-	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-#if MUTEX == 0
-	cmpxchgl %esi, (%rdi)
-#else
-	cmpxchgl %esi, MUTEX(%rdi)
-#endif
-	jnz	1f
-
-2:	movl	WRITER(%r12), %eax
-	testl	%eax, %eax
-	jne	14f
-	cmpl	$0, NR_READERS(%r12)
-	je	5f
-
-	/* Check the value of the timeout parameter.  */
-3:	cmpq	$1000000000, 8(%r13)
-	jae	19f
-
-	incl	WRITERS_QUEUED(%r12)
-	je	4f
-
-	movl	WRITERS_WAKEUP(%r12), VALREG
-
-	LOCK
-#if MUTEX == 0
-	decl	(%r12)
-#else
-	decl	MUTEX(%r12)
-#endif
-	jne	10f
-
-11:
-#ifndef __ASSUME_FUTEX_CLOCK_REALTIME
-#  ifdef PIC
-	cmpl	$0, __have_futex_clock_realtime(%rip)
-#  else
-	cmpl	$0, __have_futex_clock_realtime
-#  endif
-	je	.Lreltmo
-#endif
-
-	cmpq	$0, (%r13)
-	js	16f		/* Time is already up. */
-
-	movl	$FUTEX_PRIVATE_FLAG|FUTEX_WAIT_BITSET|FUTEX_CLOCK_REALTIME, %esi
-	xorl	PSHARED(%r12), %esi
-	movq	%r13, %r10
-	movl	$0xffffffff, %r9d
-#ifndef __ASSUME_FUTEX_CLOCK_REALTIME
-	movl	%r14d, %edx
-#endif
-21:	leaq	WRITERS_WAKEUP(%r12), %rdi
-	movl	$SYS_futex, %eax
-	syscall
-	movq	%rax, %rdx
-
-#ifndef __ASSUME_FUTEX_CLOCK_REALTIME
-	.subsection 2
-.Lreltmo:
-	/* Get current time.  */
-	movq	%rsp, %rdi
-	xorl	%esi, %esi
-	/* This call works because we directly jump to a system call entry
-	   which preserves all the registers.  */
-	call	JUMPTARGET(__gettimeofday)
-
-	/* Compute relative timeout.  */
-	movq	8(%rsp), %rax
-	movl	$1000, %edi
-	mul	%rdi		/* Milli seconds to nano seconds.  */
-	movq	(%r13), %rcx
-	movq	8(%r13), %rdi
-	subq	(%rsp), %rcx
-	subq	%rax, %rdi
-	jns	15f
-	addq	$1000000000, %rdi
-	decq	%rcx
-15:	testq	%rcx, %rcx
-	js	16f		/* Time is already up.  */
-
-	/* Futex call.  */
-	movq	%rcx, (%rsp)	/* Store relative timeout.  */
-	movq	%rdi, 8(%rsp)
-
-# ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$FUTEX_PRIVATE_FLAG|FUTEX_WAIT, %esi
-	xorl	PSHARED(%r12), %esi
-# else
-#  if FUTEX_WAIT == 0
-	movl	PSHARED(%r12), %esi
-#  else
-	movl	$FUTEX_WAIT, %esi
-	orl	PSHARED(%r12), %esi
-#  endif
-	xorl	%fs:PRIVATE_FUTEX, %esi
-# endif
-	movq	%rsp, %r10
-	movl	%r14d, %edx
-
-	jmp	21b
-	.previous
-#endif
-
-17:	/* Reget the lock.  */
-	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-#if MUTEX == 0
-	cmpxchgl %esi, (%r12)
-#else
-	cmpxchgl %esi, MUTEX(%r12)
-#endif
-	jnz	12f
-
-13:	decl	WRITERS_QUEUED(%r12)
-	cmpq	$-ETIMEDOUT, %rdx
-	jne	2b
-
-18:	movl	$ETIMEDOUT, %edx
-	jmp	9f
-
-
-5:	xorl	%edx, %edx
-	movl	%fs:TID, %eax
-	movl	%eax, WRITER(%r12)
-9:	LOCK
-#if MUTEX == 0
-	decl	(%r12)
-#else
-	decl	MUTEX(%r12)
-#endif
-	jne	6f
-
-7:	movq	%rdx, %rax
-
-#ifndef __ASSUME_FUTEX_CLOCK_REALTIME
-	addq	$16, %rsp
-	cfi_adjust_cfa_offset(-16)
-	popq	%r14
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r14)
-#endif
-	popq	%r13
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r13)
-	popq	%r12
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r12)
-	retq
-
-#ifdef __ASSUME_PRIVATE_FUTEX
-	cfi_adjust_cfa_offset(16)
-	cfi_rel_offset(%r12, 8)
-	cfi_rel_offset(%r13, 0)
-#else
-	cfi_adjust_cfa_offset(40)
-	cfi_offset(%r12, -16)
-	cfi_offset(%r13, -24)
-	cfi_offset(%r14, -32)
-#endif
-1:	movl	PSHARED(%rdi), %esi
-#if MUTEX != 0
-	addq	$MUTEX, %rdi
-#endif
-	callq	__lll_lock_wait
-	jmp	2b
-
-14:	cmpl	%fs:TID, %eax
-	jne	3b
-20:	movl	$EDEADLK, %edx
-	jmp	9b
-
-6:	movl	PSHARED(%r12), %esi
-#if MUTEX == 0
-	movq	%r12, %rdi
-#else
-	leal	MUTEX(%r12), %rdi
-#endif
-	callq	__lll_unlock_wake
-	jmp	7b
-
-	/* Overflow.  */
-4:	decl	WRITERS_QUEUED(%r12)
-	movl	$EAGAIN, %edx
-	jmp	9b
-
-10:	movl	PSHARED(%r12), %esi
-#if MUTEX == 0
-	movq	%r12, %rdi
-#else
-	leaq	MUTEX(%r12), %rdi
-#endif
-	callq	__lll_unlock_wake
-	jmp	11b
-
-12:	movl	PSHARED(%r12), %esi
-#if MUTEX == 0
-	movq	%r12, %rdi
-#else
-	leaq	MUTEX(%r12), %rdi
-#endif
-	callq	__lll_lock_wait
-	jmp	13b
-
-16:	movq	$-ETIMEDOUT, %rdx
-	jmp	17b
-
-19:	movl	$EINVAL, %edx
-	jmp	9b
-	cfi_endproc
-	.size	pthread_rwlock_timedwrlock,.-pthread_rwlock_timedwrlock
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_unlock.S glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_unlock.S
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_unlock.S	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_unlock.S	1970-01-01 01:00:00.000000000 +0100
@@ -1,126 +0,0 @@
-/* Copyright (C) 2002-2014 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include <sysdep.h>
-#include <lowlevellock.h>
-#include <lowlevelrwlock.h>
-#include <kernel-features.h>
-
-
-	.text
-
-	.globl	__pthread_rwlock_unlock
-	.type	__pthread_rwlock_unlock,@function
-	.align	16
-__pthread_rwlock_unlock:
-	cfi_startproc
-	/* Get the lock.  */
-	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-#if MUTEX == 0
-	cmpxchgl %esi, (%rdi)
-#else
-	cmpxchgl %esi, MUTEX(%rdi)
-#endif
-	jnz	1f
-
-2:	cmpl	$0, WRITER(%rdi)
-	jne	5f
-	decl	NR_READERS(%rdi)
-	jnz	6f
-
-5:	movl	$0, WRITER(%rdi)
-
-	movl	$1, %edx
-	leaq	WRITERS_WAKEUP(%rdi), %r10
-	cmpl	$0, WRITERS_QUEUED(%rdi)
-	jne	0f
-
-	/* If also no readers waiting nothing to do.  */
-	cmpl	$0, READERS_QUEUED(%rdi)
-	je	6f
-
-	movl	$0x7fffffff, %edx
-	leaq	READERS_WAKEUP(%rdi), %r10
-
-0:	incl	(%r10)
-	LOCK
-#if MUTEX == 0
-	decl	(%rdi)
-#else
-	decl	MUTEX(%rdi)
-#endif
-	jne	7f
-
-8:
-#ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$FUTEX_PRIVATE_FLAG|FUTEX_WAKE, %esi
-	xorl	PSHARED(%rdi), %esi
-#else
-	movl	$FUTEX_WAKE, %esi
-	orl	PSHARED(%rdi), %esi
-	xorl	%fs:PRIVATE_FUTEX, %esi
-#endif
-	movl	$SYS_futex, %eax
-	movq	%r10, %rdi
-	syscall
-
-	xorl	%eax, %eax
-	retq
-
-	.align	16
-6:	LOCK
-#if MUTEX == 0
-	decl	(%rdi)
-#else
-	decl	MUTEX(%rdi)
-#endif
-	jne	3f
-
-4:	xorl	%eax, %eax
-	retq
-
-1:	movl	PSHARED(%rdi), %esi
-#if MUTEX != 0
-	addq	$MUTEX, %rdi
-#endif
-	callq	__lll_lock_wait
-#if MUTEX != 0
-	subq	$MUTEX, %rdi
-#endif
-	jmp	2b
-
-3:	movl	PSHARED(%rdi), %esi
-#if MUTEX != 0
-	addq	$MUTEX, %rdi
-#endif
-	callq	__lll_unlock_wake
-	jmp	4b
-
-7:	movl	PSHARED(%rdi), %esi
-#if MUTEX != 0
-	addq	$MUTEX, %rdi
-#endif
-	callq	__lll_unlock_wake
-	jmp	8b
-	cfi_endproc
-	.size	__pthread_rwlock_unlock,.-__pthread_rwlock_unlock
-
-strong_alias (__pthread_rwlock_unlock, pthread_rwlock_unlock)
-hidden_def (__pthread_rwlock_unlock)
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_wrlock.S glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_wrlock.S
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_wrlock.S	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_wrlock.S	1970-01-01 01:00:00.000000000 +0100
@@ -1,165 +0,0 @@
-/* Copyright (C) 2002-2014 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include <sysdep.h>
-#include <lowlevellock.h>
-#include <lowlevelrwlock.h>
-#include <pthread-errnos.h>
-#include <kernel-features.h>
-#include <stap-probe.h>
-
-	.text
-
-	.globl	__pthread_rwlock_wrlock
-	.type	__pthread_rwlock_wrlock,@function
-	.align	16
-__pthread_rwlock_wrlock:
-	cfi_startproc
-
-	LIBC_PROBE (wrlock_entry, 1, %rdi)
-
-	xorq	%r10, %r10
-
-	/* Get the lock.  */
-	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-#if MUTEX == 0
-	cmpxchgl %esi, (%rdi)
-#else
-	cmpxchgl %esi, MUTEX(%rdi)
-#endif
-	jnz	1f
-
-2:	movl	WRITER(%rdi), %eax
-	testl	%eax, %eax
-	jne	14f
-	cmpl	$0, NR_READERS(%rdi)
-	je	5f
-
-3:	incl	WRITERS_QUEUED(%rdi)
-	je	4f
-
-	movl	WRITERS_WAKEUP(%rdi), %edx
-
-	LOCK
-#if MUTEX == 0
-	decl	(%rdi)
-#else
-	decl	MUTEX(%rdi)
-#endif
-	jne	10f
-
-11:
-#ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$FUTEX_PRIVATE_FLAG|FUTEX_WAIT, %esi
-	xorl	PSHARED(%rdi), %esi
-#else
-# if FUTEX_WAIT == 0
-	movl	PSHARED(%rdi), %esi
-# else
-	movl	$FUTEX_WAIT, %esi
-	orl	PSHARED(%rdi), %esi
-# endif
-	xorl	%fs:PRIVATE_FUTEX, %esi
-#endif
-	addq	$WRITERS_WAKEUP, %rdi
-	movl	$SYS_futex, %eax
-	syscall
-
-	subq	$WRITERS_WAKEUP, %rdi
-
-	/* Reget the lock.  */
-	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-#if MUTEX == 0
-	cmpxchgl %esi, (%rdi)
-#else
-	cmpxchgl %esi, MUTEX(%rdi)
-#endif
-	jnz	12f
-
-13:	decl	WRITERS_QUEUED(%rdi)
-	jmp	2b
-
-5:	xorl	%edx, %edx
-	movl	%fs:TID, %eax
-	movl	%eax, WRITER(%rdi)
-9:	LOCK
-#if MUTEX == 0
-	decl	(%rdi)
-#else
-	decl	MUTEX(%rdi)
-#endif
-	jne	6f
-7:
-
-	movq	%rdx, %rax
-	retq
-
-1:	movl	PSHARED(%rdi), %esi
-#if MUTEX != 0
-	addq	$MUTEX, %rdi
-#endif
-	callq	__lll_lock_wait
-#if MUTEX != 0
-	subq	$MUTEX, %rdi
-#endif
-	jmp	2b
-
-14:	cmpl	%fs:TID, %eax
-	jne	3b
-	movl	$EDEADLK, %edx
-	jmp	9b
-
-6:	movl	PSHARED(%rdi), %esi
-#if MUTEX != 0
-	addq	$MUTEX, %rdi
-#endif
-	callq	__lll_unlock_wake
-	jmp	7b
-
-4:	decl	WRITERS_QUEUED(%rdi)
-	movl	$EAGAIN, %edx
-	jmp	9b
-
-10:	movl	PSHARED(%rdi), %esi
-#if MUTEX != 0
-	addq	$MUTEX, %rdi
-#endif
-	callq	__lll_unlock_wake
-#if MUTEX != 0
-	subq	$MUTEX, %rdi
-#endif
-	jmp	11b
-
-12:	movl	PSHARED(%rdi), %esi
-#if MUTEX != 0
-	addq	$MUTEX, %rdi
-#endif
-	callq	__lll_lock_wait
-#if MUTEX != 0
-	subq	$MUTEX, %rdi
-#endif
-	jmp	13b
-	cfi_endproc
-	.size	__pthread_rwlock_wrlock,.-__pthread_rwlock_wrlock
-
-strong_alias (__pthread_rwlock_wrlock, pthread_rwlock_wrlock)
-hidden_def (__pthread_rwlock_wrlock)
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_spin_unlock.S glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_spin_unlock.S
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_spin_unlock.S	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_spin_unlock.S	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-#include <nptl/sysdeps/x86_64/pthread_spin_unlock.S>
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/sem_post.S glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/sem_post.S
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/sem_post.S	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/sem_post.S	1970-01-01 01:00:00.000000000 +0100
@@ -1,75 +0,0 @@
-/* Copyright (C) 2002-2014 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include <sysdep.h>
-#include <lowlevellock.h>
-#include <shlib-compat.h>
-#include <pthread-errnos.h>
-#include <structsem.h>
-
-
-	.text
-
-	.globl	sem_post
-	.type	sem_post,@function
-	.align	16
-sem_post:
-#if VALUE == 0
-	movl	(%rdi), %eax
-#else
-	movl	VALUE(%rdi), %eax
-#endif
-0:	cmpl	$SEM_VALUE_MAX, %eax
-	je	3f
-	leal	1(%rax), %esi
-	LOCK
-#if VALUE == 0
-	cmpxchgl %esi, (%rdi)
-#else
-	cmpxchgl %esi, VALUE(%rdi)
-#endif
-	jnz	0b
-
-	LP_OP(cmp) $0, NWAITERS(%rdi)
-	je	2f
-
-	movl	$SYS_futex, %eax
-	movl	$FUTEX_WAKE, %esi
-	orl	PRIVATE(%rdi), %esi
-	movl	$1, %edx
-	syscall
-
-	testq	%rax, %rax
-	js	1f
-
-2:	xorl	%eax, %eax
-	retq
-
-1:
-	movl	$EINVAL, %eax
-	jmp	4f
-
-3:
-	movl	$EOVERFLOW, %eax
-
-4:
-	movq	errno@gottpoff(%rip), %rdx
-	movl	%eax, %fs:(%rdx)
-	orl	$-1, %eax
-	retq
-	.size	sem_post,.-sem_post
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/sem_timedwait.S glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/sem_timedwait.S
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/sem_timedwait.S	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/sem_timedwait.S	1970-01-01 01:00:00.000000000 +0100
@@ -1,380 +0,0 @@
-/* Copyright (C) 2002-2014 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include <sysdep.h>
-#include <kernel-features.h>
-#include <lowlevellock.h>
-#include <shlib-compat.h>
-#include <pthread-errnos.h>
-#include <structsem.h>
-
-	.text
-
-	.globl	sem_timedwait
-	.type	sem_timedwait,@function
-	.align	16
-sem_timedwait:
-.LSTARTCODE:
-	cfi_startproc
-#ifdef SHARED
-	cfi_personality(DW_EH_PE_pcrel | DW_EH_PE_sdata4 | DW_EH_PE_indirect,
-			DW.ref.__gcc_personality_v0)
-	cfi_lsda(DW_EH_PE_pcrel | DW_EH_PE_sdata4, .LexceptSTART)
-#else
-	cfi_personality(DW_EH_PE_udata4, __gcc_personality_v0)
-	cfi_lsda(DW_EH_PE_udata4, .LexceptSTART)
-#endif
-#if VALUE == 0
-	movl	(%rdi), %eax
-#else
-	movl	VALUE(%rdi), %eax
-#endif
-2:	testl	%eax, %eax
-	je	1f
-
-	leaq	-1(%rax), %rdx
-	LOCK
-#if VALUE == 0
-	cmpxchgl %edx, (%rdi)
-#else
-	cmpxchgl %edx, VALUE(%rdi)
-#endif
-	jne	2b
-
-	xorl	%eax, %eax
-	retq
-
-	/* Check whether the timeout value is valid.  */
-1:	cmpq	$1000000000, 8(%rsi)
-	jae	6f
-
-#ifndef __ASSUME_FUTEX_CLOCK_REALTIME
-#  ifdef PIC
-	cmpl	$0, __have_futex_clock_realtime(%rip)
-#  else
-	cmpl	$0, __have_futex_clock_realtime
-#  endif
-	je	.Lreltmo
-#endif
-
-	cmpq	$0, (%rsi)
-	js	16f
-
-	/* This push is only needed to store the sem_t pointer for the
-	   exception handler.  */
-	pushq	%rdi
-	cfi_adjust_cfa_offset(8)
-
-	movq	%rsi, %r10
-
-	LOCK
-	LP_OP(add) $1, NWAITERS(%rdi)
-
-.LcleanupSTART:
-13:	call	__pthread_enable_asynccancel
-	movl	%eax, %r8d
-
-#if VALUE != 0
-	leaq	VALUE(%rdi), %rdi
-#endif
-	movl	$0xffffffff, %r9d
-	movl	$FUTEX_WAIT_BITSET|FUTEX_CLOCK_REALTIME, %esi
-	orl	PRIVATE(%rdi), %esi
-	movl	$SYS_futex, %eax
-	xorl	%edx, %edx
-	syscall
-	movq	%rax, %r9
-#if VALUE != 0
-	leaq	-VALUE(%rdi), %rdi
-#endif
-
-	xchgq	%r8, %rdi
-	call	__pthread_disable_asynccancel
-.LcleanupEND:
-	movq	%r8, %rdi
-
-	testq	%r9, %r9
-	je	11f
-	cmpq	$-EWOULDBLOCK, %r9
-	jne	3f
-
-11:
-#if VALUE == 0
-	movl	(%rdi), %eax
-#else
-	movl	VALUE(%rdi), %eax
-#endif
-14:	testl	%eax, %eax
-	je	13b
-
-	leaq	-1(%rax), %rcx
-	LOCK
-#if VALUE == 0
-	cmpxchgl %ecx, (%rdi)
-#else
-	cmpxchgl %ecx, VALUE(%rdi)
-#endif
-	jne	14b
-
-	xorl	%eax, %eax
-
-15:	LOCK
-	LP_OP(sub) $1, NWAITERS(%rdi)
-
-	leaq	8(%rsp), %rsp
-	cfi_adjust_cfa_offset(-8)
-	retq
-
-	cfi_adjust_cfa_offset(8)
-3:	negq	%r9
-	movq	errno@gottpoff(%rip), %rdx
-	movl	%r9d, %fs:(%rdx)
-
-	orl	$-1, %eax
-	jmp	15b
-
-	cfi_adjust_cfa_offset(-8)
-6:
-	movq	errno@gottpoff(%rip), %rdx
-	movl	$EINVAL, %fs:(%rdx)
-
-	orl	$-1, %eax
-
-	retq
-
-16:
-	movq	errno@gottpoff(%rip), %rdx
-	movl	$ETIMEDOUT, %fs:(%rdx)
-
-	orl	$-1, %eax
-
-	retq
-
-#ifndef __ASSUME_FUTEX_CLOCK_REALTIME
-.Lreltmo:
-	pushq	%r12
-	cfi_adjust_cfa_offset(8)
-	cfi_rel_offset(%r12, 0)
-	pushq	%r13
-	cfi_adjust_cfa_offset(8)
-	cfi_rel_offset(%r13, 0)
-	pushq	%r14
-	cfi_adjust_cfa_offset(8)
-	cfi_rel_offset(%r14, 0)
-
-#ifdef __ASSUME_FUTEX_CLOCK_REALTIME
-# define STACKFRAME 8
-#else
-# define STACKFRAME 24
-#endif
-	subq	$STACKFRAME, %rsp
-	cfi_adjust_cfa_offset(STACKFRAME)
-
-	movq	%rdi, %r12
-	movq	%rsi, %r13
-
-	LOCK
-	LP_OP(add) $1, NWAITERS(%r12)
-
-7:	xorl	%esi, %esi
-	movq	%rsp,%rdi
-	/* This call works because we directly jump to a system call entry
-	   which preserves all the registers.  */
-	call	JUMPTARGET(__gettimeofday)
-
-	/* Compute relative timeout.  */
-	movq	8(%rsp), %rax
-	movl	$1000, %edi
-	mul	%rdi		/* Milli seconds to nano seconds.  */
-	movq	(%r13), %rdi
-	movq	8(%r13), %rsi
-	subq	(%rsp), %rdi
-	subq	%rax, %rsi
-	jns	5f
-	addq	$1000000000, %rsi
-	decq	%rdi
-5:	testq	%rdi, %rdi
-	movl	$ETIMEDOUT, %r14d
-	js	36f		/* Time is already up.  */
-
-	movq	%rdi, (%rsp)	/* Store relative timeout.  */
-	movq	%rsi, 8(%rsp)
-
-.LcleanupSTART2:
-	call	__pthread_enable_asynccancel
-	movl	%eax, 16(%rsp)
-
-	movq	%rsp, %r10
-# if VALUE == 0
-	movq	%r12, %rdi
-# else
-	leaq	VALUE(%r12), %rdi
-# endif
-# if FUTEX_WAIT == 0
-	movl	PRIVATE(%rdi), %esi
-# else
-	movl	$FUTEX_WAIT, %esi
-	orl	PRIVATE(%rdi), %esi
-# endif
-	movl	$SYS_futex, %eax
-	xorl	%edx, %edx
-	syscall
-	movq	%rax, %r14
-
-	movl	16(%rsp), %edi
-	call	__pthread_disable_asynccancel
-.LcleanupEND2:
-
-	testq	%r14, %r14
-	je	9f
-	cmpq	$-EWOULDBLOCK, %r14
-	jne	33f
-
-9:
-# if VALUE == 0
-	movl	(%r12), %eax
-# else
-	movl	VALUE(%r12), %eax
-# endif
-8:	testl	%eax, %eax
-	je	7b
-
-	leaq	-1(%rax), %rcx
-	LOCK
-# if VALUE == 0
-	cmpxchgl %ecx, (%r12)
-# else
-	cmpxchgl %ecx, VALUE(%r12)
-# endif
-	jne	8b
-
-	xorl	%eax, %eax
-
-45:	LOCK
-	LP_OP(sub) $1, NWAITERS(%r12)
-
-	addq	$STACKFRAME, %rsp
-	cfi_adjust_cfa_offset(-STACKFRAME)
-	popq	%r14
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r14)
-	popq	%r13
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r13)
-	popq	%r12
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r12)
-	retq
-
-	cfi_adjust_cfa_offset(STACKFRAME + 3 * 8)
-	cfi_rel_offset(%r12, STACKFRAME + 2 * 8)
-	cfi_rel_offset(%r13, STACKFRAME + 1 * 8)
-	cfi_rel_offset(%r14, STACKFRAME)
-33:	negq	%r14
-36:
-	movq	errno@gottpoff(%rip), %rdx
-	movl	%r14d, %fs:(%rdx)
-
-	orl	$-1, %eax
-	jmp	45b
-#endif
-	cfi_endproc
-	.size	sem_timedwait,.-sem_timedwait
-
-
-	.type	sem_timedwait_cleanup,@function
-sem_timedwait_cleanup:
-	cfi_startproc
-	cfi_adjust_cfa_offset(8)
-
-	movq	(%rsp), %rdi
-	LOCK
-	LP_OP(sub) $1, NWAITERS(%rdi)
-	movq	%rax, %rdi
-.LcallUR:
-	call	_Unwind_Resume@PLT
-	hlt
-.LENDCODE:
-	cfi_endproc
-	.size	sem_timedwait_cleanup,.-sem_timedwait_cleanup
-
-
-#ifndef __ASSUME_FUTEX_CLOCK_REALTIME
-	.type	sem_timedwait_cleanup2,@function
-sem_timedwait_cleanup2:
-	cfi_startproc
-	cfi_adjust_cfa_offset(STACKFRAME + 3 * 8)
-	cfi_rel_offset(%r12, STACKFRAME + 2 * 8)
-	cfi_rel_offset(%r13, STACKFRAME + 1 * 8)
-	cfi_rel_offset(%r14, STACKFRAME)
-
-	LOCK
-	LP_OP(sub) $1, NWAITERS(%r12)
-	movq	%rax, %rdi
-	movq	STACKFRAME(%rsp), %r14
-	movq	STACKFRAME+8(%rsp), %r13
-	movq	STACKFRAME+16(%rsp), %r12
-.LcallUR2:
-	call	_Unwind_Resume@PLT
-	hlt
-.LENDCODE2:
-	cfi_endproc
-	.size	sem_timedwait_cleanup2,.-sem_timedwait_cleanup2
-#endif
-
-
-	.section .gcc_except_table,"a",@progbits
-.LexceptSTART:
-	.byte	DW_EH_PE_omit			# @LPStart format
-	.byte	DW_EH_PE_omit			# @TType format
-	.byte	DW_EH_PE_uleb128		# call-site format
-	.uleb128 .Lcstend-.Lcstbegin
-.Lcstbegin:
-	.uleb128 .LcleanupSTART-.LSTARTCODE
-	.uleb128 .LcleanupEND-.LcleanupSTART
-	.uleb128 sem_timedwait_cleanup-.LSTARTCODE
-	.uleb128  0
-#ifndef __ASSUME_FUTEX_CLOCK_REALTIME
-	.uleb128 .LcleanupSTART2-.LSTARTCODE
-	.uleb128 .LcleanupEND2-.LcleanupSTART2
-	.uleb128 sem_timedwait_cleanup2-.LSTARTCODE
-	.uleb128  0
-#endif
-	.uleb128 .LcallUR-.LSTARTCODE
-	.uleb128 .LENDCODE-.LcallUR
-	.uleb128 0
-	.uleb128  0
-#ifndef __ASSUME_FUTEX_CLOCK_REALTIME
-	.uleb128 .LcallUR2-.LSTARTCODE
-	.uleb128 .LENDCODE2-.LcallUR2
-	.uleb128 0
-	.uleb128  0
-#endif
-.Lcstend:
-
-
-#ifdef SHARED
-	.hidden	DW.ref.__gcc_personality_v0
-	.weak	DW.ref.__gcc_personality_v0
-	.section .gnu.linkonce.d.DW.ref.__gcc_personality_v0,"aw",@progbits
-	.align	LP_SIZE
-	.type	DW.ref.__gcc_personality_v0, @object
-	.size	DW.ref.__gcc_personality_v0, LP_SIZE
-DW.ref.__gcc_personality_v0:
-	ASM_ADDR __gcc_personality_v0
-#endif
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/sem_trywait.S glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/sem_trywait.S
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/sem_trywait.S	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/sem_trywait.S	1970-01-01 01:00:00.000000000 +0100
@@ -1,47 +0,0 @@
-/* Copyright (C) 2002-2014 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include <sysdep.h>
-#include <lowlevellock.h>
-#include <shlib-compat.h>
-#include <pthread-errnos.h>
-
-	.text
-
-	.globl	sem_trywait
-	.type	sem_trywait,@function
-	.align	16
-sem_trywait:
-	movl	(%rdi), %eax
-2:	testl	%eax, %eax
-	jz	1f
-
-	leal	-1(%rax), %edx
-	LOCK
-	cmpxchgl %edx, (%rdi)
-	jne	2b
-
-	xorl	%eax, %eax
-	retq
-
-1:
-	movq	errno@gottpoff(%rip), %rdx
-	movl	$EAGAIN, %fs:(%rdx)
-	orl	$-1, %eax
-	retq
-	.size	sem_trywait,.-sem_trywait
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/sem_wait.S glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/sem_wait.S
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/sem_wait.S	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/sem_wait.S	1970-01-01 01:00:00.000000000 +0100
@@ -1,176 +0,0 @@
-/* Copyright (C) 2002-2014 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include <sysdep.h>
-#include <lowlevellock.h>
-#include <shlib-compat.h>
-#include <pthread-errnos.h>
-#include <structsem.h>
-
-
-	.text
-
-	.globl	sem_wait
-	.type	sem_wait,@function
-	.align	16
-sem_wait:
-.LSTARTCODE:
-	cfi_startproc
-#ifdef SHARED
-	cfi_personality(DW_EH_PE_pcrel | DW_EH_PE_sdata4 | DW_EH_PE_indirect,
-			DW.ref.__gcc_personality_v0)
-	cfi_lsda(DW_EH_PE_pcrel | DW_EH_PE_sdata4, .LexceptSTART)
-#else
-	cfi_personality(DW_EH_PE_udata4, __gcc_personality_v0)
-	cfi_lsda(DW_EH_PE_udata4, .LexceptSTART)
-#endif
-
-#if VALUE == 0
-	movl	(%rdi), %eax
-#else
-	movl	VALUE(%rdi), %eax
-#endif
-2:	testl	%eax, %eax
-	je	1f
-
-	leal	-1(%rax), %edx
-	LOCK
-#if VALUE == 0
-	cmpxchgl %edx, (%rdi)
-#else
-	cmpxchgl %edx, VALUE(%rdi)
-#endif
-	jne	2b
-
-	xorl	%eax, %eax
-	retq
-
-	/* This push is only needed to store the sem_t pointer for the
-	   exception handler.  */
-1:	pushq	%rdi
-	cfi_adjust_cfa_offset(8)
-
-	LOCK
-	LP_OP(add) $1, NWAITERS(%rdi)
-
-.LcleanupSTART:
-6:	call	__pthread_enable_asynccancel
-	movl	%eax, %r8d
-
-	xorq	%r10, %r10
-	movl	$SYS_futex, %eax
-#if FUTEX_WAIT == 0
-	movl	PRIVATE(%rdi), %esi
-#else
-	movl	$FUTEX_WAIT, %esi
-	orl	PRIVATE(%rdi), %esi
-#endif
-	xorl	%edx, %edx
-	syscall
-	movq	%rax, %rcx
-
-	xchgq	%r8, %rdi
-	call	__pthread_disable_asynccancel
-.LcleanupEND:
-	movq	%r8, %rdi
-
-	testq	%rcx, %rcx
-	je	3f
-	cmpq	$-EWOULDBLOCK, %rcx
-	jne	4f
-
-3:
-#if VALUE == 0
-	movl	(%rdi), %eax
-#else
-	movl	VALUE(%rdi), %eax
-#endif
-5:	testl	%eax, %eax
-	je	6b
-
-	leal	-1(%rax), %edx
-	LOCK
-#if VALUE == 0
-	cmpxchgl %edx, (%rdi)
-#else
-	cmpxchgl %edx, VALUE(%rdi)
-#endif
-	jne	5b
-
-	xorl	%eax, %eax
-
-9:	LOCK
-	LP_OP(sub) $1, NWAITERS(%rdi)
-
-	leaq	8(%rsp), %rsp
-	cfi_adjust_cfa_offset(-8)
-
-	retq
-
-	cfi_adjust_cfa_offset(8)
-4:	negq	%rcx
-	movq	errno@gottpoff(%rip), %rdx
-	movl	%ecx, %fs:(%rdx)
-	orl	$-1, %eax
-
-	jmp 9b
-	.size	sem_wait,.-sem_wait
-
-
-	.type	sem_wait_cleanup,@function
-sem_wait_cleanup:
-	movq	(%rsp), %rdi
-	LOCK
-	LP_OP(sub) $1, NWAITERS(%rdi)
-	movq	%rax, %rdi
-.LcallUR:
-	call	_Unwind_Resume@PLT
-	hlt
-.LENDCODE:
-	cfi_endproc
-	.size	sem_wait_cleanup,.-sem_wait_cleanup
-
-
-	.section .gcc_except_table,"a",@progbits
-.LexceptSTART:
-	.byte	DW_EH_PE_omit			# @LPStart format
-	.byte	DW_EH_PE_omit			# @TType format
-	.byte	DW_EH_PE_uleb128		# call-site format
-	.uleb128 .Lcstend-.Lcstbegin
-.Lcstbegin:
-	.uleb128 .LcleanupSTART-.LSTARTCODE
-	.uleb128 .LcleanupEND-.LcleanupSTART
-	.uleb128 sem_wait_cleanup-.LSTARTCODE
-	.uleb128  0
-	.uleb128 .LcallUR-.LSTARTCODE
-	.uleb128 .LENDCODE-.LcallUR
-	.uleb128 0
-	.uleb128  0
-.Lcstend:
-
-
-#ifdef SHARED
-	.hidden	DW.ref.__gcc_personality_v0
-	.weak	DW.ref.__gcc_personality_v0
-	.section .gnu.linkonce.d.DW.ref.__gcc_personality_v0,"aw",@progbits
-	.align	LP_SIZE
-	.type	DW.ref.__gcc_personality_v0, @object
-	.size	DW.ref.__gcc_personality_v0, LP_SIZE
-DW.ref.__gcc_personality_v0:
-	ASM_ADDR __gcc_personality_v0
-#endif
diff -r -N --unified glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/timer_create.c glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/timer_create.c
--- glibc-2.19.orig/nptl/sysdeps/unix/sysv/linux/x86_64/timer_create.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/sysdeps/unix/sysv/linux/x86_64/timer_create.c	2015-06-05 15:42:14.210422508 +0200
@@ -42,7 +42,7 @@
     {
       int i;
       for (i = 0; i < OLD_TIMER_MAX; ++i)
-	if (__compat_timer_list[i] == NULL
+	if (atomic_load(__compat_timer_list[i]) == NULL
 	    && ! atomic_compare_and_exchange_bool_acq (&__compat_timer_list[i],
 						       newp, NULL))
 	  {
diff -r -N --unified glibc-2.19.orig/nptl/tpp.c glibc-2.19-swoc/nptl/tpp.c
--- glibc-2.19.orig/nptl/tpp.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nptl/tpp.c	2015-06-05 15:42:14.210422508 +0200
@@ -33,7 +33,7 @@
 {
   __sched_fifo_max_prio = sched_get_priority_max (SCHED_FIFO);
   atomic_write_barrier ();
-  __sched_fifo_min_prio = sched_get_priority_min (SCHED_FIFO);
+  atomic_store(__sched_fifo_min_prio, sched_get_priority_min (SCHED_FIFO));
 }
 
 int
@@ -44,7 +44,7 @@
 
   if (tpp == NULL)
     {
-      if (__sched_fifo_min_prio == -1)
+      if (atomic_load(__sched_fifo_min_prio) == -1)
 	__init_sched_fifo_prio ();
 
       size_t size = sizeof *tpp;
@@ -100,7 +100,7 @@
 
   if ((self->flags & ATTR_FLAG_SCHED_SET) == 0)
     {
-      if (__sched_getparam (self->tid, &self->schedparam) != 0)
+      if (__sched_getparam (atomic_load(self->tid), &self->schedparam) != 0)
 	result = errno;
       else
 	self->flags |= ATTR_FLAG_SCHED_SET;
@@ -108,7 +108,7 @@
 
   if ((self->flags & ATTR_FLAG_POLICY_SET) == 0)
     {
-      self->schedpolicy = __sched_getscheduler (self->tid);
+      self->schedpolicy = __sched_getscheduler (atomic_load(self->tid));
       if (self->schedpolicy == -1)
 	result = errno;
       else
@@ -123,7 +123,7 @@
 	  if (sp.sched_priority < newpriomax)
 	    sp.sched_priority = newpriomax;
 
-	  if (__sched_setscheduler (self->tid, self->schedpolicy, &sp) < 0)
+	  if (__sched_setscheduler (atomic_load(self->tid), self->schedpolicy, &sp) < 0)
 	    result = errno;
 	}
     }
@@ -147,7 +147,7 @@
 
   if ((self->flags & ATTR_FLAG_SCHED_SET) == 0)
     {
-      if (__sched_getparam (self->tid, &self->schedparam) != 0)
+      if (__sched_getparam (atomic_load(self->tid), &self->schedparam) != 0)
 	result = -1;
       else
 	self->flags |= ATTR_FLAG_SCHED_SET;
@@ -155,7 +155,7 @@
 
   if ((self->flags & ATTR_FLAG_POLICY_SET) == 0)
     {
-      self->schedpolicy = __sched_getscheduler (self->tid);
+      self->schedpolicy = __sched_getscheduler (atomic_load(self->tid));
       if (self->schedpolicy == -1)
 	result = -1;
       else
diff -r -N --unified glibc-2.19.orig/nss/getXXbyYY_r.c glibc-2.19-swoc/nss/getXXbyYY_r.c
--- glibc-2.19.orig/nss/getXXbyYY_r.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/nss/getXXbyYY_r.c	2015-06-05 15:42:14.210422508 +0200
@@ -200,7 +200,7 @@
     }
 #endif
 
-  if (! startp_initialized)
+  if (! atomic_load(startp_initialized))
     {
       no_more = DB_LOOKUP_FCT (&nip, REENTRANT_NAME_STRING,
 			       REENTRANT2_NAME_STRING, &fct.ptr);
@@ -244,7 +244,7 @@
       /* Make sure start_fct and startp are written before
 	 startp_initialized.  */
       atomic_write_barrier ();
-      startp_initialized = true;
+      atomic_store(startp_initialized, true);
     }
   else
     {
diff -r -N --unified glibc-2.19.orig/stdlib/cxa_atexit.c glibc-2.19-swoc/stdlib/cxa_atexit.c
--- glibc-2.19.orig/stdlib/cxa_atexit.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/stdlib/cxa_atexit.c	2015-06-05 15:42:14.210422508 +0200
@@ -44,7 +44,7 @@
   new->func.cxa.arg = arg;
   new->func.cxa.dso_handle = d;
   atomic_write_barrier ();
-  new->flavor = ef_cxa;
+  atomic_store(new->flavor, ef_cxa);
   return 0;
 }
 
diff -r -N --unified glibc-2.19.orig/stdlib/cxa_finalize.c glibc-2.19-swoc/stdlib/cxa_finalize.c
--- glibc-2.19.orig/stdlib/cxa_finalize.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/stdlib/cxa_finalize.c	2015-06-05 15:42:14.210422508 +0200
@@ -32,7 +32,7 @@
   struct exit_function_list *funcs;
 
  restart:
-  for (funcs = __exit_funcs; funcs; funcs = funcs->next)
+  for (funcs = atomic_load(__exit_funcs); funcs; funcs = atomic_load(funcs->next))
     {
       struct exit_function *f;
 
@@ -41,10 +41,10 @@
 	  void (*cxafn) (void *arg, int status);
 	  void *cxaarg;
 
-	  if ((d == NULL || d == f->func.cxa.dso_handle)
+	  if ((d == NULL || d == atomic_load(f->func.cxa.dso_handle))
 	      /* We don't want to run this cleanup more than once.  */
-	      && (cxafn = f->func.cxa.fn,
-		  cxaarg = f->func.cxa.arg,
+	      && (cxafn = atomic_load(f->func.cxa.fn),
+		  cxaarg = atomic_load(f->func.cxa.arg),
 		  ! catomic_compare_and_exchange_bool_acq (&f->flavor, ef_free,
 							   ef_cxa)))
 	    {
@@ -64,13 +64,13 @@
     }
 
   /* Also remove the quick_exit handlers, but do not call them.  */
-  for (funcs = __quick_exit_funcs; funcs; funcs = funcs->next)
+  for (funcs = atomic_load(__quick_exit_funcs); funcs; funcs = atomic_load(funcs->next))
     {
       struct exit_function *f;
 
       for (f = &funcs->fns[funcs->idx - 1]; f >= &funcs->fns[0]; --f)
-	if (d == NULL || d == f->func.cxa.dso_handle)
-	  f->flavor = ef_free;
+	if (d == NULL || d == atomic_load(f->func.cxa.dso_handle))
+	  atomic_store(f->flavor, ef_free);
     }
 
   /* Remove the registered fork handlers.  We do not have to
diff -r -N --unified glibc-2.19.orig/stdlib/msort.c glibc-2.19-swoc/stdlib/msort.c
--- glibc-2.19.orig/stdlib/msort.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/stdlib/msort.c	2015-06-05 15:42:14.210422508 +0200
@@ -182,7 +182,7 @@
       static long int phys_pages;
       static int pagesize;
 
-      if (pagesize == 0)
+      if (atomic_load(pagesize) == 0)
 	{
 	  phys_pages = __sysconf (_SC_PHYS_PAGES);
 
@@ -200,7 +200,7 @@
 	  /* Make sure phys_pages is written to memory.  */
 	  atomic_write_barrier ();
 
-	  pagesize = __sysconf (_SC_PAGESIZE);
+	  atomic_store(pagesize, __sysconf (_SC_PAGESIZE));
 	}
 
       /* Just a comment here.  We cannot compute
diff -r -N --unified glibc-2.19.orig/stdlib/on_exit.c glibc-2.19-swoc/stdlib/on_exit.c
--- glibc-2.19.orig/stdlib/on_exit.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/stdlib/on_exit.c	2015-06-05 15:42:14.210422508 +0200
@@ -35,7 +35,7 @@
   new->func.on.fn = func;
   new->func.on.arg = arg;
   atomic_write_barrier ();
-  new->flavor = ef_on;
+  atomic_store(new->flavor, ef_on);
   return 0;
 }
 weak_alias (__on_exit, on_exit)
diff -r -N --unified glibc-2.19.orig/sysdeps/unix/sysv/linux/check_pf.c glibc-2.19-swoc/sysdeps/unix/sysv/linux/check_pf.c
--- glibc-2.19.orig/sysdeps/unix/sysv/linux/check_pf.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/sysdeps/unix/sysv/linux/check_pf.c	2015-06-05 15:42:14.210422508 +0200
@@ -75,7 +75,7 @@
   if (atomic_increment_val (&nl_timestamp) == 0)
     atomic_increment (&nl_timestamp);
 
-  return nl_timestamp;
+  return atomic_load(nl_timestamp);
 }
 #endif
 
@@ -364,7 +364,7 @@
       *in6ailen = data->in6ailen;
       *in6ai = data->in6ai;
 
-      if (olddata != NULL && olddata->usecnt > 0
+      if (atomic_load(olddata) != NULL && atomic_load(olddata->usecnt) > 0
 	  && atomic_add_zero (&olddata->usecnt, -1))
 	free (olddata);
 
diff -r -N --unified glibc-2.19.orig/sysdeps/unix/sysv/linux/getsysstats.c glibc-2.19-swoc/sysdeps/unix/sysv/linux/getsysstats.c
--- glibc-2.19.orig/sysdeps/unix/sysv/linux/getsysstats.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/sysdeps/unix/sysv/linux/getsysstats.c	2015-06-05 15:42:14.210422508 +0200
@@ -130,7 +130,7 @@
   static time_t timestamp;
 
   time_t now = time (NULL);
-  time_t prev = timestamp;
+  time_t prev = atomic_load(timestamp);
   atomic_read_barrier ();
   if (now == prev)
     return cached_result;
@@ -224,7 +224,7 @@
  out:
   cached_result = result;
   atomic_write_barrier ();
-  timestamp = now;
+  atomic_store(timestamp, now);
 
   return result;
 }
diff -r -N --unified glibc-2.19.orig/sysdeps/unix/sysv/linux/malloc-sysdep.h glibc-2.19-swoc/sysdeps/unix/sysv/linux/malloc-sysdep.h
--- glibc-2.19.orig/sysdeps/unix/sysv/linux/malloc-sysdep.h	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/sysdeps/unix/sysv/linux/malloc-sysdep.h	2015-06-05 15:42:14.210422508 +0200
@@ -34,13 +34,14 @@
 check_may_shrink_heap (void)
 {
   static int may_shrink_heap = -1;
+  int tmp_shrink_heap = atomic_load(may_shrink_heap);
 
-  if (__builtin_expect (may_shrink_heap >= 0, 1))
-    return may_shrink_heap;
+  if (__builtin_expect (tmp_shrink_heap >= 0, 1))
+    return tmp_shrink_heap;
 
-  may_shrink_heap = __libc_enable_secure;
+  atomic_store(may_shrink_heap, __libc_enable_secure);
 
-  if (__builtin_expect (may_shrink_heap == 0, 1))
+  if (__builtin_expect (atomic_load(may_shrink_heap) == 0, 1))
     {
       int fd = open_not_cancel_2 ("/proc/sys/vm/overcommit_memory",
 				  O_RDONLY | O_CLOEXEC);
@@ -48,12 +49,12 @@
 	{
 	  char val;
 	  ssize_t n = read_not_cancel (fd, &val, 1);
-	  may_shrink_heap = n > 0 && val == '2';
+	  atomic_store(may_shrink_heap, n > 0 && val == '2');
 	  close_not_cancel_no_status (fd);
 	}
     }
 
-  return may_shrink_heap;
+  return atomic_load(may_shrink_heap);
 }
 
 #define HAVE_MREMAP 1
diff -r -N --unified glibc-2.19.orig/sysdeps/unix/sysv/linux/x86_64/time.c glibc-2.19-swoc/sysdeps/unix/sysv/linux/x86_64/time.c
--- glibc-2.19.orig/sysdeps/unix/sysv/linux/x86_64/time.c	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/sysdeps/unix/sysv/linux/x86_64/time.c	2015-08-03 16:09:37.585086506 +0200
@@ -15,7 +15,8 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
-#ifdef SHARED
+//#ifdef SHARED
+#if 0
 /* Redefine time so that the compiler won't complain about the type
    mismatch with the IFUNC selector in strong_alias, below.  */
 #undef time
@@ -47,14 +48,27 @@
 
 #else
 
+#undef time
+#define time __redirect_time
 # include <time.h>
 # include <sysdep.h>
 
+
+extern __typeof (__redirect_time) __libc_time;
+time_t
+mvee_time (time_t *t) __asm__("__libc_time");
+
+
 time_t
-time (time_t *t)
+mvee_time (time_t *t)
 {
   INTERNAL_SYSCALL_DECL (err);
   return INTERNAL_SYSCALL (time, err, 1, t);
 }
 
+#undef time
+strong_alias (__libc_time, time)
+libc_hidden_ver (__libc_time, time)
+
+
 #endif
diff -r -N --unified glibc-2.19.orig/sysdeps/x86_64/bits/atomic.h glibc-2.19-swoc/sysdeps/x86_64/bits/atomic.h
--- glibc-2.19.orig/sysdeps/x86_64/bits/atomic.h	2014-02-07 10:04:38.000000000 +0100
+++ glibc-2.19-swoc/sysdeps/x86_64/bits/atomic.h	2015-07-15 15:17:35.748776638 +0200
@@ -55,10 +55,71 @@
 # endif
 #endif
 
+#define orig_catomic_max(mem, value)					\
+  do {									\
+    __typeof (*(mem)) __atg9_oldv;					\
+    __typeof (mem) __atg9_memp = (mem);					\
+    __typeof (*(mem)) __atg9_value = (value);				\
+    do {								\
+      __atg9_oldv = *(volatile __typeof (mem))__atg9_memp;		\
+      if (__atg9_oldv >= __atg9_value)					\
+	break;								\
+    } while (__builtin_expect						\
+	     (orig_catomic_compare_and_exchange_bool_acq (__atg9_memp,	\
+							  __atg9_value,	\
+							  __atg9_oldv), 0)); \
+  } while (0)
+
+// overrides from include/atomic.h
+#define orig_catomic_compare_and_exchange_val_acq(mem, newval, oldval)	\
+  __atomic_val_bysize (__arch_c_compare_and_exchange_val,acq,		\
+		       mem, newval, oldval)
+
+#define orig_catomic_compare_and_exchange_bool_acq(mem, newval, oldval) \
+  ({ __typeof (oldval) __atg3_old = (oldval);				\
+    orig_catomic_compare_and_exchange_val_acq (mem, newval, __atg3_old) \
+      != __atg3_old;							\
+  })
+
+#define orig_atomic_forced_read(x) \
+  ({ __typeof (x) __x; __asm ("" : "=r" (__x) : "0" (x)); __x; })
+
+// MVEE additions
+#define orig_atomic_max(mem, value)					\
+  do {									\
+    __typeof (*(mem)) __atg8_oldval;					\
+    __typeof (mem) __atg8_memp = (mem);					\
+    __typeof (*(mem)) __atg8_value = (value);				\
+    do {								\
+      __atg8_oldval = *(volatile __typeof (mem))__atg8_memp;		\
+      if (__atg8_oldval >= __atg8_value)				\
+	break;								\
+    } while (__builtin_expect						\
+	     (orig_atomic_compare_and_exchange_bool_acq (__atg8_memp, __atg8_value, \
+							 __atg8_oldval), 0)); \
+  } while (0)
+
+#define orig_atomic_decrement_if_positive(mem)				\
+  ({ __typeof (*(mem)) __atg11_oldval;					\
+    __typeof (mem) __atg11_memp = (mem);				\
+									\
+    do									\
+      {									\
+	__atg11_oldval = *(volatile __typeof (mem))__atg11_memp;	\
+	if (__builtin_expect (__atg11_oldval <= 0, 0))			\
+	  break;							\
+      }									\
+    while (__builtin_expect						\
+	   (orig_atomic_compare_and_exchange_bool_acq (__atg11_memp,	\
+						       __atg11_oldval - 1, \
+						       __atg11_oldval), 0)); \
+    __atg11_oldval; })
+
 
-#define atomic_compare_and_exchange_val_acq(mem, newval, oldval) \
+// original sysdeps atomics
+#define orig_atomic_compare_and_exchange_val_acq(mem, newval, oldval) \
   __sync_val_compare_and_swap (mem, oldval, newval)
-#define atomic_compare_and_exchange_bool_acq(mem, newval, oldval) \
+#define orig_atomic_compare_and_exchange_bool_acq(mem, newval, oldval) \
   (! __sync_bool_compare_and_swap (mem, oldval, newval))
 
 
@@ -110,7 +171,7 @@
 
 
 /* Note that we need no lock prefix.  */
-#define atomic_exchange_acq(mem, newvalue) \
+#define orig_atomic_exchange_acq(mem, newvalue) \
   ({ __typeof (*mem) result;						      \
      if (sizeof (*mem) == 1)						      \
        __asm __volatile ("xchgb %b0, %1"				      \
@@ -132,7 +193,7 @@
      result; })
 
 
-#define __arch_exchange_and_add_body(lock, mem, value)			      \
+#define __arch_exchange_and_add_body(lock, mem, value)			\
   ({ __typeof (*mem) result;						      \
      if (sizeof (*mem) == 1)						      \
        __asm __volatile (lock "xaddb %b0, %1"				      \
@@ -157,13 +218,13 @@
 			   "i" (offsetof (tcbhead_t, multiple_threads)));     \
      result; })
 
-#define atomic_exchange_and_add(mem, value) \
+#define orig_atomic_exchange_and_add(mem, value) \
   __sync_fetch_and_add (mem, value)
 
 #define __arch_exchange_and_add_cprefix \
   "cmpl $0, %%fs:%P4\n\tje 0f\n\tlock\n0:\t"
 
-#define catomic_exchange_and_add(mem, value) \
+#define orig_catomic_exchange_and_add(mem, value) \
   __arch_exchange_and_add_body (__arch_exchange_and_add_cprefix, mem, value)
 
 
@@ -196,17 +257,17 @@
 			  "i" (offsetof (tcbhead_t, multiple_threads)));      \
   } while (0)
 
-#define atomic_add(mem, value) \
-  __arch_add_body (LOCK_PREFIX, atomic, mem, value)
+#define orig_atomic_add(mem, value) \
+  ({__arch_add_body (LOCK_PREFIX, atomic, mem, value);})
 
 #define __arch_add_cprefix \
   "cmpl $0, %%fs:%P3\n\tje 0f\n\tlock\n0:\t"
 
-#define catomic_add(mem, value) \
-  __arch_add_body (__arch_add_cprefix, catomic, mem, value)
+#define orig_catomic_add(mem, value) \
+  ({__arch_add_body (__arch_add_cprefix, catomic, mem, value);})
 
 
-#define atomic_add_negative(mem, value) \
+#define orig_atomic_add_negative(mem, value) \
   ({ unsigned char __result;						      \
      if (sizeof (*mem) == 1)						      \
        __asm __volatile (LOCK_PREFIX "addb %b2, %0; sets %1"		      \
@@ -228,7 +289,7 @@
      __result; })
 
 
-#define atomic_add_zero(mem, value) \
+#define orig_atomic_add_zero(mem, value) \
   ({ unsigned char __result;						      \
      if (sizeof (*mem) == 1)						      \
        __asm __volatile (LOCK_PREFIX "addb %b2, %0; setz %1"		      \
@@ -274,16 +335,17 @@
 			  "i" (offsetof (tcbhead_t, multiple_threads)));      \
   } while (0)
 
-#define atomic_increment(mem) __arch_increment_body (LOCK_PREFIX, mem)
+#define orig_atomic_increment(mem) ({__arch_increment_body (LOCK_PREFIX, mem);})
+#define orig_nonatomic_increment(mem) ({__arch_increment_body ("", mem);})
 
 #define __arch_increment_cprefix \
   "cmpl $0, %%fs:%P2\n\tje 0f\n\tlock\n0:\t"
 
-#define catomic_increment(mem) \
-  __arch_increment_body (__arch_increment_cprefix, mem)
+#define orig_catomic_increment(mem) \
+  ({__arch_increment_body (__arch_increment_cprefix, mem);})
 
 
-#define atomic_increment_and_test(mem) \
+#define orig_atomic_increment_and_test(mem) \
   ({ unsigned char __result;						      \
      if (sizeof (*mem) == 1)						      \
        __asm __volatile (LOCK_PREFIX "incb %b0; sete %1"		      \
@@ -328,16 +390,16 @@
 			  "i" (offsetof (tcbhead_t, multiple_threads)));      \
   } while (0)
 
-#define atomic_decrement(mem) __arch_decrement_body (LOCK_PREFIX, mem)
+#define orig_atomic_decrement(mem) ({__arch_decrement_body (LOCK_PREFIX, mem);})
 
 #define __arch_decrement_cprefix \
   "cmpl $0, %%fs:%P2\n\tje 0f\n\tlock\n0:\t"
 
-#define catomic_decrement(mem) \
-  __arch_decrement_body (__arch_decrement_cprefix, mem)
+#define orig_catomic_decrement(mem) \
+    ({__arch_decrement_body (__arch_decrement_cprefix, mem);})
 
 
-#define atomic_decrement_and_test(mem) \
+#define orig_atomic_decrement_and_test(mem) \
   ({ unsigned char __result;						      \
      if (sizeof (*mem) == 1)						      \
        __asm __volatile (LOCK_PREFIX "decb %b0; sete %1"		      \
@@ -358,7 +420,7 @@
      __result; })
 
 
-#define atomic_bit_set(mem, bit) \
+#define orig_atomic_bit_set(mem, bit) \
   do {									      \
     if (sizeof (*mem) == 1)						      \
       __asm __volatile (LOCK_PREFIX "orb %b2, %0"			      \
@@ -383,7 +445,7 @@
   } while (0)
 
 
-#define atomic_bit_test_set(mem, bit) \
+#define orig_atomic_bit_test_set(mem, bit) \
   ({ unsigned char __result;						      \
      if (sizeof (*mem) == 1)						      \
        __asm __volatile (LOCK_PREFIX "btsb %3, %1; setc %0"		      \
@@ -434,9 +496,9 @@
 #define __arch_cprefix \
   "cmpl $0, %%fs:%P3\n\tje 0f\n\tlock\n0:\t"
 
-#define atomic_and(mem, mask) __arch_and_body (LOCK_PREFIX, mem, mask)
+#define orig_atomic_and(mem, mask) ({__arch_and_body (LOCK_PREFIX, mem, mask);})
 
-#define catomic_and(mem, mask) __arch_and_body (__arch_cprefix, mem, mask)
+#define orig_catomic_and(mem, mask) ({__arch_and_body (__arch_cprefix, mem, mask);})
 
 
 #define __arch_or_body(lock, mem, mask)					      \
@@ -463,6 +525,380 @@
 			  "i" (offsetof (tcbhead_t, multiple_threads)));      \
   } while (0)
 
-#define atomic_or(mem, mask) __arch_or_body (LOCK_PREFIX, mem, mask)
+#define orig_atomic_or(mem, mask) ({__arch_or_body (LOCK_PREFIX, mem, mask);})
 
-#define catomic_or(mem, mask) __arch_or_body (__arch_cprefix, mem, mask)
+#define orig_catomic_or(mem, mask) ({__arch_or_body (__arch_cprefix, mem, mask);})
+
+/*--------------------------------------------------------------------------------
+                                  MVEE PATCHES
+--------------------------------------------------------------------------------*/
+#define USE_MVEE_LIBC
+
+#define MVEE_MAX_COUNTERS 65536
+
+#ifdef USE_MVEE_LIBC
+#define MVEE_FAKE_SYSCALL_BASE          0x6FFFFFFF
+#define MVEE_GET_MASTERTHREAD_ID        MVEE_FAKE_SYSCALL_BASE + 3
+#define MVEE_GET_SHARED_BUFFER          MVEE_FAKE_SYSCALL_BASE + 4
+#define MVEE_FLUSH_SHARED_BUFFER        MVEE_FAKE_SYSCALL_BASE + 5
+#define MVEE_SET_INFINITE_LOOP_PTR      MVEE_FAKE_SYSCALL_BASE + 6
+#define MVEE_TOGGLESYNC                 MVEE_FAKE_SYSCALL_BASE + 7
+#define MVEE_SET_SHARED_BUFFER_POS_PTR  MVEE_FAKE_SYSCALL_BASE + 8
+#define MVEE_RUNS_UNDER_MVEE_CONTROL    MVEE_FAKE_SYSCALL_BASE + 9
+#define MVEE_GET_THREAD_NUM             MVEE_FAKE_SYSCALL_BASE + 10
+#define MVEE_SET_SYNC_PRIMITIVES_PTR    MVEE_FAKE_SYSCALL_BASE + 12
+#define MVEE_ALL_HEAPS_ALIGNED          MVEE_FAKE_SYSCALL_BASE + 13
+#define MVEE_LIBC_LOCK_BUFFER           3
+#define MVEE_LIBC_MALLOC_DEBUG_BUFFER   11
+#define MVEE_LIBC_ATOMIC_BUFFER         13
+#define MVEE_LIBC_ATOMIC_BUFFER_HIDDEN  17
+#define MVEE_LIBC_HIDDEN_BUFFER_ARRAY   18
+#define MVEE_FUTEX_WAIT_TID             30
+
+#define MVEE_ROUND_UP(x, multiple)		\
+  ((x + (multiple - 1)) & ~(multiple -1))
+#define MVEE_MIN(a, b) ((a > b) ? (b) : (a))
+
+extern void          mvee_atomic_postop_internal (long preop_result);
+extern long          mvee_atomic_preop_internal  (void* word_ptr);
+extern int           mvee_should_sync_tid        (void);
+extern int           mvee_all_heaps_aligned      (char* heap); 
+extern void          mvee_invalidate_buffer      (void);
+
+#define MVEE_POSTOP()					\
+  mvee_atomic_postop_internal(__tmp_mvee_preop);
+
+#define MVEE_PREOP(op_type, mem, is_store)					\
+   register long  __tmp_mvee_preop = mvee_atomic_preop_internal(mem);
+
+#endif
+
+#ifdef IS_IN_rtld
+
+// sysdeps/atomic.h patches
+#define catomic_and(mem, mask) orig_catomic_and(mem, mask)
+#define catomic_or(mem, mask) orig_catomic_or(mem, mask)
+#define catomic_exchange_and_add(mem, value) orig_catomic_exchange_and_add(mem, value)
+#define catomic_add(mem, value) orig_catomic_add(mem, value)
+#define catomic_increment(mem) orig_catomic_increment(mem)
+#define catomic_decrement(mem) orig_catomic_decrement(mem)
+#define atomic_compare_and_exchange_val_acq(mem, newval, oldval) orig_atomic_compare_and_exchange_val_acq(mem, newval, oldval)
+#define atomic_compare_and_exchange_bool_acq(mem, newval, oldval) orig_atomic_compare_and_exchange_bool_acq(mem, newval, oldval)
+#define atomic_exchange_acq(mem, newvalue) orig_atomic_exchange_acq(mem, newvalue)
+#define atomic_exchange_and_add(mem, value) orig_atomic_exchange_and_add(mem, value)
+#define atomic_increment_and_test(mem) orig_atomic_increment_and_test(mem)
+#define atomic_decrement_and_test(mem) orig_atomic_decrement_and_test(mem)
+#define atomic_add_zero(mem, value) orig_atomic_add_zero(mem, value)
+#define atomic_add(mem, value) orig_atomic_add(mem, value)
+#define atomic_increment(mem) orig_atomic_increment(mem)
+#define atomic_decrement(mem) orig_atomic_decrement(mem)
+#define atomic_bit_test_set(mem, bit) orig_atomic_bit_test_set(mem, bit)
+#define atomic_bit_set(mem, bit) orig_atomic_bit_set(mem, bit)
+#define atomic_and(mem, mask) orig_atomic_and(mem, mask)
+
+// include/atomic.h patches
+// #define catomic_compare_and_exchange_val_acq(mem, newval, oldval) orig_catomic_compare_and_exchange_val_acq(mem, newval, oldval)
+// #define catomic_compare_and_exchange_bool_acq(mem, newval, oldval) orig_catomic_compare_and_exchange_bool_acq(mem, newval, oldval)
+// #define atomic_forced_read(x) orig_atomic_forced_read(x)
+
+// nptl/sysdeps/tls.h patches
+// #define THREAD_ATOMIC_CMPXCHG_VAL(descr, member, newval, oldval) orig_THREAD_ATOMIC_CMPXCHG_VAL(descr, member, newval, oldval)
+// #define THREAD_ATOMIC_AND(descr, member, val) orig_THREAD_ATOMIC_AND(descr, member, val)
+// #define THREAD_ATOMIC_BIT_SET(descr, member, bit) orig_THREAD_ATOMIC_BIT_SET(descr, member, bit)
+
+// MVEE additions
+#define atomic_load(var) ({ var; })
+#define atomic_store(var, val) ({ var = val; })
+
+#else // !IS_IN_rtld
+
+// sysdeps/atomic.h patches
+#define catomic_and(mem, mask)			\
+  ({						\
+    MVEE_PREOP(CATOMIC_AND, mem, 1);		\
+    orig_catomic_and(mem, mask);		\
+    MVEE_POSTOP();				\
+  })
+
+#define catomic_or(mem, mask)			\
+  ({						\
+    MVEE_PREOP(CATOMIC_OR, mem, 1);		\
+    orig_catomic_or(mem, mask);			\
+    MVEE_POSTOP();				\
+  })
+
+
+#define catomic_exchange_and_add(mem, value)			\
+  ({								\
+    typeof(*mem) ____result;					\
+    MVEE_PREOP(CATOMIC_EXCHANGE_AND_ADD, mem, 1);		\
+    ____result = orig_catomic_exchange_and_add(mem, value);	\
+    MVEE_POSTOP();						\
+    ____result;							\
+  })
+
+
+#define catomic_add(mem, value)			\
+  ({						\
+    MVEE_PREOP(CATOMIC_ADD, mem, 1);		\
+    orig_catomic_add(mem, value);		\
+    MVEE_POSTOP();				\
+  })
+
+
+#define catomic_increment(mem)			\
+  ({						\
+    MVEE_PREOP(CATOMIC_INCREMENT, mem, 1);	\
+    orig_catomic_increment(mem);		\
+    MVEE_POSTOP();				\
+  })
+
+
+#define catomic_decrement(mem)			\
+  ({						\
+    MVEE_PREOP(CATOMIC_DECREMENT, mem, 1);	\
+    orig_catomic_decrement(mem);		\
+    MVEE_POSTOP();				\
+  })
+
+#define catomic_max(mem, value)			\
+  ({						\
+    MVEE_PREOP(CATOMIC_MAX, mem, 1);		\
+    orig_catomic_max(mem, value);		\
+    MVEE_POSTOP();				\
+  })
+
+
+#define atomic_compare_and_exchange_val_acq(mem, newval, oldval)	\
+  ({									\
+    typeof(*mem) ____result;						\
+    MVEE_PREOP(ATOMIC_COMPARE_AND_EXCHANGE_VAL_ACQ, mem, 1);		\
+    ____result = orig_atomic_compare_and_exchange_val_acq(mem, newval, oldval); \
+    MVEE_POSTOP();							\
+    ____result;								\
+  })
+
+
+#define atomic_compare_and_exchange_bool_acq(mem, newval, oldval)	\
+  ({									\
+    bool ____result;							\
+    MVEE_PREOP(ATOMIC_COMPARE_AND_EXCHANGE_BOOL_ACQ, mem, 1);		\
+    ____result = orig_atomic_compare_and_exchange_bool_acq(mem, newval, oldval); \
+    MVEE_POSTOP();							\
+    ____result;								\
+  })
+
+
+#define atomic_exchange_acq(mem, newvalue)			\
+  ({								\
+    typeof(*mem) ____result;					\
+    MVEE_PREOP(ATOMIC_EXCHANGE_ACQ, mem, 1);			\
+    ____result = orig_atomic_exchange_acq(mem, newvalue);	\
+    MVEE_POSTOP();						\
+    ____result;							\
+  })
+
+
+#define atomic_exchange_and_add(mem, value)			\
+  ({								\
+    typeof(*mem) ____result;					\
+    MVEE_PREOP(ATOMIC_EXCHANGE_AND_ADD, mem, 1);		\
+    ____result = orig_atomic_exchange_and_add(mem, value);	\
+    MVEE_POSTOP();						\
+    ____result;							\
+  })
+
+
+#define atomic_increment_and_test(mem)			\
+  ({							\
+    unsigned char ____result;				\
+    MVEE_PREOP(ATOMIC_INCREMENT_AND_TEST, mem, 1);	\
+    ____result = orig_atomic_increment_and_test(mem);	\
+    MVEE_POSTOP();					\
+    ____result;						\
+  })
+
+
+#define atomic_decrement_and_test(mem)			\
+  ({							\
+    unsigned char ____result;				\
+    MVEE_PREOP(ATOMIC_DECREMENT_AND_TEST, mem, 1);	\
+    ____result = orig_atomic_decrement_and_test(mem);	\
+    MVEE_POSTOP();					\
+    ____result;						\
+  })
+
+
+#define atomic_add_zero(mem, value)			\
+  ({							\
+    unsigned char ____result;				\
+    MVEE_PREOP(ATOMIC_ADD_ZERO, mem, 1);		\
+    ____result = orig_atomic_add_zero(mem, value);	\
+    MVEE_POSTOP();					\
+    ____result;						\
+  })
+
+
+#define atomic_add(mem, value)			\
+  ({						\
+    MVEE_PREOP(ATOMIC_ADD, mem, 1);		\
+    orig_atomic_add(mem, value);		\
+    MVEE_POSTOP();				\
+  })
+
+
+#define atomic_increment(mem)			\
+  ({						\
+    MVEE_PREOP(ATOMIC_INCREMENT, mem, 1);	\
+    orig_atomic_increment(mem);			\
+    MVEE_POSTOP();				\
+  })
+
+
+#define atomic_decrement(mem)			\
+  ({						\
+    MVEE_PREOP(ATOMIC_DECREMENT, mem, 1);	\
+    orig_atomic_decrement(mem);			\
+    MVEE_POSTOP();				\
+  })
+
+
+#define atomic_bit_test_set(mem, bit)			\
+  ({							\
+    unsigned char ____result;				\
+    MVEE_PREOP(ATOMIC_BIT_TEST_SET, mem, 1);		\
+    ____result = orig_atomic_bit_test_set(mem, bit);	\
+    MVEE_POSTOP();					\
+    ____result;						\
+  })
+
+
+#define atomic_bit_set(mem, bit)		\
+  ({						\
+    MVEE_PREOP(ATOMIC_BIT_SET, mem, 1);		\
+    orig_atomic_bit_set(mem, bit);		\
+    MVEE_POSTOP();				\
+  })
+
+
+#define atomic_and(mem, mask)			\
+  ({						\
+    MVEE_PREOP(ATOMIC_AND, mem, 1);		\
+    orig_atomic_and(mem, mask);			\
+    MVEE_POSTOP();				\
+  })
+
+
+
+// include/atomic.h patches
+#define catomic_compare_and_exchange_val_acq(mem, newval, oldval)	\
+  ({									\
+    typeof(*mem) ____result;						\
+    MVEE_PREOP(CATOMIC_COMPARE_AND_EXCHANGE_VAL_ACQ, mem, 1);		\
+    ____result = orig_catomic_compare_and_exchange_val_acq(mem, newval, oldval); \
+    MVEE_POSTOP();							\
+    ____result;								\
+  })
+
+#define catomic_compare_and_exchange_bool_acq(mem, newval, oldval)	\
+  ({									\
+    bool ____result;							\
+    MVEE_PREOP(CATOMIC_COMPARE_AND_EXCHANGE_BOOL_ACQ, mem, 1);		\
+    ____result = orig_catomic_compare_and_exchange_bool_acq(mem, newval, oldval); \
+    MVEE_POSTOP();							\
+    ____result;								\
+  })
+
+#define atomic_forced_read(x)			\
+  ({						\
+    typeof(x) ____result;			\
+    MVEE_PREOP(ATOMIC_FORCED_READ, &x, 0);	\
+    ____result = orig_atomic_forced_read(x);	\
+    MVEE_POSTOP();				\
+    ____result;					\
+  })
+
+
+
+// nptl/sysdeps/tls.h patches
+#if 0
+#define THREAD_ATOMIC_CMPXCHG_VAL(descr, member, newval, oldval)	\
+  ({									\
+    __typeof(descr->member) ____result;					\
+    MVEE_PREOP(__THREAD_ATOMIC_CMPXCHG_VAL, &descr->member, 1);		\
+    ____result = orig_THREAD_ATOMIC_CMPXCHG_VAL(descr, member, newval, oldval); \
+    MVEE_POSTOP();							\
+    ____result;								\
+  })
+
+
+#define THREAD_ATOMIC_AND(descr, member, val)			\
+  (void)({							\
+      MVEE_PREOP(__THREAD_ATOMIC_AND, &descr->member, 1);	\
+      orig_THREAD_ATOMIC_AND(descr, member, val);		\
+      MVEE_POSTOP();						\
+    })
+
+
+#define THREAD_ATOMIC_BIT_SET(descr, member, bit)		\
+  (void)({							\
+      MVEE_PREOP(__THREAD_ATOMIC_BIT_SET, &descr->member, 1);	\
+      orig_THREAD_ATOMIC_BIT_SET(descr, member, bit);		\
+      MVEE_POSTOP();						\
+    })
+#endif
+
+
+// MVEE additions
+#define atomic_load(var)			\
+  ({						\
+    __typeof(var+0) ____result;			\
+    MVEE_PREOP(ATOMIC_LOAD, &var, 0);		\
+    ____result = var;				\
+    MVEE_POSTOP();				\
+    ____result;					\
+  })
+
+#define atomic_store(var, val)			\
+  ({						\
+    MVEE_PREOP(ATOMIC_STORE, &var, 1);		\
+    var = val;					\
+    MVEE_POSTOP();				\
+  })
+
+#define atomic_max(mem, value)			\
+  ({						\
+    MVEE_PREOP(ATOMIC_MAX, mem, 1);		\
+    orig_atomic_max(mem, value);		\
+    MVEE_POSTOP();				\
+  })
+
+#define atomic_decrement_if_positive(mem)		\
+  ({							\
+    __typeof(*mem) __result;				\
+    MVEE_PREOP(ATOMIC_DECREMENT_IF_POSITIVE, mem, 1);	\
+    __result = orig_atomic_decrement_if_positive(mem);	\
+    MVEE_POSTOP();					\
+    __result;						\
+  })
+
+#define lll_futex_wake_unlock(futexp, nr_wake, nr_wake2, futexp2, private) \
+  ({									      \
+    INTERNAL_SYSCALL_DECL (__err);					      \
+    long int __ret;							      \
+    MVEE_PREOP(___UNKNOWN_LOCK_TYPE___, futexp2, 1);			      \
+    __ret = INTERNAL_SYSCALL (futex, __err, 6, (futexp),		      \
+			      __lll_private_flag (FUTEX_WAKE_OP, private),    \
+			      (nr_wake), (nr_wake2), (futexp2),		      \
+			      FUTEX_OP_CLEAR_WAKE_IF_GT_ONE);		      \
+    if (mvee_should_futex_unlock())					\
+      {									      \
+	*futexp2 = 0;							\
+      }									\
+    MVEE_POSTOP();							      \
+    INTERNAL_SYSCALL_ERROR_P (__ret, __err);				      \
+  })
+
+
+
+#endif
