diff -r --unified parsec-2.1/pkgs/apps/raytrace/parsec/gcc-pthreads.bldconf parsec-2.1-patched/pkgs/apps/raytrace/parsec/gcc-pthreads.bldconf
--- parsec-2.1/pkgs/apps/raytrace/parsec/gcc-pthreads.bldconf	2009-02-09 20:06:47.000000000 -0800
+++ parsec-2.1-patched/pkgs/apps/raytrace/parsec/gcc-pthreads.bldconf	2016-03-29 13:29:29.831765618 -0700
@@ -21,7 +21,7 @@
 # NOTE: By default PARSEC links raytrace to mesa with Xlib driver so that all
 #       computations are done by the CPU. This requires to also link to the X
 #       libraries and the pthreads library.
-build_env="CXXFLAGS=\"-I${PARSECDIR}/pkgs/libs/mesa/inst/${PARSECPLAT}/include ${CXXFLAGS} -fexceptions -fno-strict-aliasing -fno-align-labels -DNDEBUG -D_MM_NO_ALIGN_CHECK\" LDFLAGS=\"-L${PARSECDIR}/pkgs/libs/mesa/inst/${PARSECPLAT}/lib ${LDFLAGS}\" LIBS=\"${LIBS} -lXmu -lX11 -lGL -lGLU -lpthread\""
+build_env="CXXFLAGS=\"-I${PARSECDIR}/pkgs/libs/mesa/inst/${PARSECPLAT}/include ${CXXFLAGS} -fno-threadsafe-statics -fexceptions -fno-strict-aliasing -fno-align-labels -DNDEBUG -D_MM_NO_ALIGN_CHECK\" LDFLAGS=\"-L${PARSECDIR}/pkgs/libs/mesa/inst/${PARSECPLAT}/lib ${LDFLAGS}\" LIBS=\"${LIBS} -lXmu -lX11 -lGL -lGLU -lpthread -lXext\""
 
 # Whether the build system supports only in-place compilation.
 # If TRUE, then all sources will be copied to the build directory before we
Only in parsec-2.1-patched/pkgs/apps/raytrace/parsec: gcc-pthreads.bldconf~
diff -r --unified parsec-2.1/pkgs/apps/raytrace/src/RTTL/common/MapOptions.hxx parsec-2.1-patched/pkgs/apps/raytrace/src/RTTL/common/MapOptions.hxx
--- parsec-2.1/pkgs/apps/raytrace/src/RTTL/common/MapOptions.hxx	2009-02-01 22:53:26.000000000 -0800
+++ parsec-2.1-patched/pkgs/apps/raytrace/src/RTTL/common/MapOptions.hxx	2016-03-29 12:35:02.143784112 -0700
@@ -17,6 +17,7 @@
 #include <cstring>
 #include <vector>
 #include <map>
+#include <unistd.h>
 
 #ifndef DOXYGEN_SHOULD_IGNORE_THIS
 #ifdef _MSC_VER
diff -r --unified parsec-2.1/pkgs/apps/raytrace/src/RTTL/common/RTThread.hxx parsec-2.1-patched/pkgs/apps/raytrace/src/RTTL/common/RTThread.hxx
--- parsec-2.1/pkgs/apps/raytrace/src/RTTL/common/RTThread.hxx	2009-02-11 13:04:29.000000000 -0800
+++ parsec-2.1-patched/pkgs/apps/raytrace/src/RTTL/common/RTThread.hxx	2016-03-29 12:35:02.147784112 -0700
@@ -60,38 +60,56 @@
 class AtomicCounter
 {
 private:
-  atomic_t m_counter;
-  char dummy[64-sizeof(atomic_t)]; // (iw) to make sure it's the only
+  int m_counter;
+  pthread_mutex_t m_mutex;
+  char dummy[64-sizeof(int)-sizeof(pthread_mutex_t)]; // (iw) to make sure it's the only
                                    // counter sitting in its
                                    // cacheline....
 public:
 
   AtomicCounter() {
+    pthread_mutex_init(&m_mutex, NULL);
     reset();
   }
 
   AtomicCounter(const int v) {
+    pthread_mutex_init(&m_mutex, NULL);
     m_counter = v;
   }
 
   _INLINE void reset() {
+    pthread_mutex_lock(&m_mutex);
 #if defined(_WIN32)
     m_counter = 0;
 #else
     m_counter = -1;
 #endif
+    pthread_mutex_unlock(&m_mutex);
   }
 
   _INLINE int inc() {
-    return atomic_inc(&m_counter);
+    int ret;
+    pthread_mutex_lock(&m_mutex);
+    ret = ++m_counter;
+    pthread_mutex_unlock(&m_mutex);
+    return ret;
   }
 
   _INLINE int dec() {
-    return atomic_dec(&m_counter);
+    int ret;
+    pthread_mutex_lock(&m_mutex);
+    ret = --m_counter;
+    pthread_mutex_unlock(&m_mutex);
+    return ret;
   }
 
   _INLINE int add(const int i) {
-    return atomic_add(&m_counter,i);
+    int ret;
+    pthread_mutex_lock(&m_mutex);
+    m_counter += i;
+    ret = m_counter;
+    pthread_mutex_unlock(&m_mutex);
+    return ret;
   }
 
 
