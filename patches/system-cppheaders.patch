diff -r --unified orig_headers/c++/4.8/atomic /usr/include/c++/4.8/atomic
--- orig_headers/c++/4.8/atomic	2017-03-01 14:05:20.668489635 -0800
+++ /usr/include/c++/4.8/atomic	2017-03-03 16:42:52.398587810 -0800
@@ -161,7 +161,7 @@
     struct atomic
     {
     private:
-      _Tp _M_i;
+      _Tp volatile _M_i;
 
     public:
       atomic() noexcept = default;
@@ -289,9 +289,9 @@
   template<typename _Tp>
     struct atomic<_Tp*>
     {
-      typedef _Tp* 			__pointer_type;
+      typedef _Tp*  			__pointer_type;
       typedef __atomic_base<_Tp*>	__base_type;
-      __base_type			_M_b;
+      __base_type volatile			_M_b;
 
       atomic() noexcept = default;
       ~atomic() noexcept = default;
@@ -480,7 +480,7 @@
     struct atomic<bool> : public atomic_bool
     {
       typedef bool 			__integral_type;
-      typedef atomic_bool 		__base_type;
+      typedef atomic_bool volatile 		__base_type;
 
       atomic() noexcept = default;
       ~atomic() noexcept = default;
@@ -499,7 +499,7 @@
     struct atomic<char> : public atomic_char
     {
       typedef char 			__integral_type;
-      typedef atomic_char 		__base_type;
+      typedef atomic_char volatile 		__base_type;
 
       atomic() noexcept = default;
       ~atomic() noexcept = default;
@@ -518,7 +518,7 @@
     struct atomic<signed char> : public atomic_schar
     {
       typedef signed char 		__integral_type;
-      typedef atomic_schar 		__base_type;
+      typedef atomic_schar volatile 		__base_type;
 
       atomic() noexcept= default;
       ~atomic() noexcept = default;
@@ -537,7 +537,7 @@
     struct atomic<unsigned char> : public atomic_uchar
     {
       typedef unsigned char 		__integral_type;
-      typedef atomic_uchar 		__base_type;
+      typedef atomic_uchar volatile 		__base_type;
 
       atomic() noexcept= default;
       ~atomic() noexcept = default;
@@ -556,7 +556,7 @@
     struct atomic<short> : public atomic_short
     {
       typedef short 			__integral_type;
-      typedef atomic_short 		__base_type;
+      typedef atomic_short volatile 		__base_type;
 
       atomic() noexcept = default;
       ~atomic() noexcept = default;
@@ -575,7 +575,7 @@
     struct atomic<unsigned short> : public atomic_ushort
     {
       typedef unsigned short 	      	__integral_type;
-      typedef atomic_ushort 		__base_type;
+      typedef atomic_ushort volatile 		__base_type;
 
       atomic() noexcept = default;
       ~atomic() noexcept = default;
@@ -594,7 +594,7 @@
     struct atomic<int> : atomic_int
     {
       typedef int 			__integral_type;
-      typedef atomic_int 		__base_type;
+      typedef atomic_int volatile 		__base_type;
 
       atomic() noexcept = default;
       ~atomic() noexcept = default;
@@ -613,7 +613,7 @@
     struct atomic<unsigned int> : public atomic_uint
     {
       typedef unsigned int		__integral_type;
-      typedef atomic_uint 		__base_type;
+      typedef atomic_uint volatile 		__base_type;
 
       atomic() noexcept = default;
       ~atomic() noexcept = default;
@@ -632,7 +632,7 @@
     struct atomic<long> : public atomic_long
     {
       typedef long 			__integral_type;
-      typedef atomic_long 		__base_type;
+      typedef atomic_long volatile 		__base_type;
 
       atomic() noexcept = default;
       ~atomic() noexcept = default;
@@ -651,7 +651,7 @@
     struct atomic<unsigned long> : public atomic_ulong
     {
       typedef unsigned long 		__integral_type;
-      typedef atomic_ulong 		__base_type;
+      typedef atomic_ulong volatile 		__base_type;
 
       atomic() noexcept = default;
       ~atomic() noexcept = default;
@@ -670,7 +670,7 @@
     struct atomic<long long> : public atomic_llong
     {
       typedef long long 		__integral_type;
-      typedef atomic_llong 		__base_type;
+      typedef atomic_llong volatile 		__base_type;
 
       atomic() noexcept = default;
       ~atomic() noexcept = default;
@@ -689,7 +689,7 @@
     struct atomic<unsigned long long> : public atomic_ullong
     {
       typedef unsigned long long       	__integral_type;
-      typedef atomic_ullong 		__base_type;
+      typedef atomic_ullong volatile 		__base_type;
 
       atomic() noexcept = default;
       ~atomic() noexcept = default;
@@ -708,7 +708,7 @@
     struct atomic<wchar_t> : public atomic_wchar_t
     {
       typedef wchar_t 			__integral_type;
-      typedef atomic_wchar_t 		__base_type;
+      typedef atomic_wchar_t volatile 		__base_type;
 
       atomic() noexcept = default;
       ~atomic() noexcept = default;
@@ -727,7 +727,7 @@
     struct atomic<char16_t> : public atomic_char16_t
     {
       typedef char16_t 			__integral_type;
-      typedef atomic_char16_t 		__base_type;
+      typedef atomic_char16_t volatile 		__base_type;
 
       atomic() noexcept = default;
       ~atomic() noexcept = default;
@@ -746,7 +746,7 @@
     struct atomic<char32_t> : public atomic_char32_t
     {
       typedef char32_t 			__integral_type;
-      typedef atomic_char32_t 		__base_type;
+      typedef atomic_char32_t volatile 		__base_type;
 
       atomic() noexcept = default;
       ~atomic() noexcept = default;
diff -r --unified orig_headers/c++/4.8/bits/atomic_base.h /usr/include/c++/4.8/bits/atomic_base.h
--- orig_headers/c++/4.8/bits/atomic_base.h	2017-03-01 14:05:20.668489635 -0800
+++ /usr/include/c++/4.8/bits/atomic_base.h	2017-03-03 16:39:20.818573530 -0800
@@ -351,7 +351,7 @@
     private:
       typedef _ITp 	__int_type;
 
-      __int_type 	_M_i;
+      __int_type volatile 	_M_i;
 
     public:
       __atomic_base() noexcept = default;
@@ -665,9 +665,9 @@
     struct __atomic_base<_PTp*>
     {
     private:
-      typedef _PTp* 	__pointer_type;
+      typedef _PTp* __pointer_type;
 
-      __pointer_type 	_M_p;
+      __pointer_type volatile 	_M_p;
 
       // Factored out to facilitate explicit specialization.
       constexpr ptrdiff_t
diff -r --unified orig_headers/c++/4.8/bits/shared_ptr_base.h /usr/include/c++/4.8/bits/shared_ptr_base.h
--- orig_headers/c++/4.8/bits/shared_ptr_base.h	2017-03-01 14:05:20.668489635 -0800
+++ /usr/include/c++/4.8/bits/shared_ptr_base.h	2017-03-04 00:28:25.895473121 -0800
@@ -241,7 +241,7 @@
 	  // Replace the current counter value with the old value + 1, as
 	  // long as it's not changed meanwhile. 
 	}
-      while (!__atomic_compare_exchange_n(&_M_use_count, &__count, __count + 1,
+      while (!__atomic_compare_exchange_n(&_M_use_count, const_cast<int*>(&__count), __count + 1,
 					  true, __ATOMIC_ACQ_REL, 
 					  __ATOMIC_RELAXED));
     }
diff -r --unified orig_headers/x86_64-linux-gnu/c++/4.8/bits/atomic_word.h /usr/include/x86_64-linux-gnu/c++/4.8/bits/atomic_word.h
--- orig_headers/x86_64-linux-gnu/c++/4.8/bits/atomic_word.h	2017-03-01 14:05:20.625489632 -0800
+++ /usr/include/x86_64-linux-gnu/c++/4.8/bits/atomic_word.h	2017-03-03 15:46:52.973361073 -0800
@@ -29,7 +29,7 @@
 #ifndef _GLIBCXX_ATOMIC_WORD_H
 #define _GLIBCXX_ATOMIC_WORD_H	1
 
-typedef int _Atomic_word;
+typedef int volatile _Atomic_word;
 
 // Define these two macros using the appropriate memory barrier for the target.
 // The commented out versions below are the defaults.
